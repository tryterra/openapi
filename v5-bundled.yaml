openapi: 3.1.0
info:
  description: The Terra API
  title: TerraAPI
  version: 2022.03.16
  license:
    name: Apache-2.0
    url: https://github.com/tryterra/openapi/blob/master/LICENSE
  termsOfService: https://tryterra.co/terms-of-service
  contact:
    name: Terra API
    url: https://tryterra.co/
    email: dev@tryterra.co
servers:
  - url: https://api.tryterra.co/v2
security:
  - ApiKeyAuth: []
  - DevID: []
paths:
  /auth/authenticateUser:
    post:
      summary: Generate an authentication link
      description: Creates a login link that allows end users to connect their fitness tracking account
      tags:
        - Authentication
      operationId: Authentication_AuthenticateUser
      parameters:
        - name: resource
          in: query
          description: resource to authenticate user with
          schema:
            type: string
          required: true
        - name: dev-id
          in: header
          description: your developer ID
          required: true
          schema:
            type: string
          example: testingTerra
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                reference_id:
                  type: string
                auth_success_redirect_url:
                  type: string
                auth_failure_redirect_url:
                  type: string
        required: false
      responses:
        '200':
          description: Returned when authentication link could be successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    description: indicates that the request was successful
                    example: success
                  user_id:
                    description: User ID for the user being created
                    type: string
                    example: 23dc2540-7139-44c6-8158-f81196e2cf2e
                  auth_url:
                    type: string
                    description: authentication URL the user must be redirected to in order to link their account
                    example: https://www.fitbit.com/oauth2/authorize?response_type=code&client_id=23BBG9&scope=settings+nutrition+sleep+heartrate+electrocardiogram+weight+respiratory_rate+oxygen_saturation+profile+temperature+cardio_fitness+activity+location&state=bLqqjPie9ptwoWm6VBxHCu6JkkoWJp
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. resource)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    description: indicates that an error happened (value is error)
  /auth/generateWidgetSession:
    post:
      summary: Generate an authentication link, using the Terra Authentication Widget
      description: Generates a link to redirect an end user to for them to select an integration and log in with their fitness data provider
      tags:
        - Authentication
      operationId: Authentication_GenerateWidgetSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetSessionParams'
        required: true
      responses:
        '200':
          description: Returned when authentication link could be successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    description: Session ID for the widget authentication session
                    type: string
                    example: 23dc2540-7139-44c6-8158-f81196e2cf2e
                  url:
                    type: string
                    description: the widget URL the user must be redirected to in order to link their account
                    example: https://widget.tryterra.co/session/344d475f-296a-489a-a88c-54183671dafd
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    description: indicates that an error happened (value is success)
                    example: success
                  expires_in:
                    type: number
                    description: a number in seconds depicting how long the url is valid for
                    example: 900
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /users/{user_id}:
    patch:
      summary: Modify user
      description: Update a Terra user's reference_id or active status
      tags:
        - User
      operationId: User_ModifyUser
      parameters:
        - name: user_id
          in: path
          description: Terra user ID to update
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reference_id:
                  type: string
                  description: Identifier on your system to associate with this user
                  example: updatedUser123
                active:
                  type: boolean
                  description: Whether the user should remain active
      responses:
        '200':
          description: Returned upon successful user modification
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    description: Indicates that the request was successful
                    example: success
        '400':
          description: Returned if the parameters are malformed or no user is found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: A detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    description: Indicates an error happened
  /auth/deauthenticateUser:
    delete:
      summary: Deauthenticates a user and deletes any cached data for them
      description: Deletes all records of the user on Terra's end, revoking Terra's access to their data
      tags:
        - Authentication
      operationId: Authentication_DeauthenticateUser
      parameters:
        - name: user_id
          in: query
          description: user_id to deauthenticate for
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returned when authentication link could be successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    enum:
                      - success
                      - error
                    description: indicates that an error happened (value is success)
                    type: string
        '404':
          description: Returned when the user_id is not existent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - success
                      - error
                    description: indicates that an error happened (value is error)
  /auth/generateAuthToken:
    post:
      tags:
        - Authentication
      summary: Generates an authentication token for the Terra mobile SDKs
      description: Creates a token to be used with initConnection() functions in the Terra mobile SDKs in order to create a user record for Apple Health or Samsung Health (or equivalent)
      operationId: Authentication_GenerateAuthToken
      responses:
        '200':
          description: '200'
          content:
            application/json:
              examples:
                Result:
                  value: |-
                    {
                        "status": "success",
                        "token": "250c68b9c21b78e40e7a3285a2d538d3bc24aabd3b4c76a782fb0a571ca4501d",
                        "expires_in": 180
                    }
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: 250c68b9c21b78e40e7a3285a2d538d3bc24aabd3b4c76a782fb0a571ca4501d
                  expires_in:
                    type: integer
                    example: 180
                    default: 0
        '404':
          description: '404'
          content:
            application/json:
              examples:
                Result:
                  value: |-
                    {
                        "status": "error",
                        "message": "Invalid dev-id was provided"
                    }
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid dev-id was provided
      deprecated: false
  /activity:
    get:
      summary: Retrieve activity data for a given user ID
      description: Fetches completed workout sessions, with a defined start and end time and activity type (e.g. running, cycling, etc.)
      tags:
        - Activity
      operationId: Activity_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
        - name: with_samples
          in: query
          description: boolean flag specifying whether to include detailed samples in the returned payload
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Activity'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
                  - $ref: '#/components/schemas/RequestProcessing'
                  - $ref: '#/components/schemas/RateLimitRequestProcessing'
                  - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    post:
      tags:
        - Activity
      operationId: Activity_Write
      description: Used to post activity data to a provider. Available for Wahoo
      summary: Post activity data to a provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: List of user-tracked workouts to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/Activity'
              required:
                - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  log_ids:
                    description: List of identifiers for the objects created, returned in the same order they were posted. I.e. Posting [ObjectA, ObjectB] will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Activity successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /athlete:
    get:
      summary: Retrieve user profile info for a given user ID
      description: Fetches relevant profile info such as first & last name, birth date etc. for a given user ID
      tags:
        - Athlete
      operationId: Athlete_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AthleteCollection'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /body:
    get:
      summary: Retrieve body metrics for a given user ID
      description: Fetches body metrics such as weight, height, body fat percentage etc. for a given user ID
      tags:
        - Body
      operationId: Body_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
        - name: with_samples
          in: query
          description: boolean flag specifying whether to include detailed samples in the returned payload
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Body'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
                  - $ref: '#/components/schemas/RequestProcessing'
                  - $ref: '#/components/schemas/RateLimitRequestProcessing'
                  - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    post:
      tags:
        - Body
      operationId: Body_Write
      description: Used to post body data to a provider. Available for Google Fit
      summary: Post body data to a provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: Body measurement metrics to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/Body'
              required:
                - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  log_ids:
                    description: List of identifiers for the objects created, returned in the same order they were posted. I.e. Posting [ObjectA, ObjectB] will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Body data successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    delete:
      tags:
        - Body
      operationId: Body_Delete
      description: Used to delete Body metrics the user has registered on their account
      summary: Delete body metrics for a given user ID
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                log_ids:
                  type: array
                  description: List of identifiers for body metrics entries to be deleted
                  items:
                    type: string
                  required:
                    - data
        required: true
      responses:
        '200':
          description: Returned when all records were deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the body metric entries whose deletion was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting to delete the body metric entries
        '207':
          description: Returned when multiple status codes were obtained from attempting to delete the requested records
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the body metric entry whose deletion was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting to delete the body metric entry
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /daily:
    get:
      summary: Retrieve daily activity summaries for a given user ID
      description: Fetches daily summaries of activity metrics such as steps, distance, calories burned etc. for a given user ID
      tags:
        - Daily
      operationId: Daily_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
        - name: with_samples
          in: query
          description: boolean flag specifying whether to include detailed samples in the returned payload
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Daily'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
                  - $ref: '#/components/schemas/RequestProcessing'
                  - $ref: '#/components/schemas/RateLimitRequestProcessing'
                  - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /menstruation:
    get:
      summary: Retrieve menstruation data for a given user ID
      description: Fetches menstruation data such as cycle length, period length, ovulation date etc. for a given user ID
      tags:
        - Menstruation
      operationId: Menstruation_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
        - name: with_samples
          in: query
          description: boolean flag specifying whether to include detailed samples in the returned payload
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Menstruation'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
                  - $ref: '#/components/schemas/RequestProcessing'
                  - $ref: '#/components/schemas/RateLimitRequestProcessing'
                  - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /nutrition:
    get:
      summary: Retrieve nutrition log data for a given user ID
      description: Fetches nutrition log data such as meal type, calories, macronutrients etc. for a given user ID
      tags:
        - Nutrition
      operationId: Nutrition_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
        - name: with_samples
          in: query
          description: boolean flag specifying whether to include detailed samples in the returned payload
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Nutrition'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
                  - $ref: '#/components/schemas/RequestProcessing'
                  - $ref: '#/components/schemas/RateLimitRequestProcessing'
                  - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    post:
      tags:
        - Nutrition
      operationId: Nutrition_Write
      description: Used to post nutrition logs to a provider. Available for Fitbit
      summary: Post nutrition logs to a provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: Nutrition entry to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/Nutrition'
              required:
                - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  log_ids:
                    description: List of identifiers for the objects created, returned in the same order they were posted. I.e. Posting [ObjectA, ObjectB] will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Nutrition successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    delete:
      tags:
        - Nutrition
      operationId: Nutrition_Delete
      description: Used to delete nutrition logs the user has registered on their account
      summary: Delete nutrition logs for a given user ID
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: List of identifiers for nutrition entries to be deleted
                  items:
                    type: string
                  required:
                    - data
        required: true
      responses:
        '200':
          description: Returned when all records were deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the nutrition log whose deletion was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting to delete the nutrition log
        '207':
          description: Returned when multiple status codes were obtained from attempting to delete the requested records
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the nutrition log whose deletion was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting to delete the nutrition log
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    enum:
                      - success
                      - error
                    type: string
                    description: indicates that an error happened (value is error)
  /sleep:
    get:
      summary: Retrieve sleep sessions for a given user ID
      description: Fetches sleep data such as sleep duration, sleep stages, sleep quality etc. for a given user ID, for sleep sessions with a defined start and end time
      tags:
        - Sleep
      operationId: Sleep_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
        - name: with_samples
          in: query
          description: boolean flag specifying whether to include detailed samples in the returned payload
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Sleep'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
                  - $ref: '#/components/schemas/RequestProcessing'
                  - $ref: '#/components/schemas/RateLimitRequestProcessing'
                  - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /plannedWorkout:
    post:
      tags:
        - PlannedWorkout
      operationId: PlannedWorkout_Write
      description: Used to post workout plans users can follow on their wearable. This can be stregnth workouts (sets, reps, weight lifted) or cardio workouts (warmup, intervals of different intensities, cooldown etc)
      summary: Post workout plans to a provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: PlannedWorkout entry to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/PlannedWorkout'
              required:
                - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  log_ids:
                    description: List of identifiers for the objects created, returned in the same order they were posted. I.e. Posting [ObjectA, ObjectB] will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Nutrition successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    get:
      summary: Retrieve workout plans for a given user ID
      description: Used to get workout plans the user has registered on their account. This can be stregnth workouts (sets, reps, weight lifted) or cardio workouts (warmup, intervals of different intensities, cooldown etc)
      tags:
        - PlannedWorkout
      operationId: PlannedWorkout_Fetch
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
        - name: start_date
          in: query
          description: start date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: true
        - name: end_date
          in: query
          description: end date of data to query for - either ISO8601 date or unix timestamp
          schema:
            oneOf:
              - type: integer
              - type: string
                format: date
          required: false
        - name: to_webhook
          in: query
          description: boolean flag specifying whether to send the data retrieved to the webhook, or in the response
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/PlannedWorkout'
                      type:
                        type:
                          - string
                          - 'null'
                  - $ref: '#/components/schemas/NoDataReturned'
                  - $ref: '#/components/schemas/DataSentToWebhook'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
    delete:
      tags:
        - PlannedWorkout
      operationId: PlannedWorkout_Delete
      description: Used to delete workout plans the user has registered on their account. This can be stregnth workouts (sets, reps, weight lifted) or cardio workouts (warmup, intervals of different intensities, cooldown etc)
      summary: Delete workout plans for a given user ID
      parameters:
        - name: user_id
          in: query
          description: user ID to query data for
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  description: List of identifiers for planned workout entries to be deleted
                  items:
                    type: string
                  required:
                    - data
        required: true
      responses:
        '200':
          description: Returned when all records were deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the planned workout whose deletion was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting to delete the planned workout
        '207':
          description: Returned when multiple status codes were obtained from attempting to delete the requested records
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/TerraUser'
                  processed_data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Identifier of the planned workout whose deletion was attempted
                      response_code:
                        type: integer
                        description: Response code from the provider when attempting to delete the planned workout
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when authorization with a data provider has failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    enum:
                      - success
                      - error
                    type: string
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /userInfo:
    get:
      tags:
        - User
      operationId: User_GetInfoForUserID
      description: Used to query for information on one Terra user ID, or to query for all registered Terra User objects under one reference ID
      summary: Get information for a single user ID or multiple users by reference ID
      parameters:
        - name: user_id
          in: query
          description: user ID to query for
          schema:
            type: string
          required: false
        - name: reference_id
          in: query
          description: reference ID to query for
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Returned when the provided resources are found
          content:
            application/json:
              schema:
                oneOf:
                  - description: User information for one connection (single User object)
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/TerraUser'
                      status:
                        type: string
                        enum:
                          - success
                          - error
                        default: success
                      is_authenticated:
                        type: boolean
                  - description: List of multiple User objects the reference_id is associated to
                    type: array
                    items:
                      $ref: '#/components/schemas/TerraUser'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /subscriptions:
    get:
      tags:
        - User
      operationId: User_GetAllUserIDs
      description: Used to query for information for all Terra User IDs. Supports optional pagination via `page` and `per_page`. If `page` is not provided, it returns all users in one go (backwards compatibility).
      summary: Get all Terra User IDs
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: Zero-based page number. If omitted, results are not paginated.
          example: 0
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
          description: Number of results per page (default is 500).
          example: 500
      responses:
        '200':
          description: Returned upon a successful request
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/TerraUser'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          next:
                            type:
                              - integer
                              - 'null'
                            description: The next page number, or null if there is no next page
                          max_page:
                            type: integer
                            description: The maximum page index
                          results:
                            type: array
                            items:
                              $ref: '#/components/schemas/TerraUser'
        '400':
          description: Returned when one or more parameters are malformed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: A detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: Indicates that an error occurred (value is `error`)
  /bulkUserInfo:
    post:
      tags:
        - User
      operationId: User_GetInfoForMultipleUserIDs
      description: Used to query for information for multiple Terra User IDs
      summary: Get information for multiple user IDs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: List of user IDs to get information for
              items:
                type: string
        required: true
      responses:
        '200':
          description: Returned upon successful request
          content:
            application/json:
              schema:
                description: List of User objects
                type: array
                items:
                  $ref: '#/components/schemas/TerraUser'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g. user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    description: indicates that an error happened (value is error)
  /integrations:
    get:
      summary: Get list of available integrations
      tags:
        - Integrations
      operationId: Integrations_Fetch
      description: Retrieve a list of all available provider integrations on the API.
      security: []
      responses:
        '200':
          description: Returns list of all available integrations on the API
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      type: string
                      example: FITBIT
                  sdk_resource:
                    type: array
                    items:
                      type: string
                      example: APPLE
                  status:
                    enum:
                      - success
                      - error
                    type: string
                    default: success
  /integrations/detailed:
    get:
      tags:
        - Integrations
      operationId: Integrations_DetailedFetch
      summary: Get detailed list of integrations
      description: Retrieve a detailed list of supported integrations, optionally filtered by the developer's enabled integrations and the requirement for SDK usage.
      parameters:
        - in: query
          name: sdk
          required: false
          schema:
            type: boolean
          description: If `true`, allows SDK integrations to be included in the response.
      responses:
        '200':
          description: Successful response containing a list of integrations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationsResponse'
      security: []
webhooks:
  healthcheck:
    post:
      description: Healthcheck event sent periodically to verify your event is functional
      summary: Healthcheck webhook
      operationId: healthcheckWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthcheckEvent'
      responses:
        '200':
          description: Successful healthcheck response
  auth:
    post:
      description: Occurs when a user attempts to authenticate
      summary: User authentication webhook
      operationId: userAuthWebhook
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthSuccessEvent'
                - $ref: '#/components/schemas/AuthErrorEvent'
      responses:
        '200':
          description: Successful authentication response
  deauth:
    post:
      description: Occurs when a user deauthenticates through the Terra
      summary: User deauthentication webhook
      operationId: userDeauthWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeauthEvent'
      responses:
        '200':
          description: Successful deauthentication response
  user_reauth:
    post:
      description: Occurs when a user successfully authenticates for a second time, with the same account. You will receive a successful auth and a user_reauth payload
      summary: User reauthentication webhook
      operationId: userReauthWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReauthEvent'
      responses:
        '200':
          description: Successful reauthentication response
  access_revoked:
    post:
      description: Occurs when a user revokes Terra's access from the provider's end
      summary: Access revoked webhook
      operationId: accessRevokedWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessRevokedEvent'
      responses:
        '200':
          description: Successful access revocation response
  connection_error:
    post:
      description: Occurs when a request to a provider returns an HTTP response of 401, 403 or 412
      summary: Connection error webhook
      operationId: connectionErrorWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionErrorEvent'
      responses:
        '200':
          description: Successful connection error response
  google_no_datasource:
    post:
      description: Occurs when a Google Fit user doesn't have a data source linked to their account. All data requests for the user will be empty unless they link a data source
      summary: Google no data source webhook
      operationId: googleNoDataSourceWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleNoDatasourceEvent'
      responses:
        '200':
          description: Successful no data source response
  processing:
    post:
      description: Occurs when data is being fetched asynchronously from the provider. The data will be sent through automatically via your Destination, and you can also safely request for it after the time in the retry_after_seconds field.
      summary: Data processing webhook
      operationId: dataProcessingWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessingEvent'
      responses:
        '200':
          description: Successful processing response
  large_request_sending:
    post:
      description: Occurs when more than one month of data has been requested and all data has been successfully submitted
      summary: Large request sending webhook
      operationId: largeRequestSendingWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LargeRequestSendingEvent'
      responses:
        '200':
          description: Successful large request sending response
  large_request_processing:
    post:
      description: Occurs when more a request for over one month of data has been submitted to Terra. Data will be sent in chunks with the same reference field after this request. Each chunk will be at most 10 objects in the data field or 10 MB in size, whichever limit gets hit first
      summary: Large request processing webhook
      operationId: largeRequestProcessingWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LargeRequestProcessingEvent'
      responses:
        '200':
          description: Successful large request processing response
  rate_limit_hit:
    post:
      description: Occurs when an asynchronous request has failed due to rate limiting and is going to be retried.
      summary: Rate limit hit webhook
      operationId: rateLimitHitWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitHitEvent'
      responses:
        '200':
          description: Successful rate limit hit response
  s3_upload:
    post:
      description: Data event sent as a download link.
      summary: S3 upload webhook
      operationId: s3UploadWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/S3PayloadEvent'
      responses:
        '200':
          description: Successful S3 upload response
  activity:
    post:
      description: 'activity data event: activity updates when new activity is completed'
      summary: Activity webhook
      operationId: activityWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivityEvent'
      responses:
        '200':
          description: Successful activity response
  athelete:
    post:
      description: 'athelete data event: Occurs throughout the day as users use their wearables.'
      summary: Athlete webhook
      operationId: athleteWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AthleteEvent'
      responses:
        '200':
          description: Successful athlete response
  nutrition:
    post:
      description: 'nutrition data event: occurs throughout the day as users use their wearables.'
      summary: Nutrition webhook
      operationId: nutritionWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NutritionEvent'
      responses:
        '200':
          description: Successful nutrition response
  daily:
    post:
      description: 'daily data event: occurs throughout the day as users use their wearables.'
      summary: Daily webhook
      operationId: dailyWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyEvent'
      responses:
        '200':
          description: Successful daily response
  sleep:
    post:
      description: 'sleep data event: occurs throughout the day as users use their wearables.'
      summary: Sleep webhook
      operationId: sleepWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SleepEvent'
      responses:
        '200':
          description: Successful sleep response
  menstruation:
    post:
      description: 'menstruation data event: occurs throughout the day as users use their wearables.'
      summary: Menstruation webhook
      operationId: menstruationWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenstruationEvent'
      responses:
        '200':
          description: Successful menstruation response
  body:
    post:
      description: 'body data event: occurs throughout the day as users use their wearables.'
      summary: Body webhook
      operationId: bodyWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyEvent'
      responses:
        '200':
          description: Successful body response
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: Your API key for authentication
    DevID:
      type: apiKey
      in: header
      name: dev-id
      description: Your developer ID for authentication and tracking
  schemas:
    WidgetSessionParams:
      type: object
      properties:
        providers:
          type: string
          description: Comma separated list of providers to display on the device selection page. This overrides your selected sources on your dashboard
          example: GARMIN,FITBIT,OURA,WITHINGS,SUUNTO
        language:
          type: string
          description: Display language of the widget
          example: en
        reference_id:
          type: string
          description: Identifier of the end user on your system, such as a user ID or email associated with them
          example: user123@email.com
        auth_success_redirect_url:
          type: string
          description: URL the user is redirected to upon successful authentication
          example: https://myapp.com/success
        auth_failure_redirect_url:
          type: string
          description: URL the user is redirected to upon unsuccessful authentication
          example: https://myapp.com/failure
    User:
      $ref: '#/components/schemas/TerraUser'
    NoDataReturned:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - error
          example: error
        message:
          type: string
          example: No data available for specified time range
        type:
          type:
            - string
            - 'null'
          example: no_data
        user:
          description: Terra User object
          type: object
          allOf:
            - $ref: '#/components/schemas/TerraUser'
    RequestProcessing:
      type: object
      properties:
        retry_after_seconds:
          type: number
          description: Recommended time after which the request may be retried
          nullable: true
          example: 30
        message:
          type: string
          nullable: false
          example: Request is being processed
        type:
          type: string
          nullable: false
          example: processing
        user:
          description: Terra User object
          type: object
          allOf:
            - $ref: '#/components/schemas/TerraUser'
    RateLimitRequestProcessing:
      type: object
      properties:
        message:
          type: string
          nullable: false
          example: Rate limit exceeded
        type:
          type: string
          nullable: false
          example: rate_limit
        user:
          $ref: '#/components/schemas/TerraUser'
      required:
        - user
    DataSentToWebhook:
      type: object
      properties:
        reference:
          type: string
          description: Payload reference, tying the request to the webhook payload which will be received
          nullable: true
          example: webhook_ref_123
        message:
          type: string
          nullable: false
          example: Data will be sent to webhook
        type:
          type: string
          nullable: false
          example: webhook
        user:
          description: Terra User object
          type: object
          allOf:
            - $ref: '#/components/schemas/TerraUser'
    Activity:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Activity.yaml
      type: object
      properties:
        active_durations_data:
          $ref: '#/components/schemas/ActiveDurationsData'
        calories_data:
          $ref: '#/components/schemas/CaloriesData'
        cheat_detection:
          type: number
        data_enrichment:
          $ref: '#/components/schemas/DataEnrichment'
        device_data:
          $ref: '#/components/schemas/DeviceData'
        distance_data:
          $ref: '#/components/schemas/DistanceData'
        energy_data:
          $ref: '#/components/schemas/EnergyData'
        heart_rate_data:
          $ref: '#/components/schemas/HeartRateData'
        lap_data:
          $ref: '#/components/schemas/LapData'
        MET_data:
          $ref: '#/components/schemas/METData'
        metadata:
          $ref: '#/components/schemas/ActivityMetadata'
        movement_data:
          $ref: '#/components/schemas/MovementData'
        oxygen_data:
          $ref: '#/components/schemas/OxygenData'
        polyline_map_data:
          $ref: '#/components/schemas/PolylineMapData'
        position_data:
          $ref: '#/components/schemas/PositionData'
        power_data:
          $ref: '#/components/schemas/PowerData'
        strain_data:
          $ref: '#/components/schemas/StrainData'
        TSS_data:
          $ref: '#/components/schemas/TSSData'
        work_data:
          $ref: '#/components/schemas/WorkData'
      required:
        - metadata
    Athlete:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Athlete.yaml
      type: object
      properties:
        age:
          type: integer
          minimum: -2147483648
          maximum: 2147483647
        country:
          type: string
        bio:
          type: string
        state:
          type: string
        last_name:
          type: string
        sex:
          type: string
        city:
          type: string
        email:
          type: string
        date_of_birth:
          type: string
        first_name:
          type: string
        gender:
          type: string
        joined_provider:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceData'
    AthleteCollection:
      type: object
      properties:
        athlete:
          description: Object containing the user's information
          type: object
          allOf:
            - $ref: '#/components/schemas/Athlete'
        type:
          type: string
          nullable: true
          example: athlete
        user:
          description: Terra User object
          type: object
          allOf:
            - $ref: '#/components/schemas/TerraUser'
    Body:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Body.yaml
      type: object
      properties:
        blood_pressure_data:
          $ref: '#/components/schemas/BloodPressureData'
        device_data:
          $ref: '#/components/schemas/DeviceData'
        heart_data:
          $ref: '#/components/schemas/HeartData'
        hydration_data:
          $ref: '#/components/schemas/HydrationData'
        ketone_data:
          $ref: '#/components/schemas/KetoneData'
        measurements_data:
          $ref: '#/components/schemas/MeasurementsData'
        metadata:
          $ref: '#/components/schemas/BodyMetadata'
        oxygen_data:
          $ref: '#/components/schemas/OxygenData'
        temperature_data:
          $ref: '#/components/schemas/TemperatureData'
      required:
        - metadata
    Daily:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Daily.yaml
      type: object
      properties:
        active_durations_data:
          $ref: '#/components/schemas/ActiveDurationsData'
        calories_data:
          $ref: '#/components/schemas/CaloriesData'
        data_enrichment:
          $ref: '#/components/schemas/DailyDataEnrichment'
        device_data:
          $ref: '#/components/schemas/DeviceData'
        distance_data:
          $ref: '#/components/schemas/DailyDistanceData'
        heart_rate_data:
          $ref: '#/components/schemas/HeartRateData'
        MET_data:
          $ref: '#/components/schemas/METData'
        metadata:
          $ref: '#/components/schemas/DailyMetadata'
        oxygen_data:
          $ref: '#/components/schemas/OxygenData'
        scores:
          $ref: '#/components/schemas/ScoreData'
        strain_data:
          $ref: '#/components/schemas/StrainData'
        stress_data:
          $ref: '#/components/schemas/StressData'
        tag_data:
          $ref: '#/components/schemas/TagData'
      required:
        - metadata
    Menstruation:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Menstruation.yaml
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/MenstruationMetadata'
        menstruation_data:
          $ref: '#/components/schemas/MenstruationData'
      required:
        - metadata
    Nutrition:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Nutrition.yaml
      type: object
      properties:
        drink_samples:
          type: array
          items:
            $ref: '#/components/schemas/DrinkSample'
        meals:
          type: array
          items:
            $ref: '#/components/schemas/Meal'
        metadata:
          $ref: '#/components/schemas/NutritionMetadata'
        summary:
          $ref: '#/components/schemas/NutritionSummary'
      required:
        - metadata
    Sleep:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Sleep.yaml
      type: object
      properties:
        data_enrichment:
          $ref: '#/components/schemas/SleepDataEnrichment'
        device_data:
          $ref: '#/components/schemas/DeviceData'
        heart_rate_data:
          $ref: '#/components/schemas/HeartRateData'
        metadata:
          $ref: '#/components/schemas/SleepMetadata'
        readiness_data:
          $ref: '#/components/schemas/ReadinessData'
        respiration_data:
          $ref: '#/components/schemas/RespirationData'
        scores:
          $ref: '#/components/schemas/ScoreData'
        sleep_durations_data:
          $ref: '#/components/schemas/SleepDurationsData'
        temperature_data:
          $ref: '#/components/schemas/SleepTemperatureData'
      required:
        - metadata
    PlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: HEART_RATE
    CadencePlannedWorkoutStepTarget:
      type: object
      properties:
        cadence:
          type: integer
          description: Ideal cadence value to be maintained for the workout step
          nullable: true
          example: 90
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: CADENCE
        cadence_low:
          type: integer
          description: Minimum cadence threshold for the workout step - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 85
        cadence_high:
          type: integer
          description: Maximum cadence threshold for the workout step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 95
    HRPlannedWorkoutStepTarget:
      type: object
      properties:
        hr_percentage_low:
          type: number
          description: Maximum max heart rate percentage threshold for the workout step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 65.5
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: HEART_RATE
        hr_percentage_high:
          type: number
          description: Minimum heart rate percentage threshold for the workout step - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 85.5
        hr_percentage:
          type: number
          description: Ideal percentage of user's maximum HR to be maintained workout step
          nullable: true
          example: 75.5
        hr_bpm_high:
          type: integer
          description: Maximum heart rate threshold for the workout step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 175
        hr_bpm_low:
          type: integer
          description: Minimum heart rate threshold for the workout step - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 130
    PowerPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: POWER
        power_percentage_low:
          type: number
          description: Maximum percentage of Functional Threshold Power for the workout step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 65.5
        power_percentage_high:
          type: number
          description: Minimum percentage of Functional Threshold Power for the workout step - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 85.5
        power_watt_high:
          type: integer
          description: Maximum power threshold for the workout step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 300
        power_watt_low:
          type: integer
          description: Minimum power threshold for the workout step - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 200
        power_watt:
          type: integer
          default: null
          nullable: true
          example: 250
        power_percentage:
          type: number
          description: Ideal percentage of user's Functional Threshold Power to be maintained workout step
          nullable: true
          example: 75.5
    SpeedPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: SPEED
        speed_percentage_high:
          type: number
          description: Maximum speed threshold for the workout step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 85.5
        speed_percentage_low:
          type: number
          description: Minimum speed threshold for the workout step - i.e. the user is to stay above this value during the workout step
          nullable: true
          example: 65.5
        speed_percentage:
          type: number
          description: Ideal percentage of user's Threshold Speed, based off their Threshold Pace, to be maintained workout step. Usually, the Threshold Pace is defined as the pace one could race at for 50 to 60 minutes
          nullable: true
          example: 75.5
        speed_meters_per_second:
          type: number
          description: Ideal speed value to be maintained for the workout step
          nullable: true
          example: 4.2
    PacePlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: PACE
        pace_minutes_per_kilometer:
          type: number
          description: Ideal pace value to be maintained for the workout step
          nullable: true
          example: 5.5
    TSSPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: TSS
        tss:
          type: number
          description: Planned Training Stress Score to be achieved for the workout step
          nullable: true
          example: 100.5
    IFPlannedWorkoutStepTarget:
      type: object
      properties:
        if_high:
          type: number
          description: Maximum Intensity Factor to be achieved for the workout step
          nullable: true
          example: 1.2
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: IF
        if_low:
          type: number
          description: Minimum Intensity Factor to be achieved for the workout step
          nullable: true
          example: 0.8
    RepetitionPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: REPETITION
        repetitions:
          type: number
          description: Number of repetitions of the workout step to be performed
          nullable: true
          example: 10
    SwimStrokePlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
            - SPEED
            - HEART_RATE
            - OPEN
            - CADENCE
            - POWER
            - GRADE
            - RESISTANCE
            - POWER_LAP
            - SWIM_STROKE
            - SPEED_LAP
            - HEART_RATE_LAP
            - PACE
            - HEART_RATE_THRESHOLD_PERCENTAGE
            - HEART_RATE_MAX_PERCENTAGE
            - SPEED_PERCENTAGE
            - POWER_PERCENTAGE
            - REPETITION
            - TSS
            - IF
          example: SWIM_STROKE
        swim_strokes:
          type: integer
          description: Number of swim strokes to be performed during the workout step
          nullable: true
          example: 50
    PlannedWorkoutStepTargets:
      type: object
      properties: {}
      oneOf:
        - $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/CadencePlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/HRPlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/PowerPlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/SpeedPlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/PacePlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/TSSPlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/IFPlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/RepetitionPlannedWorkoutStepTarget'
        - $ref: '#/components/schemas/SwimStrokePlannedWorkoutStepTarget'
      discriminator:
        propertyName: type
        mapping:
          PlannedWorkoutStepTarget: '#/components/schemas/PlannedWorkoutStepTarget'
          CadencePlannedWorkoutStepTarget: '#/components/schemas/CadencePlannedWorkoutStepTarget'
          HRPlannedWorkoutStepTarget: '#/components/schemas/HRPlannedWorkoutStepTarget'
          PowerPlannedWorkoutStepTarget: '#/components/schemas/PowerPlannedWorkoutStepTarget'
          SpeedPlannedWorkoutStepTarget: '#/components/schemas/SpeedPlannedWorkoutStepTarget'
          PacePlannedWorkoutStepTarget: '#/components/schemas/PacePlannedWorkoutStepTarget'
          TSSPlannedWorkoutStepTarget: '#/components/schemas/TSSPlannedWorkoutStepTarget'
          IFPlannedWorkoutStepTarget: '#/components/schemas/IFPlannedWorkoutStepTarget'
          RepetitionPlannedWorkoutStepTarget: '#/components/schemas/RepetitionPlannedWorkoutStepTarget'
          SwimStrokePlannedWorkoutStepTarget: '#/components/schemas/SwimStrokePlannedWorkoutStepTarget'
    PlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    TimePlannedWorkoutStepDuration:
      type: object
      properties:
        seconds:
          type: integer
          description: Time duration to be elapsed for the workout step
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    PowerAbovePlannedWorkoutStepDuration:
      type: object
      properties:
        power_above_watts:
          type: integer
          description: Threshold power goal to complete the workout step - once the user reaches above this power level, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    PowerBelowPlannedWorkoutStepDuration:
      type: object
      properties:
        power_below_watts:
          type: integer
          description: Threshold power goal to complete the workout step - once the user reaches below this power level, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    FixedRestPlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
        rest_seconds:
          type: integer
          description: Time duration to be elapsed for the rest period
          nullable: true
    CaloriesPlannedWorkoutStepDuration:
      type: object
      properties:
        calories:
          type: integer
          description: Calorie burn target for the workout step - once the user reaches the target, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    HRAbovePlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
        hr_above_bpm:
          type: integer
          description: Threshold heart rate goal to complete the workout step - once the user's heart rate reaches above below this value, the step will be completed
          nullable: true
    HRBelowPlannedWorkoutStepDuration:
      type: object
      properties:
        hr_below_bpm:
          type: integer
          description: Threshold heart rate goal to complete the workout step - once the user's heart rate reaches below this value, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    RepsPlannedWorkoutStepDuration:
      type: object
      properties:
        reps:
          type: integer
          description: Target number of reps for the workout step - once the user completes this rep target, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    DistancePlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
        distance_meters:
          type: integer
          description: Target distance for the workout step - once the user covers this distance, the step will be completed
          nullable: true
    StepsPlannedWorkoutStepDuration:
      type: object
      properties:
        steps:
          type: integer
          description: Target number of steps for the workout step - once the user performs this number of steps, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout step complete
          nullable: false
          type: string
          enum:
            - TIME
            - DISTANCE_METERS
            - HR_LESS_THAN
            - HR_GREATER_THAN
            - CALORIES
            - OPEN
            - POWER_LESS_THAN
            - POWER_GREATER_THAN
            - REPETITION_TIME
            - REPS
            - FIXED_REST
            - TIME_AT_VALID_CDA
            - STEPS
    PlannedWorkoutStepDurations:
      type: object
      properties: {}
      oneOf:
        - $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/TimePlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/PowerAbovePlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/PowerBelowPlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/FixedRestPlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/CaloriesPlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/HRAbovePlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/HRBelowPlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/RepsPlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/DistancePlannedWorkoutStepDuration'
        - $ref: '#/components/schemas/StepsPlannedWorkoutStepDuration'
      discriminator:
        propertyName: type
        mapping:
          PlannedWorkoutStepDuration: '#/components/schemas/PlannedWorkoutStepDuration'
          TimePlannedWorkoutStepDuration: '#/components/schemas/TimePlannedWorkoutStepDuration'
          PowerAbovePlannedWorkoutStepDuration: '#/components/schemas/PowerAbovePlannedWorkoutStepDuration'
          PowerBelowPlannedWorkoutStepDuration: '#/components/schemas/PowerBelowPlannedWorkoutStepDuration'
          FixedRestPlannedWorkoutStepDuration: '#/components/schemas/FixedRestPlannedWorkoutStepDuration'
          CaloriesPlannedWorkoutStepDuration: '#/components/schemas/CaloriesPlannedWorkoutStepDuration'
          HRAbovePlannedWorkoutStepDuration: '#/components/schemas/HRAbovePlannedWorkoutStepDuration'
          HRBelowPlannedWorkoutStepDuration: '#/components/schemas/HRBelowPlannedWorkoutStepDuration'
          RepsPlannedWorkoutStepDuration: '#/components/schemas/RepsPlannedWorkoutStepDuration'
          DistancePlannedWorkoutStepDuration: '#/components/schemas/DistancePlannedWorkoutStepDuration'
          StepsPlannedWorkoutStepDuration: '#/components/schemas/StepsPlannedWorkoutStepDuration'
    PlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTargets'
        type:
          description: Type of workout step - either repeat or one-off
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          description: Planned intensity for the workout step
          type: string
          enum:
            - REST
            - WARMUP
            - COOLDOWN
            - RECOVERY
            - INTERVAL
            - ACTIVE
        order:
          type: integer
          description: Position of the workout step in the overall workout
        description:
          type: string
          description: Description of workout step
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDurations'
        name:
          type: string
          description: Name of workout step
    PlannedWorkoutRepeatStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        steps:
          type: array
          description: List of steps to be repeated for this workout step - e.g. if a user wants to schedule 5 repetitions of 100m sprints plus 20s rest in between
          items:
            $ref: '#/components/schemas/PlannedWorkoutStep'
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    SwimmingPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        equipement_type:
          description: Workout equipment to be used during the workout step
          nullable: false
          type: string
          enum:
            - NONE
            - SWIM_FINS
            - SWIM_KICKBOARD
            - SWIM_PADDLES
            - SWIM_PULL_BUOY
            - SWIM_SNORKEL
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
        stroke_type:
          description: Stroke type used for the workout step (e.g. breaststroke)
          nullable: false
          type: string
          enum:
            - OTHER
            - FREESTYLE
            - BACKSTROKE
            - BREASTSTROKE
            - BUTTERFLY
            - REST
    CardioPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        exercice_name:
          type: string
          description: Name of exercise to be performed for the workout step
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        exercice_category:
          description: Type of exercise to be performed for the workout step
          nullable: false
          type: string
          enum:
            - UNKNOWN
            - BENCH_PRESS
            - CALF_RAISE
            - CARDIO
            - CARRY
            - CHOP
            - CORE
            - CRUNCH
            - CURL
            - DEADLIFT
            - FLYE
            - HIP_RAISE
            - HIP_STABILITY
            - HIP_SWING
            - HYPEREXTENSION
            - LATERAL_RAISE
            - LEG_CURL
            - LEG_RAISE
            - LUNGE
            - OLYMPIC_LIFT
            - PLANK
            - PLYO
            - PULL_UP
            - PUSH_UP
            - ROW
            - SHOULDER_PRESS
            - SHOULDER_STABILITY
            - SHRUG
            - SIT_UP
            - SQUAT
            - TOTAL_BODY
            - TRICEPS_EXTENSION
            - WARM_UP
            - RUN
            - BIKE
            - CARDIO_SENSORS
        name:
          type: string
          description: Name of workout step
          nullable: true
    StrengthPlannedWorkoutStep:
      type: object
      properties:
        weight_kg:
          type: number
          description: Weight to be lifted for the exercise
          nullable: true
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        exercice_name:
          type: string
          description: Name of strength exercise to be performed for the workout step
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        exercice_category:
          description: Type of strength exercise to be performed for the workout step
          nullable: false
          type: string
          enum:
            - UNKNOWN
            - BENCH_PRESS
            - CALF_RAISE
            - CARDIO
            - CARRY
            - CHOP
            - CORE
            - CRUNCH
            - CURL
            - DEADLIFT
            - FLYE
            - HIP_RAISE
            - HIP_STABILITY
            - HIP_SWING
            - HYPEREXTENSION
            - LATERAL_RAISE
            - LEG_CURL
            - LEG_RAISE
            - LUNGE
            - OLYMPIC_LIFT
            - PLANK
            - PLYO
            - PULL_UP
            - PUSH_UP
            - ROW
            - SHOULDER_PRESS
            - SHOULDER_STABILITY
            - SHRUG
            - SIT_UP
            - SQUAT
            - TOTAL_BODY
            - TRICEPS_EXTENSION
            - WARM_UP
            - RUN
            - BIKE
            - CARDIO_SENSORS
        name:
          type: string
          description: Name of workout step
          nullable: true
    YogaPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    PilatesPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    RunningPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    CyclingPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
            - STEP
            - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    PlannedWorkoutSteps:
      type: object
      properties: {}
      oneOf:
        - $ref: '#/components/schemas/PlannedWorkoutStep'
        - $ref: '#/components/schemas/PlannedWorkoutRepeatStep'
        - $ref: '#/components/schemas/SwimmingPlannedWorkoutStep'
        - $ref: '#/components/schemas/CardioPlannedWorkoutStep'
        - $ref: '#/components/schemas/StrengthPlannedWorkoutStep'
        - $ref: '#/components/schemas/YogaPlannedWorkoutStep'
        - $ref: '#/components/schemas/PilatesPlannedWorkoutStep'
        - $ref: '#/components/schemas/RunningPlannedWorkoutStep'
        - $ref: '#/components/schemas/CyclingPlannedWorkoutStep'
      discriminator:
        propertyName: type
        mapping:
          PlannedWorkoutStep: '#/components/schemas/PlannedWorkoutStep'
          PlannedWorkoutRepeatStep: '#/components/schemas/PlannedWorkoutRepeatStep'
          SwimmingPlannedWorkoutStep: '#/components/schemas/SwimmingPlannedWorkoutStep'
          CardioPlannedWorkoutStep: '#/components/schemas/CardioPlannedWorkoutStep'
          StrengthPlannedWorkoutStep: '#/components/schemas/StrengthPlannedWorkoutStep'
          YogaPlannedWorkoutStep: '#/components/schemas/YogaPlannedWorkoutStep'
          PilatesPlannedWorkoutStep: '#/components/schemas/PilatesPlannedWorkoutStep'
          RunningPlannedWorkoutStep: '#/components/schemas/RunningPlannedWorkoutStep'
          CyclingPlannedWorkoutStep: '#/components/schemas/CyclingPlannedWorkoutStep'
    PlannedWorkoutMetadata:
      type: object
      properties:
        estimated_energy_kj:
          type:
            - number
            - 'null'
          description: Estimated energy expenditure for the workout
        estimated_speed_meters_per_second:
          type:
            - number
            - 'null'
          description: Estimated speed for the workout
        estimated_elevation_gain_meters:
          type:
            - number
            - 'null'
          description: Estimated elevation gain for the workout
        estimated_tss:
          type:
            - number
            - 'null'
          description: Estimated Training Stress Score for the workout
        estimated_calories:
          type:
            - integer
            - 'null'
          description: Estimated calorie burn for the workout
        created_date:
          type:
            - string
            - 'null'
          description: The creation datetime of the associated workout, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
        planned_date:
          type: string
          description: The planned start datetime, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time
          example: '2022-11-24T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        type:
          description: The name - either user-entered or given by the fitness data provider - of the associated workout plan
          nullable: false
          type: string
          enum:
            - IN_VEHICLE
            - BIKING
            - STILL
            - UNKNOWN
            - TILTING
            - WALKING
            - RUNNING
            - AEROBICS
            - BADMINTON
            - BASEBALL
            - BASKETBALL
            - BIATHLON
            - HANDBIKING
            - MOUNTAIN_BIKING
            - ROAD_BIKING
            - SPINNING
            - STATIONARY_BIKING
            - UTILITY_BIKING
            - BOXING
            - CALISTHENICS
            - CIRCUIT_TRAINING
            - CRICKET
            - DANCING
            - ELLIPTICAL
            - FENCING
            - AMERICAN_FOOTBALL
            - AUSTRALIAN_FOOTBALL
            - ENGLISH_FOOTBALL
            - FRISBEE
            - GARDENING
            - GOLF
            - GYMNASTICS
            - HANDBALL
            - HIKING
            - HOCKEY
            - HORSEBACK_RIDING
            - HOUSEWORK
            - JUMPING_ROPE
            - KAYAKING
            - KETTLEBELL_TRAINING
            - KICKBOXING
            - KITESURFING
            - MARTIAL_ARTS
            - MEDITATION
            - MIXED_MARTIAL_ARTS
            - P90X_EXERCISES
            - PARAGLIDING
            - PILATES
            - POLO
            - RACQUETBALL
            - ROCK_CLIMBING
            - ROWING
            - ROWING_MACHINE
            - RUGBY
            - JOGGING
            - RUNNING_ON_SAND
            - TREADMILL_RUNNING
            - SAILING
            - SCUBA_DIVING
            - SKATEBOARDING
            - SKATING
            - CROSS_SKATING
            - INDOOR_ROLLERBLADING
            - SKIING
            - BACK_COUNTRY_SKIING
            - CROSS_COUNTRY_SKIING
            - DOWNHILL_SKIING
            - KITE_SKIING
            - ROLLER_SKIING
            - SLEDDING
            - SNOWBOARDING
            - SNOWMOBILE
            - SNOWSHOEING
            - SQUASH
            - STAIR_CLIMBING
            - STAIR_CLIMBING_MACHINE
            - STAND_UP_PADDLEBOARDING
            - STRENGTH_TRAINING
            - SURFING
            - SWIMMING
            - SWIMMING_SWIMMING_POOL
            - SWIMMING_OPEN_WATER
            - TABLE_TENNIS
            - TEAM_SPORTS
            - TENNIS
            - TREADMILL
            - VOLLEYBALL
            - VOLLEYBALL_BEACH
            - VOLLEYBALL_INDOOR
            - WAKEBOARDING
            - WALKING_FITNESS
            - NORDIC_WALKING
            - WALKING_TREADMILL
            - WATERPOLO
            - WEIGHTLIFTING
            - WHEELCHAIR
            - WINDSURFING
            - YOGA
            - ZUMBA
            - DIVING
            - ERGOMETER
            - ICE_SKATING
            - INDOOR_SKATING
            - CURLING
            - OTHER
            - CROSSFIT
            - HIIT
            - INTERVAL_TRAINING
            - WALKING_STROLLER
            - ELEVATOR
            - ESCALATOR
            - ARCHERY
            - SOFTBALL
            - GUIDED_BREATHING
            - CARDIO_TRAINING
            - LACROSSE
            - STRETCHING
            - TRIATHLON
            - INLINE_SKATING
            - SKY_DIVING
            - PADDLING
            - MOUNTAINEERING
            - FISHING
            - WATER_SKIING
            - INDOOR_RUNNING
        id:
          type:
            - string
            - 'null'
          default: null
        estimated_duration_seconds:
          type:
            - integer
            - 'null'
          description: Estimated workout duration
        estimated_pace_minutes_per_kilometer:
          type:
            - number
            - 'null'
          description: Estimated pace for the workout
        provider:
          type: string
          description: Name of the original source of the workout plan
        estimated_tscore:
          type:
            - number
            - 'null'
          description: ''
        description:
          type:
            - string
            - 'null'
          description: Description of the workout
        name:
          type:
            - string
            - 'null'
          description: Name of the workout plan
        estimated_distance_meters:
          type:
            - integer
            - 'null'
          description: Estimated distance for the workout
        estimated_if:
          type:
            - number
            - 'null'
          description: Estimated Intensity Factor for the workout
        pool_length_meters:
          type:
            - integer
            - 'null'
          description: Pool length of the pool used for the workout - only relevant for swimming activity types
    PlannedWorkout:
      type: object
      properties:
        steps:
          type: array
          description: List of exercises/steps/intervals for the workout plan
          items:
            $ref: '#/components/schemas/PlannedWorkoutSteps'
        metadata:
          description: Metadata for the workout plan
          type: object
          allOf:
            - $ref: '#/components/schemas/PlannedWorkoutMetadata'
    DataProcessingWebhook:
      $ref: '#/components/schemas/ProcessingEvent'
    UserAuthWebhook:
      $ref: '#/components/schemas/AuthSuccessEvent'
    UserAuthWebhookError:
      $ref: '#/components/schemas/AuthErrorEvent'
    PermissionChangeWebhook:
      $ref: '#/components/schemas/PermissionChangeEvent'
    UserReauthWebhook:
      $ref: '#/components/schemas/UserReauthEvent'
    UserDeauthWebhook:
      $ref: '#/components/schemas/DeauthEvent'
    AccessRevokedWebhook:
      $ref: '#/components/schemas/AccessRevokedEvent'
    GoogleNoDataSourceWebhook:
      $ref: '#/components/schemas/GoogleNoDatasourceEvent'
    ConnectionErrorWebhook:
      $ref: '#/components/schemas/ConnectionErrorEvent'
    LargeRequestSendingWebhook:
      $ref: '#/components/schemas/LargeRequestSendingEvent'
    LargeRequestProcessingResponse:
      $ref: '#/components/schemas/LargeRequestProcessingEvent'
    AuthenticationFailedWebhook:
      $ref: '#/components/schemas/AuthErrorEvent'
    HealthCheckWebhook:
      $ref: '#/components/schemas/HealthcheckEvent'
    RateLimitHitWebhook:
      $ref: '#/components/schemas/RateLimitHitEvent'
    S3UploadWebhook:
      $ref: '#/components/schemas/S3PayloadEvent'
    ActivityWebhook:
      $ref: '#/components/schemas/ActivityEvent'
    DailyWebhook:
      $ref: '#/components/schemas/DailyEvent'
    NutritionWebhook:
      $ref: '#/components/schemas/NutritionEvent'
    AthleteWebhook:
      $ref: '#/components/schemas/AthleteEvent'
    SleepWebhook:
      $ref: '#/components/schemas/SleepEvent'
    MenstruationWebhook:
      $ref: '#/components/schemas/MenstruationEvent'
    BodyWebhook:
      $ref: '#/components/schemas/BodyEvent'
    IntegrationsResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the API response
          example: success
        providers:
          type: array
          description: List of integration providers with their details
          items:
            $ref: '#/components/schemas/IntegrationProvider'
    IntegrationProvider:
      type: object
      properties:
        provider:
          type: string
          description: Identifier for the provider
          example: MAPMYFITNESS
        name:
          type: string
          description: Display name of the integration
          example: MapMyFitness
        icon:
          type: string
          description: URL for the provider's icon image
          example: https://api.tryterra.co/v2/static/assets/img/app_icons/mapmyfitness.webp
        setup:
          type: string
          description: Indicates how the integration is set up
          example: API_KEYS_MANAGED
        enabled:
          type: boolean
          description: Whether the integration is enabled
          example: true
        types:
          type: object
          description: Indicates the types of data available through the provider
          properties:
            activity:
              type: boolean
              example: true
            body:
              type: boolean
              example: false
            nutrition:
              type: boolean
              example: false
            daily:
              type: boolean
              example: false
            sleep:
              type: boolean
              example: false
            menstruation:
              type: boolean
              example: false
    WebhookEvents:
      $ref: '#/components/schemas/WebhookEventType'
    TerraUser:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TerraUser.yaml
      type: object
      properties:
        user_id:
          type: string
          examples:
            - 123e4567-e89b-12d3-a456-426614174000
          minLength: 1
          description: Terra identifier for the wearable connection
        provider:
          type: string
          examples:
            - FITBIT
          minLength: 1
          description: Connection data source
        last_webhook_update:
          type: string
          examples:
            - '2022-12-12T10:00:00.000000+00:00'
          description: Last time at which a webhook update was sent for the connection
        scopes:
          type: string
          examples:
            - activity:read,sleep:read
          description: (when available) Permissions granted by the user during authentication - to be used as debugging metadata
        reference_id:
          type: string
          examples:
            - user123@email.com
          description: Connection identifier on the developer's end, used to tie connection back to a user on the developer's platform
        active:
          type: boolean
          examples:
            - true
          description: 'whether the user is active or not (inactive users will not receive any data updates and are in considered '
      required:
        - user_id
        - provider
    ActivityLevel:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ActivityLevel.yaml
      oneOf:
        - type: number
          const: 0
          description: Activity level is unknown or could not be determined.
          title: Unknown
        - type: number
          const: 1
          description: User is at rest, with minimal to no physical activity.
          title: Rest
        - type: number
          const: 2
          description: User is awake but inactive or sedentary.
          title: Inactive
        - type: number
          const: 3
          description: User is engaged in light physical activity such as casual walking.
          title: Low Intensity
        - type: number
          const: 4
          description: User is engaged in moderate physical activity such as brisk walking or light exercise.
          title: Medium Intensity
        - type: number
          const: 5
          description: User is engaged in vigorous physical activity such as running or intense exercise.
          title: High Intensity
      examples:
        - 4
      description: Intensity of the user's activity at an instant in time
    ActivityLevelSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ActivityLevelSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        level:
          $ref: '#/components/schemas/ActivityLevel'
      required:
        - timestamp
        - level
    ActiveDurationsData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ActiveDurationsData.yaml
      type: object
      properties:
        activity_levels_samples:
          type: array
          items:
            $ref: '#/components/schemas/ActivityLevelSample'
        activity_seconds:
          type: integer
        inactivity_seconds:
          type: integer
        low_intensity_seconds:
          type: integer
        moderate_intensity_seconds:
          type: integer
        num_continuous_inactive_periods:
          type: integer
        rest_seconds:
          type: integer
        standing_hours_count:
          type: integer
        standing_seconds:
          type: integer
        vigorous_intensity_seconds:
          type: integer
    CalorieSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/CalorieSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        calories:
          type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - calories
        - timer_duration_seconds
    CaloriesData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/CaloriesData.yaml
      type: object
      properties:
        BMR_calories:
          type: integer
        calorie_samples:
          type: array
          items:
            $ref: '#/components/schemas/CalorieSample'
        net_activity_calories:
          type: integer
        net_intake_calories:
          type: integer
        total_burned_calories:
          type: integer
    DataEnrichment:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DataEnrichment.yaml
      type: object
      properties:
        stress_score:
          type: integer
    DeviceDataType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DeviceDataType.yaml
      oneOf:
        - type: string
          const: STEPS
          description: Count of steps taken by the user.
          title: Steps
        - type: string
          const: ACTIVE_MINUTES
          description: Duration of time the user spent in physical activity.
          title: Active Minutes
        - type: string
          const: BMR
          description: User's basal metabolic rate - calories burned at rest.
          title: Basal Metabolic Rate
        - type: string
          const: CALORIES
          description: Calories burned by the user during activity.
          title: Calories
        - type: string
          const: DISTANCE
          description: Distance traveled by the user during activity.
          title: Distance
        - type: string
          const: HEART_RATE
          description: User's heart rate measurements.
          title: Heart Rate
        - type: string
          const: OXYGEN_SATURATION
          description: Blood oxygen saturation level (SpO2) of the user.
          title: Oxygen Saturation
        - type: string
          const: SLEEP_TYPE
          description: Classification of user's sleep stages or types.
          title: Sleep Classification
        - type: string
          const: SPEED
          description: User's movement speed during activity.
          title: Speed
        - type: string
          const: CADENCE
          description: Rate of movement repetition during activity (steps per minute).
          title: Cadence
      examples:
        - STEPS
      description: Represents data types that a certain device contributed to.
    OtherDeviceData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/OtherDeviceData.yaml
      type: object
      properties:
        activation_timestamp:
          type: string
        data_provided:
          type: array
          items:
            $ref: '#/components/schemas/DeviceDataType'
        hardware_version:
          type: string
        last_upload_date:
          type: string
        manufacturer:
          type: string
        name:
          type: string
        serial_number:
          type: string
        software_version:
          type: string
    DeviceData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DeviceData.yaml
      type: object
      properties:
        activation_timestamp:
          type: string
        data_provided:
          type: array
          items:
            $ref: '#/components/schemas/DeviceDataType'
        hardware_version:
          type: string
        last_upload_date:
          type: string
        manufacturer:
          type: string
        name:
          type: string
        other_devices:
          type: array
          items:
            $ref: '#/components/schemas/OtherDeviceData'
        sensor_state:
          type: string
        serial_number:
          type: string
        software_version:
          type: string
    DistanceSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DistanceSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        distance_meters:
          type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - distance_meters
        - timer_duration_seconds
    ElevationSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ElevationSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        elev_meters:
          type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - elev_meters
        - timer_duration_seconds
    FloorsClimbedSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/FloorsClimbedSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        floors_climbed:
          type: integer
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - floors_climbed
        - timer_duration_seconds
    StepSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/StepSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        steps:
          type: integer
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - steps
        - timer_duration_seconds
    DistanceDataDetailed:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DistanceDataDetailed.yaml
      type: object
      properties:
        distance_samples:
          type: array
          items:
            $ref: '#/components/schemas/DistanceSample'
        elevation_samples:
          type: array
          items:
            $ref: '#/components/schemas/ElevationSample'
        floors_climbed_samples:
          type: array
          items:
            $ref: '#/components/schemas/FloorsClimbedSample'
        step_samples:
          type: array
          items:
            $ref: '#/components/schemas/StepSample'
    ElevationData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ElevationData.yaml
      type: object
      properties:
        avg_meters:
          type: integer
        gain_actual_meters:
          type: integer
        gain_planned_meters:
          type: integer
        loss_actual_meters:
          type: integer
        max_meters:
          type: integer
        min_meters:
          type: integer
    SwimmingData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SwimmingData.yaml
      type: object
      properties:
        num_laps:
          type: integer
        num_strokes:
          type: integer
        pool_length_meters:
          type: integer
    DistanceDataSummary:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DistanceDataSummary.yaml
      type: object
      properties:
        distance_meters:
          type: integer
        elevation:
          $ref: '#/components/schemas/ElevationData'
        floors_climbed:
          type: integer
        steps:
          type: integer
        swimming:
          $ref: '#/components/schemas/SwimmingData'
    DistanceData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DistanceData.yaml
      type: object
      properties:
        detailed:
          $ref: '#/components/schemas/DistanceDataDetailed'
        summary:
          $ref: '#/components/schemas/DistanceDataSummary'
    EnergyData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/EnergyData.yaml
      type: object
      properties:
        energy_kilojoules:
          type: integer
        energy_planned_kilojoules:
          type: integer
    HeartRateContext:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateContext.yaml
      oneOf:
        - type: number
          const: 0
          description: Heart rate measurement context is not specified.
          title: Not Set
        - type: number
          const: 1
          description: Heart rate was measured during physical activity or exercise.
          title: Active
        - type: number
          const: 2
          description: Heart rate was measured during rest or non-active periods.
          title: Not Active
      examples:
        - 1
      description: Represents the context in which heart rate was measured.
    HeartRateDataSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateDataSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        bpm:
          type: number
        timer_duration_seconds:
          type: number
        context:
          $ref: '#/components/schemas/HeartRateContext'
      required:
        - timestamp
        - bpm
        - timer_duration_seconds
        - context
    HeartRateVariabilityDataSampleRMSSD:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateVariabilityDataSampleRMSSD.yaml
      type: object
      properties:
        timestamp:
          type: string
        hrv_rmssd:
          type: number
      required:
        - timestamp
        - hrv_rmssd
    HeartRateVariabilityDataSampleSDNN:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateVariabilityDataSampleSDNN.yaml
      type: object
      properties:
        timestamp:
          type: string
        hrv_sdnn:
          type: number
      required:
        - timestamp
        - hrv_sdnn
    HeartRateDataDetailed:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateDataDetailed.yaml
      type: object
      properties:
        hr_samples:
          type: array
          items:
            $ref: '#/components/schemas/HeartRateDataSample'
        hrv_samples_rmssd:
          type: array
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleRMSSD'
        hrv_samples_sdnn:
          type: array
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleSDNN'
    HeartRateZone:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateZone.yaml
      oneOf:
        - type: number
          const: 0
          description: Resting heart rate zone.
          title: Zone 0
        - type: number
          const: 1
          description: Very light activity zone.
          title: Zone 1
        - type: number
          const: 2
          description: Light activity zone.
          title: Zone 2
        - type: number
          const: 3
          description: Moderate activity zone.
          title: Zone 3
        - type: number
          const: 4
          description: Hard activity zone.
          title: Zone 4
        - type: number
          const: 5
          description: Maximum effort zone.
          title: Zone 5
        - type: number
          const: 6
          description: Heart rate zone that doesn't fit into the standard zones or couldn't be classified.
          title: Other
      examples:
        - 2
      description: Represents the heart rate zone the user is currently in during a workout or activity
    HeartRateZoneData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateZoneData.yaml
      type: object
      properties:
        zone:
          $ref: '#/components/schemas/HeartRateZone'
        start_percentage:
          type: number
        end_percentage:
          type: number
        name:
          type: string
        duration_seconds:
          type: number
      required:
        - zone
        - start_percentage
        - end_percentage
        - name
        - duration_seconds
    HeartRateDataSummary:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateDataSummary.yaml
      type: object
      properties:
        avg_hr_bpm:
          type: integer
        avg_hrv_rmssd:
          type: integer
        avg_hrv_sdnn:
          type: integer
        hr_zone_data:
          type: array
          items:
            $ref: '#/components/schemas/HeartRateZoneData'
        max_hr_bpm:
          type: integer
        min_hr_bpm:
          type: integer
        resting_hr_bpm:
          type: integer
        user_max_hr_bpm:
          type: integer
    HeartRateData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartRateData.yaml
      type: object
      properties:
        detailed:
          $ref: '#/components/schemas/HeartRateDataDetailed'
        summary:
          $ref: '#/components/schemas/HeartRateDataSummary'
    StrokeType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/StrokeType.yaml
      oneOf:
        - type: string
          const: other
          description: Any swimming stroke style that doesn't fit the standard categories.
          title: Other
        - type: string
          const: freestyle
          description: Front crawl stroke where swimmers alternate arm movements with face in water.
          title: Freestyle
        - type: string
          const: backstroke
          description: Swimming stroke performed on the back with alternating arm movements.
          title: Backstroke
        - type: string
          const: breaststroke
          description: Swimming stroke where arms move simultaneously in a heart-shaped pattern with a frog kick.
          title: Breaststroke
        - type: string
          const: butterfly
          description: Swimming stroke with simultaneous overhead arm movements and dolphin kick.
          title: Butterfly
      examples:
        - backstroke
      description: Stroke type used for the workout step (e.g. breaststroke)
    LapSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/LapSample.yaml
      type: object
      properties:
        start_time:
          type: string
        end_time:
          type: string
        distance_meters:
          type: number
        calories:
          type: number
        total_strokes:
          type: integer
        stroke_type:
          $ref: '#/components/schemas/StrokeType'
        avg_speed_meters_per_second:
          type: number
      required:
        - start_time
        - end_time
        - distance_meters
        - calories
        - total_strokes
        - stroke_type
        - avg_speed_meters_per_second
    LapData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/LapData.yaml
      type: object
      properties:
        laps:
          type: array
          items:
            $ref: '#/components/schemas/LapSample'
    METSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/METSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        level:
          type: number
      required:
        - timestamp
        - level
    METData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/METData.yaml
      type: object
      properties:
        MET_samples:
          type: array
          items:
            $ref: '#/components/schemas/METSample'
        avg_level:
          type: integer
        num_high_intensity_minutes:
          type: integer
        num_inactive_minutes:
          type: integer
        num_low_intensity_minutes:
          type: integer
        num_moderate_intensity_minutes:
          type: integer
    ActivityType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ActivityType.yaml
      oneOf:
        - type: number
          const: 0
          description: Activity type for when the user is in a vehicle, such as a car or bus.
          title: In Vehicle
        - type: number
          const: 1
          description: Activity type for general biking or cycling.
          title: Biking
        - type: number
          const: 3
          description: Activity type for when the user is still or not moving.
          title: Still
        - type: number
          const: 4
          description: Activity type is unknown or could not be determined.
          title: Unknown
        - type: number
          const: 5
          description: Activity type for when the device detects a tilting motion.
          title: Tilting
        - type: number
          const: 7
          description: Activity type for general walking.
          title: Walking
        - type: number
          const: 8
          description: Activity type for general running.
          title: Running
        - type: number
          const: 9
          description: Activity type for aerobic exercises and workouts.
          title: Aerobics
        - type: number
          const: 10
          description: Activity type for playing badminton.
          title: Badminton
        - type: number
          const: 11
          description: Activity type for playing baseball.
          title: Baseball
        - type: number
          const: 12
          description: Activity type for playing basketball.
          title: Basketball
        - type: number
          const: 13
          description: Activity type for biathlon, combining cross-country skiing and rifle shooting.
          title: Biathlon
        - type: number
          const: 14
          description: Activity type for hand biking, using a hand-powered bicycle.
          title: Hand Biking
        - type: number
          const: 15
          description: Activity type for off-road cycling on rough terrain.
          title: Mountain Biking
        - type: number
          const: 16
          description: Activity type for cycling on paved roads.
          title: Road Biking
        - type: number
          const: 17
          description: Activity type for indoor cycling classes or spinning.
          title: Spinning
        - type: number
          const: 18
          description: Activity type for exercising on a stationary bicycle.
          title: Stationary Biking
        - type: number
          const: 19
          description: Activity type for cycling for transportation or utility purposes.
          title: Utility Biking
        - type: number
          const: 20
          description: Activity type for boxing training or matches.
          title: Boxing
        - type: number
          const: 21
          description: Activity type for bodyweight exercises focusing on rhythm and flow.
          title: Calisthenics
        - type: number
          const: 22
          description: Activity type for workout consisting of a series of exercises performed in rotation.
          title: Circuit Training
        - type: number
          const: 23
          description: Activity type for playing cricket.
          title: Cricket
        - type: number
          const: 24
          description: Activity type for various forms of dance.
          title: Dancing
        - type: number
          const: 25
          description: Activity type for exercising on an elliptical trainer.
          title: Elliptical
        - type: number
          const: 26
          description: Activity type for fencing sport.
          title: Fencing
        - type: number
          const: 27
          description: Activity type for playing American football.
          title: American Football
        - type: number
          const: 28
          description: Activity type for playing Australian rules football.
          title: Australian Football
        - type: number
          const: 29
          description: Activity type for playing soccer/football.
          title: English Football
        - type: number
          const: 30
          description: Activity type for playing frisbee or disc sports.
          title: Frisbee
        - type: number
          const: 31
          description: Activity type for gardening and yard work.
          title: Gardening
        - type: number
          const: 32
          description: Activity type for playing golf.
          title: Golf
        - type: number
          const: 33
          description: Activity type for performing gymnastics.
          title: Gymnastics
        - type: number
          const: 34
          description: Activity type for playing handball.
          title: Handball
        - type: number
          const: 35
          description: Activity type for hiking or walking on trails.
          title: Hiking
        - type: number
          const: 36
          description: Activity type for playing hockey.
          title: Hockey
        - type: number
          const: 37
          description: Activity type for horseback riding.
          title: Horseback Riding
        - type: number
          const: 38
          description: Activity type for household chores and cleaning.
          title: Housework
        - type: number
          const: 39
          description: Activity type for skipping or jumping rope.
          title: Jumping Rope
        - type: number
          const: 40
          description: Activity type for kayaking on water.
          title: Kayaking
        - type: number
          const: 41
          description: Activity type for exercises using kettlebells.
          title: Kettlebell Training
        - type: number
          const: 42
          description: Activity type for kickboxing training or matches.
          title: Kickboxing
        - type: number
          const: 43
          description: Activity type for kitesurfing or kiteboarding.
          title: Kitesurfing
        - type: number
          const: 44
          description: Activity type for general martial arts training.
          title: Martial Arts
        - type: number
          const: 45
          description: Activity type for meditation practice.
          title: Meditation
        - type: number
          const: 46
          description: Activity type for MMA training or fighting.
          title: Mixed Martial Arts
        - type: number
          const: 47
          description: Activity type for P90X home fitness program.
          title: P90X Exercises
        - type: number
          const: 48
          description: Activity type for paragliding sport.
          title: Paragliding
        - type: number
          const: 49
          description: Activity type for pilates exercises.
          title: Pilates
        - type: number
          const: 50
          description: Activity type for playing polo.
          title: Polo
        - type: number
          const: 51
          description: Activity type for playing racquetball.
          title: Racquetball
        - type: number
          const: 52
          description: Activity type for rock climbing.
          title: Rock Climbing
        - type: number
          const: 53
          description: Activity type for rowing on water.
          title: Rowing
        - type: number
          const: 54
          description: Activity type for exercising on a rowing machine.
          title: Rowing Machine
        - type: number
          const: 55
          description: Activity type for playing rugby.
          title: Rugby
        - type: number
          const: 56
          description: Activity type for jogging at a leisurely pace.
          title: Jogging
        - type: number
          const: 57
          description: Activity type for running on beach or sandy surface.
          title: Running on Sand
        - type: number
          const: 58
          description: Activity type for running on a treadmill.
          title: Treadmill Running
        - type: number
          const: 59
          description: Activity type for sailing on water.
          title: Sailing
        - type: number
          const: 60
          description: Activity type for scuba diving underwater.
          title: Scuba Diving
        - type: number
          const: 61
          description: Activity type for skateboarding.
          title: Skateboarding
        - type: number
          const: 62
          description: Activity type for general skating.
          title: Skating
        - type: number
          const: 63
          description: Activity type for cross skating or nordic skating.
          title: Cross Skating
        - type: number
          const: 64
          description: Activity type for rollerblading indoors.
          title: Indoor Rollerblading
        - type: number
          const: 65
          description: Activity type for general skiing.
          title: Skiing
        - type: number
          const: 66
          description: Activity type for backcountry or off-piste skiing.
          title: Back Country Skiing
        - type: number
          const: 67
          description: Activity type for cross-country skiing.
          title: Cross Country Skiing
        - type: number
          const: 68
          description: Activity type for alpine or downhill skiing.
          title: Downhill Skiing
        - type: number
          const: 69
          description: Activity type for skiing with a kite for propulsion.
          title: Kite Skiing
        - type: number
          const: 70
          description: Activity type for roller skiing on wheels.
          title: Roller Skiing
        - type: number
          const: 71
          description: Activity type for sledding or tobogganing.
          title: Sledding
        - type: number
          const: 73
          description: Activity type for snowboarding.
          title: Snowboarding
        - type: number
          const: 74
          description: Activity type for riding a snowmobile.
          title: Snowmobile
        - type: number
          const: 75
          description: Activity type for walking with snowshoes.
          title: Snowshoeing
        - type: number
          const: 76
          description: Activity type for playing squash.
          title: Squash
        - type: number
          const: 77
          description: Activity type for climbing stairs.
          title: Stair Climbing
        - type: number
          const: 78
          description: Activity type for exercising on a stair climbing machine.
          title: Stair Climbing Machine
        - type: number
          const: 79
          description: Activity type for stand-up paddleboarding.
          title: Stand Up Paddleboarding
        - type: number
          const: 80
          description: Activity type for resistance training or weight lifting.
          title: Strength Training
        - type: number
          const: 81
          description: Activity type for surfing on waves.
          title: Surfing
        - type: number
          const: 82
          description: Activity type for general swimming.
          title: Swimming
        - type: number
          const: 83
          description: Activity type for swimming in a swimming pool.
          title: Swimming in Pool
        - type: number
          const: 84
          description: Activity type for swimming in open water like oceans, lakes or rivers.
          title: Open Water Swimming
        - type: number
          const: 85
          description: Activity type for playing table tennis or ping pong.
          title: Table Tennis
        - type: number
          const: 86
          description: Activity type for general team sports not otherwise classified.
          title: Team Sports
        - type: number
          const: 87
          description: Activity type for playing tennis.
          title: Tennis
        - type: number
          const: 88
          description: Activity type for exercising on a treadmill.
          title: Treadmill
        - type: number
          const: 89
          description: Activity type for general volleyball.
          title: Volleyball
        - type: number
          const: 90
          description: Activity type for playing volleyball on a beach.
          title: Beach Volleyball
        - type: number
          const: 91
          description: Activity type for playing volleyball indoors.
          title: Indoor Volleyball
        - type: number
          const: 92
          description: Activity type for wakeboarding on water.
          title: Wakeboarding
        - type: number
          const: 93
          description: Activity type for walking specifically for exercise.
          title: Walking for Fitness
        - type: number
          const: 94
          description: Activity type for walking with poles.
          title: Nordic Walking
        - type: number
          const: 95
          description: Activity type for walking on a treadmill.
          title: Treadmill Walking
        - type: number
          const: 96
          description: Activity type for playing water polo.
          title: Water Polo
        - type: number
          const: 97
          description: Activity type for weightlifting exercises.
          title: Weightlifting
        - type: number
          const: 98
          description: Activity type for wheelchair-based movement.
          title: Wheelchair
        - type: number
          const: 99
          description: Activity type for windsurfing on water.
          title: Windsurfing
        - type: number
          const: 100
          description: Activity type for practicing yoga.
          title: Yoga
        - type: number
          const: 101
          description: Activity type for Zumba dance fitness.
          title: Zumba
        - type: number
          const: 102
          description: Activity type for diving or jumping into water.
          title: Diving
        - type: number
          const: 103
          description: Activity type for exercising on an ergometer.
          title: Ergometer
        - type: number
          const: 104
          description: Activity type for skating on ice.
          title: Ice Skating
        - type: number
          const: 105
          description: Activity type for skating indoors.
          title: Indoor Skating
        - type: number
          const: 106
          description: Activity type for playing curling on ice.
          title: Curling
        - type: number
          const: 108
          description: Activity type for activities that don't fit into other categories.
          title: Other
        - type: number
          const: 113
          description: Activity type for CrossFit training.
          title: CrossFit
        - type: number
          const: 114
          description: Activity type for high-intensity interval training.
          title: HIIT
        - type: number
          const: 115
          description: Activity type for general interval training workouts.
          title: Interval Training
        - type: number
          const: 116
          description: Activity type for walking while pushing a stroller.
          title: Walking with Stroller
        - type: number
          const: 117
          description: Activity type for riding in an elevator.
          title: Elevator
        - type: number
          const: 118
          description: Activity type for riding on an escalator.
          title: Escalator
        - type: number
          const: 119
          description: Activity type for practicing archery.
          title: Archery
        - type: number
          const: 120
          description: Activity type for playing softball.
          title: Softball
        - type: number
          const: 122
          description: Activity type for practicing guided breathing exercises.
          title: Guided Breathing
        - type: number
          const: 123
          description: Activity type for general cardiovascular exercise.
          title: Cardio Training
        - type: number
          const: 124
          description: Activity type for playing lacrosse.
          title: Lacrosse
        - type: number
          const: 125
          description: Activity type for stretching exercises.
          title: Stretching
        - type: number
          const: 126
          description: Activity type for triathlon events combining swimming, cycling and running.
          title: Triathlon
        - type: number
          const: 127
          description: Activity type for inline skating or rollerblading.
          title: Inline Skating
        - type: number
          const: 128
          description: Activity type for sky diving or parachuting.
          title: Sky Diving
        - type: number
          const: 129
          description: Activity type for general paddling activities.
          title: Paddling
        - type: number
          const: 130
          description: Activity type for mountaineering or alpine climbing.
          title: Mountaineering
        - type: number
          const: 131
          description: Activity type for fishing activities.
          title: Fishing
        - type: number
          const: 132
          description: Activity type for water skiing.
          title: Water Skiing
        - type: number
          const: 133
          description: Activity type for running indoors.
          title: Indoor Running
        - type: number
          const: 134
          description: Activity type for playing padel tennis.
          title: Padel Tennis
        - type: number
          const: 135
          description: Activity type for driving a vehicle.
          title: Driving
        - type: number
          const: 136
          description: Activity type for driving off-road or on unpaved surfaces.
          title: Off-Road Driving
        - type: number
          const: 137
          description: Activity type for riding a motorcycle.
          title: Motorbiking
        - type: number
          const: 138
          description: Activity type for motorsport racing.
          title: Motor Racing
        - type: number
          const: 139
          description: Activity type for enduro motorcycle racing.
          title: Enduro
        - type: number
          const: 140
          description: Activity type for canoeing on water.
          title: Canoeing
        - type: number
          const: 141
          description: Activity type for orienteering navigation sport.
          title: Orienteering
        - type: number
          const: 142
          description: Activity type for hang gliding.
          title: Hang Gliding
        - type: number
          const: 143
          description: Activity type for piloting an aircraft.
          title: Flying
        - type: number
          const: 144
          description: Activity type for hot air balloon flying.
          title: Hot Air Ballooning
        - type: number
          const: 145
          description: Activity type for riding a jet ski on water.
          title: Jet Skiing
        - type: number
          const: 146
          description: Activity type for operating a motorized boat.
          title: Power Boating
        - type: number
          const: 147
          description: Activity type for playing Gaelic football.
          title: Gaelic Football
        - type: number
          const: 148
          description: Activity type for playing hurling.
          title: Hurling
      examples:
        - 8
      description: The type of activity performed for the associated workout.
    UploadType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/UploadType.yaml
      oneOf:
        - type: number
          const: 0
          description: The upload type is unknown or could not be determined.
          title: Unknown
        - type: number
          const: 1
          description: The workout was automatically detected and recorded by a device or service.
          title: Automatic
        - type: number
          const: 2
          description: The workout was manually entered by the user.
          title: Manual
        - type: number
          const: 3
          description: The workout data represents an update to a previously recorded workout.
          title: Update
        - type: number
          const: 4
          description: The workout was marked for deletion.
          title: Delete
        - type: number
          const: 5
          description: The workout upload is pending processing or confirmation.
          title: Pending
        - type: number
          const: 6
          description: The workout was uploaded or synced from a third-party service or application.
          title: Third party upload
      description: The type of upload for the associated workout, providing information on how the workout data was recorded or entered
    ActivityMetadata:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ActivityMetadata.yaml
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        end_time:
          type: string
        name:
          type: string
        start_time:
          type: string
        state:
          type: string
        summary_id:
          type: string
        timestamp_localization:
          type: integer
        type:
          $ref: '#/components/schemas/ActivityType'
        upload_type:
          $ref: '#/components/schemas/UploadType'
      required:
        - end_time
        - start_time
        - summary_id
        - type
        - upload_type
    CadenceSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/CadenceSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        cadence_rpm:
          type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - cadence_rpm
        - timer_duration_seconds
    SpeedSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SpeedSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        speed_meters_per_second:
          type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - speed_meters_per_second
        - timer_duration_seconds
    TorqueSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TorqueSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        timer_duration_seconds:
          type: number
        torque_newton_meters:
          type: number
      required:
        - timestamp
        - timer_duration_seconds
        - torque_newton_meters
    MovementData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MovementData.yaml
      type: object
      properties:
        adjusted_max_speed_meters_per_second:
          type: number
        avg_cadence_rpm:
          type: number
        avg_pace_minutes_per_kilometer:
          type: number
        avg_speed_meters_per_second:
          type: number
        avg_torque_newton_meters:
          type: number
        avg_velocity_meters_per_second:
          type: number
        cadence_samples:
          type: array
          items:
            $ref: '#/components/schemas/CadenceSample'
        max_cadence_rpm:
          type: number
        max_pace_minutes_per_kilometer:
          type: number
        max_speed_meters_per_second:
          type: number
        max_torque_newton_meters:
          type: number
        max_velocity_meters_per_second:
          type: number
        normalized_speed_meters_per_second:
          type: number
        speed_samples:
          type: array
          items:
            $ref: '#/components/schemas/SpeedSample'
        torque_samples:
          type: array
          items:
            $ref: '#/components/schemas/TorqueSample'
    OxygenSaturationSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/OxygenSaturationSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        percentage:
          type: number
      required:
        - timestamp
        - percentage
    Vo2MaxSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Vo2MaxSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        vo2max_ml_per_min_per_kg:
          type: number
      required:
        - timestamp
        - vo2max_ml_per_min_per_kg
    OxygenData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/OxygenData.yaml
      type: object
      properties:
        avg_saturation_percentage:
          type: number
        saturation_samples:
          type: array
          items:
            $ref: '#/components/schemas/OxygenSaturationSample'
        vo2_samples:
          type: array
          items:
            $ref: '#/components/schemas/Vo2MaxSample'
        vo2max_ml_per_min_per_kg:
          type: number
    PolylineMapData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PolylineMapData.yaml
      type: object
      properties:
        summary_polyline:
          type: string
    PositionSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PositionSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        coords_lat_lng_deg:
          type: array
          items:
            type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - coords_lat_lng_deg
        - timer_duration_seconds
    PositionData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PositionData.yaml
      type: object
      properties:
        center_pos_lat_lng_deg:
          type: array
          items:
            type: number
        end_pos_lat_lng_deg:
          type: array
          items:
            type: number
        position_samples:
          type: array
          items:
            $ref: '#/components/schemas/PositionSample'
        start_pos_lat_lng_deg:
          type: array
          items:
            type: number
    PowerSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PowerSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        watts:
          type: number
        timer_duration_seconds:
          type: number
      required:
        - timestamp
        - watts
        - timer_duration_seconds
    PowerData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PowerData.yaml
      type: object
      properties:
        avg_watts:
          type: number
        max_watts:
          type: number
        power_samples:
          type: array
          items:
            $ref: '#/components/schemas/PowerSample'
    StrainData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/StrainData.yaml
      type: object
      properties:
        strain_level:
          type: number
    TSSSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TSSSample.yaml
      type: object
      properties:
        planned:
          type: number
        actual:
          type: number
        method:
          type: string
        intensity_factor_planned:
          type: number
        intensity_factor_actual:
          type: number
        normalized_power_watts:
          type: number
      required:
        - planned
        - actual
        - method
        - intensity_factor_planned
        - intensity_factor_actual
        - normalized_power_watts
    TSSData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TSSData.yaml
      type: object
      properties:
        TSS_samples:
          type: array
          items:
            $ref: '#/components/schemas/TSSSample'
    WorkData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/WorkData.yaml
      type: object
      properties:
        work_kilojoules:
          type: number
    WebhookEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/WebhookEvent.yaml
      type: object
      properties:
        type:
          type: string
          description: The type of event
        status:
          type: string
          description: Status of the event
      required:
        - type
      description: Base webhook event structure that all events extend from
    LargeRequestProcessingEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/LargeRequestProcessingEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: large_request_processing
        status:
          type: string
          const: processing
          description: Status of the processing
        message:
          type: string
          description: Information about the processing
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being processed
        reference:
          type: string
          description: Reference ID for tracking this request
      required:
        - type
        - status
        - message
        - user
        - reference
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Large request processing event
    BloodPressureSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BloodPressureSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        diastolic_bp:
          type: number
        systolic_bp:
          type: number
      required:
        - timestamp
        - diastolic_bp
        - systolic_bp
    BloodPressureData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BloodPressureData.yaml
      type: object
      properties:
        blood_pressure_samples:
          type: array
          items:
            $ref: '#/components/schemas/BloodPressureSample'
    AFibFlag:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AFibFlag.yaml
      oneOf:
        - type: number
          const: 0
          description: AFib was not detected in the heart rhythm analysis.
          title: Negative
        - type: number
          const: 1
          description: AFib was detected in the heart rhythm analysis.
          title: Positive
        - type: number
          const: 2
          description: The heart rhythm analysis couldn't determine whether AFib was present or absent.
          title: Inconclusive
      examples:
        - 1
      description: Flag indicating the atrial fibrillation classification of the individual
    AFibClassificationSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AFibClassificationSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        afib_classification:
          $ref: '#/components/schemas/AFibFlag'
      required:
        - timestamp
        - afib_classification
    RawECGSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/RawECGSample.yaml
      type: object
      properties:
        potential_uV:
          type: number
        timestamp:
          type: string
      required:
        - potential_uV
        - timestamp
    ECGReading:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ECGReading.yaml
      type: object
      properties:
        start_timestamp:
          type: string
        avg_hr_bpm:
          type: number
        afib_classification:
          $ref: '#/components/schemas/AFibFlag'
        raw_signal:
          type: array
          items:
            $ref: '#/components/schemas/RawECGSample'
      required:
        - start_timestamp
        - avg_hr_bpm
        - afib_classification
        - raw_signal
    PulseVelocitySample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PulseVelocitySample.yaml
      type: object
      properties:
        timestamp:
          type: string
        pulse_wave_velocity_meters_per_second:
          type: number
      required:
        - timestamp
        - pulse_wave_velocity_meters_per_second
    RRInterval:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/RRInterval.yaml
      type: object
      properties:
        timestamp:
          type: string
        rr_interval_ms:
          type: number
        hr_bpm:
          type: number
      required:
        - timestamp
        - rr_interval_ms
        - hr_bpm
    HeartData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HeartData.yaml
      type: object
      properties:
        afib_classification_samples:
          type: array
          items:
            $ref: '#/components/schemas/AFibClassificationSample'
        ecg_signal:
          type: array
          items:
            $ref: '#/components/schemas/ECGReading'
        heart_rate_data:
          $ref: '#/components/schemas/HeartRateData'
        pulse_wave_velocity_samples:
          type: array
          items:
            $ref: '#/components/schemas/PulseVelocitySample'
        rr_interval_samples:
          type: array
          items:
            $ref: '#/components/schemas/RRInterval'
    HydrationLevelSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HydrationLevelSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        hydration_level:
          type: number
      required:
        - timestamp
        - hydration_level
    HydrationMeasurementSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HydrationMeasurementSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        hydration_kg:
          type: number
      required:
        - timestamp
        - hydration_kg
    HydrationData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HydrationData.yaml
      type: object
      properties:
        day_total_water_consumption_ml:
          type: integer
        hydration_amount_samples:
          type: array
          items:
            $ref: '#/components/schemas/HydrationLevelSample'
        hydration_level_samples:
          type: array
          items:
            $ref: '#/components/schemas/HydrationMeasurementSample'
    KetoneSampleType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/KetoneSampleType.yaml
      oneOf:
        - type: number
          const: 0
          description: The type of ketone sample is unknown or not specified.
          title: Unknown
        - type: number
          const: 1
          description: Ketone sample taken from blood.
          title: Blood
        - type: number
          const: 2
          description: Ketone sample taken from urine.
          title: Urine
        - type: number
          const: 3
          description: Ketone sample taken from breath.
          title: Breath
      examples:
        - 1
      description: Flag indicating the ketone sample type (e.g. blood, breath, urine)
    KetoneSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/KetoneSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        ketone_mg_per_dL:
          type: number
        sample_type:
          $ref: '#/components/schemas/KetoneSampleType'
      required:
        - timestamp
        - ketone_mg_per_dL
        - sample_type
    KetoneData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/KetoneData.yaml
      type: object
      properties:
        ketone_samples:
          type: array
          items:
            $ref: '#/components/schemas/KetoneSample'
    MeasurementDataSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MeasurementDataSample.yaml
      type: object
      properties:
        measurement_time:
          type: string
        BMI:
          type: number
        BMR:
          type: number
        RMR:
          type: number
        estimated_fitness_age:
          type: number
        skin_fold_mm:
          type: number
        bodyfat_percentage:
          type: number
        weight_kg:
          type: number
        height_cm:
          type: number
        bone_mass_g:
          type: number
        muscle_mass_g:
          type: number
        lean_mass_g:
          type: number
        water_percentage:
          type: number
        insulin_units:
          type: number
        insulin_type:
          type: string
        urine_color:
          type: string
        user_notes:
          type: string
      required:
        - measurement_time
        - BMI
        - BMR
        - RMR
        - estimated_fitness_age
        - skin_fold_mm
        - bodyfat_percentage
        - weight_kg
        - height_cm
        - bone_mass_g
        - muscle_mass_g
        - lean_mass_g
        - water_percentage
        - insulin_units
        - insulin_type
        - urine_color
        - user_notes
    MeasurementsData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MeasurementsData.yaml
      type: object
      properties:
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/MeasurementDataSample'
    BodyMetadata:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BodyMetadata.yaml
      type: object
      properties:
        end_time:
          type: string
        start_time:
          type: string
      required:
        - end_time
        - start_time
    TemperatureSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TemperatureSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        temperature_celsius:
          type: number
      required:
        - timestamp
        - temperature_celsius
    DailyPatternSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DailyPatternSample.yaml
      type: object
      properties:
        time_from_midnight:
          type: integer
        percentile_5:
          type: integer
        percentile_25:
          type: integer
        percentile_50:
          type: integer
        percentile_75:
          type: integer
        percentile_95:
          type: integer
      required:
        - time_from_midnight
        - percentile_5
        - percentile_25
        - percentile_50
        - percentile_75
        - percentile_95
    GlucoseDataSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/GlucoseDataSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        blood_glucose_mg_per_dL:
          type: number
        glucose_level_flag:
          type: integer
        trend_arrow:
          type: integer
      required:
        - timestamp
        - blood_glucose_mg_per_dL
        - glucose_level_flag
        - trend_arrow
    TemperatureData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TemperatureData.yaml
      type: object
      properties:
        ambient_temperature_samples:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureSample'
        body_temperature_samples:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureSample'
        skin_temperature_samples:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureSample'
        day_avg_blood_glucose_mg_per_dL:
          type: integer
        daily_patterns:
          type: array
          items:
            $ref: '#/components/schemas/DailyPatternSample'
        detailed_blood_glucose_samples:
          type: array
          items:
            $ref: '#/components/schemas/GlucoseDataSample'
        gmi:
          type: number
        sensor_usage:
          type: integer
        time_in_range:
          type: integer
    DataContributor:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DataContributor.yaml
      type: object
      properties:
        contributor_name:
          type: string
        contributor_score:
          type: number
      required:
        - contributor_name
        - contributor_score
    DailyDataEnrichment:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DailyDataEnrichment.yaml
      type: object
      properties:
        cardiovascular_contributors:
          type: array
          items:
            $ref: '#/components/schemas/DataContributor'
        cardiovascular_score:
          type: number
        immune_contributors:
          type: array
          items:
            $ref: '#/components/schemas/DataContributor'
        immune_index:
          type: number
        readiness_contributors:
          type: array
          items:
            $ref: '#/components/schemas/DataContributor'
        readiness_score:
          type: number
        respiratory_contributors:
          type: array
          items:
            $ref: '#/components/schemas/DataContributor'
        respiratory_score:
          type: number
        start_time:
          type: string
        stress_contributors:
          type: array
          items:
            $ref: '#/components/schemas/DataContributor'
        total_stress_score:
          type: number
    DailyDistanceData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DailyDistanceData.yaml
      type: object
      properties:
        detailed:
          $ref: '#/components/schemas/DistanceDataDetailed'
        distance_meters:
          type: integer
        elevation:
          $ref: '#/components/schemas/ElevationData'
        floors_climbed:
          type: integer
        steps:
          type: integer
        swimming:
          $ref: '#/components/schemas/SwimmingData'
    DailyMetadata:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DailyMetadata.yaml
      type: object
      properties:
        end_time:
          type: string
        start_time:
          type: string
        timestamp_localization:
          type: integer
        upload_type:
          $ref: '#/components/schemas/UploadType'
      required:
        - end_time
        - start_time
        - upload_type
    ScoreData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ScoreData.yaml
      type: object
      properties:
        activity:
          type: number
        recovery:
          type: number
        sleep:
          type: number
    BodyBatterySample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BodyBatterySample.yaml
      type: object
      properties:
        timestamp:
          type: string
        level:
          type: number
      required:
        - timestamp
        - level
    StressSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/StressSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        level:
          type: number
      required:
        - timestamp
        - level
    StressData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/StressData.yaml
      type: object
      properties:
        activity_stress_duration_seconds:
          type: number
        avg_stress_level:
          type: number
        body_battery_samples:
          type: array
          items:
            $ref: '#/components/schemas/BodyBatterySample'
        high_stress_duration_seconds:
          type: number
        low_stress_duration_seconds:
          type: number
        max_stress_level:
          type: number
        medium_stress_duration_seconds:
          type: number
        rest_stress_duration_seconds:
          type: number
        samples:
          type: array
          items:
            $ref: '#/components/schemas/StressSample'
        stress_duration_seconds:
          type: number
        stress_rating:
          type: number
    TagEntry:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TagEntry.yaml
      type: object
      properties:
        timestamp:
          type: string
        tag_name:
          type: string
        notes:
          type: string
      required:
        - timestamp
        - tag_name
        - notes
    TagData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/TagData.yaml
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagEntry'
    MenstruationMetadata:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MenstruationMetadata.yaml
      type: object
      properties:
        end_time:
          type: string
        start_time:
          type: string
      required:
        - end_time
        - start_time
    MenstrualPhase:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MenstrualPhase.yaml
      oneOf:
        - type: string
          const: menstrual
          description: The menstrual phase when bleeding occurs.
          title: Menstrual
        - type: string
          const: follicular
          description: The follicular phase when follicles in ovaries develop.
          title: Follicular
        - type: string
          const: ovulation
          description: The ovulation phase when an egg is released.
          title: Ovulation
        - type: string
          const: luteal
          description: The luteal phase following ovulation.
          title: Luteal
        - type: string
          const: pms
          description: Premenstrual syndrome phase before menstruation begins.
          title: PMS
        - type: string
          const: fertile
          description: The fertile window when conception is most likely.
          title: Fertile
        - type: string
          const: first_trimester
          description: First third of pregnancy, weeks 1-12.
          title: First Trimester
        - type: string
          const: second_trimester
          description: Middle third of pregnancy, weeks 13-26.
          title: Second Trimester
        - type: string
          const: third_trimester
          description: Final third of pregnancy, weeks 27-40.
          title: Third Trimester
        - type: string
          const: unknown
          description: Menstrual cycle phase could not be determined.
          title: Unknown
      examples:
        - menstrual
      description: Represents menstrual cycle phases.
    MenstruationFlow:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MenstruationFlow.yaml
      oneOf:
        - type: number
          const: 0
          description: Flow status is unknown or not recorded.
          title: Unknown
        - type: number
          const: 1
          description: No menstrual flow present.
          title: None
        - type: number
          const: 2
          description: Light menstrual flow.
          title: Light
        - type: number
          const: 3
          description: Moderate menstrual flow.
          title: Medium
        - type: number
          const: 4
          description: Heavy menstrual flow.
          title: Heavy
        - type: number
          const: 5
          description: Menstrual flow occurred but intensity not specified.
          title: Had
      examples:
        - 4
      description: Flag indicating the strength of the user's menstrual flow
    MenstruationFlowSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MenstruationFlowSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        flow:
          $ref: '#/components/schemas/MenstruationFlow'
      required:
        - timestamp
        - flow
    MenstruationData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MenstruationData.yaml
      type: object
      properties:
        period_length_days:
          type: number
        current_phase:
          $ref: '#/components/schemas/MenstrualPhase'
        length_of_current_phase_days:
          type: number
        days_until_next_phase:
          type: number
        period_start_date:
          type: string
        predicted_cycle_length_days:
          type: number
        day_in_cycle:
          type: number
        last_updated_time:
          type: string
        cycle_length_days:
          type: number
        is_predicted_cycle:
          type: string
        menstruation_flow:
          type: array
          items:
            $ref: '#/components/schemas/MenstruationFlowSample'
    DrinkSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DrinkSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        drink_volume:
          type: number
        drink_unit:
          type: string
        drink_name:
          type: string
      required:
        - timestamp
        - drink_volume
        - drink_unit
        - drink_name
    NutritionUnits:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionUnits.yaml
      oneOf:
        - type: number
          const: 0
          description: The unit of measurement is unknown or not specified.
          title: Unknown
        - type: number
          const: 1
          description: Measurement in grams, a metric unit of mass.
          title: Gram
        - type: number
          const: 2
          description: Measurement in teaspoons, approximately 5 milliliters.
          title: Teaspoon
        - type: number
          const: 3
          description: Measurement in tablespoons, approximately 15 milliliters.
          title: Tablespoon
        - type: number
          const: 4
          description: Measurement in cups, approximately 240 milliliters.
          title: Cup
        - type: number
          const: 5
          description: Quantity measured in medium-sized eggs.
          title: Medium Egg
        - type: number
          const: 6
          description: Quantity measured in large-sized eggs.
          title: Large Egg
        - type: number
          const: 7
          description: Quantity measured in small-sized eggs.
          title: Small Egg
        - type: number
          const: 8
          description: Measurement in milliliters, a metric unit of volume.
          title: Milliliter
        - type: number
          const: 9
          description: Measurement in ounces, approximately 28 grams.
          title: Ounce
        - type: number
          const: 10
          description: Quantity measured by individual count or number of items.
          title: Count
        - type: number
          const: 11
          description: Quantity measured in scoops, typically used for protein powder or supplements.
          title: Scoop
        - type: number
          const: 12
          description: Measurement in fluid ounces, approximately 30 milliliters.
          title: Fluid Ounce
      examples:
        - 4
      description: Represents units used for nutrition measurements
    NutritionQuantity:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionQuantity.yaml
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/NutritionUnits'
        amount:
          type: number
      required:
        - unit
        - amount
    NutritionMacros:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionMacros.yaml
      type: object
      properties:
        calories:
          type: number
        protein_g:
          type: number
        carbohydrates_g:
          type: number
        fat_g:
          type: number
        sugar_g:
          type: number
        cholesterol_mg:
          type: number
        fiber_g:
          type: number
        sodium_mg:
          type: number
        alcohol_g:
          type: number
      required:
        - calories
        - protein_g
        - carbohydrates_g
        - fat_g
        - sugar_g
        - cholesterol_mg
        - fiber_g
        - sodium_mg
        - alcohol_g
    NutritionMicros:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionMicros.yaml
      type: object
      properties:
        selenium_mg:
          type: number
        niacin_mg:
          type: number
        magnesium_mg:
          type: number
        copper_mg:
          type: number
        vitamin_B12_mg:
          type: number
        vitamin_B6_mg:
          type: number
        vitamin_C_mg:
          type: number
        zinc_mg:
          type: number
        vitamin_E_mg:
          type: number
        manganese_mg:
          type: number
        vitamin_D_mg:
          type: number
        iodine_mg:
          type: number
        chloride_mg:
          type: number
        folate_mg:
          type: number
        calcium_mg:
          type: number
        molybdenum_mg:
          type: number
        vitamin_A_mg:
          type: number
        riboflavin_mg:
          type: number
        folic_acid_mg:
          type: number
        iron_mg:
          type: number
        thiamin_mg:
          type: number
        pantothenic_acid_mg:
          type: number
        caffeine_mg:
          type: number
        vitamin_K_mg:
          type: number
        chromium_mg:
          type: number
        potassium_mg:
          type: number
        biotin_mg:
          type: number
        phosphorus_mg:
          type: number
      required:
        - selenium_mg
        - niacin_mg
        - magnesium_mg
        - copper_mg
        - vitamin_B12_mg
        - vitamin_B6_mg
        - vitamin_C_mg
        - zinc_mg
        - vitamin_E_mg
        - manganese_mg
        - vitamin_D_mg
        - iodine_mg
        - chloride_mg
        - folate_mg
        - calcium_mg
        - molybdenum_mg
        - vitamin_A_mg
        - riboflavin_mg
        - folic_acid_mg
        - iron_mg
        - thiamin_mg
        - pantothenic_acid_mg
        - caffeine_mg
        - vitamin_K_mg
        - chromium_mg
        - potassium_mg
        - biotin_mg
        - phosphorus_mg
    Meal:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/Meal.yaml
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        timestamp:
          type: string
        type:
          type: integer
        quantity:
          $ref: '#/components/schemas/NutritionQuantity'
        macros:
          $ref: '#/components/schemas/NutritionMacros'
        micros:
          $ref: '#/components/schemas/NutritionMicros'
      required:
        - name
        - id
        - timestamp
        - type
        - quantity
        - macros
        - micros
    NutritionMetadata:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionMetadata.yaml
      type: object
      properties:
        end_time:
          type: string
        start_time:
          type: string
        timestamp_localization:
          type: integer
      required:
        - end_time
        - start_time
    NutritionSummaryMacros:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionSummaryMacros.yaml
      type: object
      properties:
        alcohol_g:
          type: integer
        calories:
          type: integer
        carbohydrates_g:
          type: integer
        cholesterol_mg:
          type: integer
        fat_g:
          type: integer
        fiber_g:
          type: integer
        net_carbohydrates_g:
          type: integer
        protein_g:
          type: integer
        saturated_fat_g:
          type: integer
        sodium_mg:
          type: integer
        sugar_g:
          type: integer
        trans_fat_g:
          type: integer
    NutritionSummaryMicros:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionSummaryMicros.yaml
      type: object
      properties:
        biotin_mg:
          type: integer
        caffeine_mg:
          type: integer
        calcium_mg:
          type: integer
        chloride_mg:
          type: integer
        chromium_mg:
          type: integer
        copper_mg:
          type: integer
        folate_mg:
          type: integer
        folic_acid_mg:
          type: integer
        iodine_mg:
          type: integer
        iron_mg:
          type: integer
        magnesium_mg:
          type: integer
        manganese_mg:
          type: integer
        molybdenum_mg:
          type: integer
        niacin_mg:
          type: integer
        pantothenic_acid_mg:
          type: integer
        phosphorus_mg:
          type: integer
        potassium_mg:
          type: integer
        riboflavin_mg:
          type: integer
        selenium_mg:
          type: integer
        thiamin_mg:
          type: integer
        vitamin_A_mg:
          type: integer
        vitamin_B12_mg:
          type: integer
        vitamin_B6_mg:
          type: integer
        vitamin_C_mg:
          type: integer
        vitamin_D_mg:
          type: integer
        vitamin_D2_mg:
          type: integer
        vitamin_D3_mg:
          type: integer
        vitamin_E_mg:
          type: integer
        vitamin_K_mg:
          type: integer
        zinc_mg:
          type: integer
        cystine_g:
          type: integer
        histidine_g:
          type: integer
        isoleucine_g:
          type: integer
        leucine_g:
          type: integer
        lysine_g:
          type: integer
        methionine_g:
          type: integer
        phenylalanine_g:
          type: integer
        threonine_g:
          type: integer
        tryptophan_g:
          type: integer
        tyrosine_g:
          type: integer
        valine_g:
          type: integer
        monounsaturated_fat_g:
          type: integer
        polyunsaturated_fat_g:
          type: integer
        omega3_g:
          type: integer
        omega6_g:
          type: integer
        starch_g:
          type: integer
    NutritionSummary:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionSummary.yaml
      type: object
      properties:
        macros:
          $ref: '#/components/schemas/NutritionSummaryMacros'
        micros:
          $ref: '#/components/schemas/NutritionSummaryMicros'
        water_ml:
          type: integer
        drink_ml:
          type: integer
    SleepDataEnrichment:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepDataEnrichment.yaml
      type: object
      properties:
        sleep_contributors:
          type: array
          items:
            $ref: '#/components/schemas/DataContributor'
        sleep_score:
          type: integer
    SleepUploadType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepUploadType.yaml
      oneOf:
        - type: number
          const: 0
          description: The sleep data upload type is unknown or could not be determined.
          title: Unknown
        - type: number
          const: 1
          description: The sleep data was manually entered by the user.
          title: Manual
        - type: number
          const: 2
          description: The sleep data was automatically detected and recorded by a device or service.
          title: Automatic
        - type: number
          const: 3
          description: The sleep data is preliminary or tentative and may be subject to change.
          title: Tentative
        - type: number
          const: 4
          description: The sleep data upload type cannot be clearly categorized.
          title: Indeterminate
      examples:
        - 1
      description: The upload type for the associated workout, providing information on whether this was an automatic workout or user-entered
    SleepMetadata:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepMetadata.yaml
      type: object
      properties:
        end_time:
          type: string
        start_time:
          type: string
        is_nap:
          type: boolean
        summary_id:
          type: string
        timestamp_localization:
          type: integer
        upload_type:
          $ref: '#/components/schemas/SleepUploadType'
      required:
        - end_time
        - start_time
        - upload_type
    RecoveryLevel:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/RecoveryLevel.yaml
      oneOf:
        - type: number
          const: 0
          description: Recovery level could not be determined or is not available.
          title: Unknown
        - type: number
          const: 1
          description: Extremely low recovery.
          title: Very Poor
        - type: number
          const: 2
          description: Low recovery level.
          title: Poor
        - type: number
          const: 3
          description: Below average recovery.
          title: Compromised
        - type: number
          const: 4
          description: Moderate recovery level.
          title: Ok
        - type: number
          const: 5
          description: Above average recovery.
          title: Good
        - type: number
          const: 6
          description: Excellent recovery level.
          title: Very Good
      examples:
        - 5
      description: User's recovery score for a given day, resulting from the sleep session
    ReadinessData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ReadinessData.yaml
      type: object
      properties:
        readiness:
          type: integer
        recovery_level:
          $ref: '#/components/schemas/RecoveryLevel'
    BreathSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BreathSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        breaths_per_min:
          type: number
      required:
        - timestamp
        - breaths_per_min
    BreathsData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BreathsData.yaml
      type: object
      properties:
        avg_breaths_per_min:
          type: integer
        end_time:
          type: string
        max_breaths_per_min:
          type: integer
        min_breaths_per_min:
          type: integer
        on_demand_reading:
          type: boolean
        samples:
          type: array
          items:
            $ref: '#/components/schemas/BreathSample'
        start_time:
          type: string
    OxygenSaturationData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/OxygenSaturationData.yaml
      type: object
      properties:
        avg_saturation_percentage:
          type: integer
        end_time:
          type: string
        samples:
          type: array
          items:
            $ref: '#/components/schemas/OxygenSaturationSample'
        start_time:
          type: string
    SnoringSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SnoringSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        duration_seconds:
          type: number
      required:
        - timestamp
        - duration_seconds
    SnoringData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SnoringData.yaml
      type: object
      properties:
        end_time:
          type: string
        num_snoring_events:
          type: integer
        samples:
          type: array
          items:
            $ref: '#/components/schemas/SnoringSample'
        start_time:
          type: string
        total_snoring_duration_seconds:
          type: integer
    RespirationData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/RespirationData.yaml
      type: object
      properties:
        breaths_data:
          $ref: '#/components/schemas/BreathsData'
        oxygen_saturation_data:
          $ref: '#/components/schemas/OxygenSaturationData'
        snoring_data:
          $ref: '#/components/schemas/SnoringData'
    AsleepDurations:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AsleepDurations.yaml
      type: object
      properties:
        duration_asleep_state_seconds:
          type: integer
        duration_deep_sleep_state_seconds:
          type: integer
        duration_light_sleep_state_seconds:
          type: integer
        duration_REM_sleep_state_seconds:
          type: integer
        num_REM_events:
          type: integer
    AwakeDurations:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AwakeDurations.yaml
      type: object
      properties:
        duration_awake_state_seconds:
          type: integer
        duration_long_interruption_seconds:
          type: integer
        duration_short_interruption_seconds:
          type: integer
        num_out_of_bed_events:
          type: integer
        num_wakeup_events:
          type: integer
        sleep_latency_seconds:
          type: integer
        wake_up_latency_seconds:
          type: integer
    SleepLevel:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepLevel.yaml
      oneOf:
        - type: number
          const: 0
          description: Sleep level is unknown or could not be determined.
          title: Unknown
        - type: number
          const: 1
          description: User is awake during the sleep session.
          title: Awake
        - type: number
          const: 2
          description: User is in a general sleep state.
          title: Sleeping
        - type: number
          const: 3
          description: User has left the bed during a sleep session.
          title: Out of bed
        - type: number
          const: 4
          description: User is in light sleep stage.
          title: Light sleep
        - type: number
          const: 5
          description: User is in deep sleep stage.
          title: Deep sleep
        - type: number
          const: 6
          description: User is in REM sleep stage.
          title: REM sleep
      examples:
        - 2
      description: Represents the sleep level of the user during a sleep session, indicating the depth and quality of sleep
    SleepHypnogramSample:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepHypnogramSample.yaml
      type: object
      properties:
        timestamp:
          type: string
        level:
          $ref: '#/components/schemas/SleepLevel'
      required:
        - timestamp
        - level
    OtherSleepDurations:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/OtherSleepDurations.yaml
      type: object
      properties:
        duration_in_bed_seconds:
          type: integer
        duration_unmeasurable_sleep_seconds:
          type: integer
    SleepDurationsData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepDurationsData.yaml
      type: object
      properties:
        asleep:
          $ref: '#/components/schemas/AsleepDurations'
        awake:
          $ref: '#/components/schemas/AwakeDurations'
        hypnogram_samples:
          type: array
          items:
            $ref: '#/components/schemas/SleepHypnogramSample'
        other:
          $ref: '#/components/schemas/OtherSleepDurations'
        sleep_efficiency:
          type: integer
    SleepTemperatureData:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepTemperatureData.yaml
      type: object
      properties:
        delta:
          type: integer
    HealthcheckEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/HealthcheckEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: healthcheck
        status:
          type: string
          description: Status of the healthcheck
        creation_timestamp:
          type: string
          description: Timestamp when the event was created
        trend_percentage:
          type: integer
          description: Percentage change in trends
        sent_webhooks_last_hour:
          type: integer
          description: Number of webhooks sent in the last hour
      required:
        - type
        - status
        - creation_timestamp
        - trend_percentage
        - sent_webhooks_last_hour
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Healthcheck event sent periodically to verify your webhook endpoint is functional
    AuthEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AuthEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: auth
        status:
          type: string
          description: Status of the event
      required:
        - type
        - status
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Authentication event
    AuthSuccessEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AuthSuccessEvent.yaml
      type: object
      properties:
        status:
          type: string
          const: success
          description: Status of authentication
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User who authenticated
        reference_id:
          type: string
          description: Client-provided reference ID
        widget_session_id:
          type: string
          description: Widget session identifier
      required:
        - status
        - user
        - reference_id
        - widget_session_id
      allOf:
        - $ref: '#/components/schemas/AuthEvent'
      description: Authentication success event
    AuthErrorEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AuthErrorEvent.yaml
      type: object
      properties:
        status:
          type: string
          const: error
          description: Status of authentication
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User who attempted to authenticate
        provider:
          type: string
          description: Provider information
        message:
          type: string
          description: Error message
        reason:
          type: string
          description: Reason for the error
        reference_id:
          type: string
          description: Client-provided reference ID
        widget_session_id:
          type: string
          description: Widget session identifier
      required:
        - status
        - user
        - provider
        - message
        - reason
        - reference_id
        - widget_session_id
      allOf:
        - $ref: '#/components/schemas/AuthEvent'
      description: Authentication error event
    DeauthEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DeauthEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: deauth
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User who deauthenticated
        status:
          type: string
          const: success
          description: Status of deauthentication
        message:
          type: string
          description: Confirmation message
      required:
        - type
        - user
        - status
        - message
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: User deauthentication event
    UserReauthEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/UserReauthEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: user_reauth
        new_user:
          $ref: '#/components/schemas/TerraUser'
          description: The new user record
        old_user:
          $ref: '#/components/schemas/TerraUser'
          description: The old user record that will be deleted
        status:
          type: string
          const: warning
          description: Status of the re-authentication
        message:
          type: string
          description: Information about the re-authentication
      required:
        - type
        - new_user
        - old_user
        - status
        - message
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: User re-authentication event
    AccessRevokedEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AccessRevokedEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: access_revoked
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User who revoked access
        status:
          type: string
          const: warning
          description: Status of the event
        message:
          type: string
          description: Information about the access revocation
      required:
        - type
        - user
        - status
        - message
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Access revoked event when a user revokes access through the provider
    ConnectionErrorEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ConnectionErrorEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: connection_error
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User with connection issues
        status:
          type: string
          const: warning
          description: Status of the event
        message:
          type: string
          description: Information about the connection issue
      required:
        - type
        - user
        - status
        - message
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Connection error event
    GoogleNoDatasourceEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/GoogleNoDatasourceEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: google_no_datasource
        user:
          $ref: '#/components/schemas/TerraUser'
          description: Affected user
        status:
          type: string
          const: warning
          description: Status of the event
        message:
          type: string
          description: Information about the issue
      required:
        - type
        - user
        - status
        - message
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Google no datasource event
    ProcessingEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ProcessingEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: processing
        status:
          type: string
          const: success
          description: Status of the processing
        message:
          type: string
          description: Information about the processing
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being processed
        retry_after_seconds:
          type: integer
          description: Seconds to wait before retrying
      required:
        - type
        - status
        - message
        - user
        - retry_after_seconds
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Processing event returned when data is being fetched asynchronously
    LargeRequestSendingEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/LargeRequestSendingEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: large_request_sending
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being sent
        reference:
          type: string
          description: Reference ID for tracking this request
        message:
          type: string
          description: Information about the request
        expected_payloads:
          type: integer
          description: Number of expected payload events
      required:
        - type
        - user
        - reference
        - message
        - expected_payloads
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Large request sending event
    RateLimitHitEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/RateLimitHitEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: rate_limit_hit
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose request hit rate limits
        start_date:
          type: string
          description: Start date of the requested data range
        end_date:
          type: string
          description: End date of the requested data range
        retrying_at:
          type: string
          description: When the request will be retried
        message:
          type: string
          description: Information about the rate limit
      required:
        - type
        - user
        - start_date
        - end_date
        - retrying_at
        - message
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Rate limit hit event
    S3PayloadEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/S3PayloadEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: s3_payload
        status:
          type: string
          const: success
          description: Status of the upload
        url:
          type: string
          description: URL to download the data
        expires_in:
          type: integer
          description: Time in seconds until URL expiration
      required:
        - type
        - status
        - url
        - expires_in
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: S3 Upload event with data download URL
    ActivityEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/ActivityEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: activity
        data:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
          description: Array of activity data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - data
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Activity data event
    AthleteEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/AthleteEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: athlete
        athlete:
          $ref: '#/components/schemas/Athlete'
          description: Athlete data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - athlete
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Athlete data event
    NutritionEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/NutritionEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: nutrition
        data:
          type: array
          items:
            $ref: '#/components/schemas/Nutrition'
          description: Array of nutrition data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - data
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Nutrition data event
    DailyEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/DailyEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: daily
        data:
          type: array
          items:
            $ref: '#/components/schemas/Daily'
          description: Array of daily data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - data
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Daily data event
    SleepEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/SleepEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: sleep
        data:
          type: array
          items:
            $ref: '#/components/schemas/Sleep'
          description: Array of sleep data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - data
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Sleep data event
    MenstruationEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/MenstruationEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: menstruation
        data:
          type: array
          items:
            $ref: '#/components/schemas/Menstruation'
          description: Array of menstruation data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - data
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Menstruation data event
    BodyEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/BodyEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: body
        data:
          type: array
          items:
            $ref: '#/components/schemas/Body'
          description: Array of body data
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User whose data is being provided
        version:
          type: string
          description: API version
      required:
        - type
        - data
        - user
        - version
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Body data event
    PermissionChangeEvent:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/PermissionChangeEvent.yaml
      type: object
      properties:
        type:
          type: string
          const: permission_change
        user:
          $ref: '#/components/schemas/TerraUser'
          description: User who changed permissions
        status:
          type: string
          const: warning
          description: Status of the event
        message:
          type: string
          description: Information about the permission change
        version:
          type: string
          description: API version
        scopes_added:
          type: string
          description: Newly added scopes
        scopes_removed:
          type: string
          description: Removed scopes
      required:
        - type
        - user
        - status
        - message
        - version
        - scopes_added
        - scopes_removed
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
      description: Permission change event
    WebhookEventType:
      $schema: https://json-schema.org/draft/2020-12/schema
      $id: https://raw.githubusercontent.com/tryterra/openapi/refs/heads/v5-update/schemas/WebhookEventType.yaml
      oneOf:
        - $ref: '#/components/schemas/HealthcheckEvent'
        - $ref: '#/components/schemas/AuthSuccessEvent'
        - $ref: '#/components/schemas/AuthErrorEvent'
        - $ref: '#/components/schemas/DeauthEvent'
        - $ref: '#/components/schemas/UserReauthEvent'
        - $ref: '#/components/schemas/AccessRevokedEvent'
        - $ref: '#/components/schemas/ConnectionErrorEvent'
        - $ref: '#/components/schemas/GoogleNoDatasourceEvent'
        - $ref: '#/components/schemas/PermissionChangeEvent'
        - $ref: '#/components/schemas/ProcessingEvent'
        - $ref: '#/components/schemas/LargeRequestProcessingEvent'
        - $ref: '#/components/schemas/LargeRequestSendingEvent'
        - $ref: '#/components/schemas/RateLimitHitEvent'
        - $ref: '#/components/schemas/ActivityEvent'
        - $ref: '#/components/schemas/AthleteEvent'
        - $ref: '#/components/schemas/BodyEvent'
        - $ref: '#/components/schemas/DailyEvent'
        - $ref: '#/components/schemas/MenstruationEvent'
        - $ref: '#/components/schemas/NutritionEvent'
        - $ref: '#/components/schemas/SleepEvent'
        - $ref: '#/components/schemas/S3PayloadEvent'
      description: Union of all possible webhook event types
