openapi: 3.1.0
info:
  description: The Terra API
  title: TerraAPI
  version: 2022.03.16
servers:
- url: https://api.tryterra.co/v2
security:
  - apiKeyAuth: []
    devIdAuth: []
paths:
  /auth/authenticateUser:
    post:
      summary: Generate an authentication link 
      description: Creates a login link that allows end users to connect their fitness tracking account
      tags:
        - Authentication
      operationId: AuthenticateUser
      parameters:
      - name: resource
        in: query
        description: resource to authenticate user with
        schema:
          type: string
        required: true
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                reference_id:
                  type: string
                auth_success_redirect_url:
                  type: string
                auth_failure_redirect_url:
                  type: string
        required: false
      responses:
        '200':
          description: Returned when authentication link could be successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    description: indicates that the request was successful
                    example: success
                  user_id:
                    description: User ID for the user being created
                    type: string
                    example: 23dc2540-7139-44c6-8158-f81196e2cf2e
                  auth_url:
                    type: string
                    description: authentication URL the user must be redirected to
                      in order to link their account
                    example: https://www.fitbit.com/oauth2/authorize?response_type=code&client_id=23BBG9&scope=settings+nutrition+sleep+heartrate+electrocardiogram+weight+respiratory_rate+oxygen_saturation+profile+temperature+cardio_fitness+activity+location&state=bLqqjPie9ptwoWm6VBxHCu6JkkoWJp
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            resource)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [success, error]
                    description: indicates that an error happened (value is error)
  /auth/generateWidgetSession:
    post:
      summary: Generate an authentication link, using the Terra Authentication Widget
      description: Generates a link to redirect an end user to for them to select an integration and log in with their fitness data provider
      tags:
        - Authentication
      operationId: GenerateWidgetSession
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WidgetSessionParams"
        required: true
      responses:
        '200':
          description: Returned when authentication link could be successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  session_id:
                    description: Session ID for the widget authentication session
                    type: string
                    example: 23dc2540-7139-44c6-8158-f81196e2cf2e
                  url:
                    type: string
                    description: the widget URL the user must be redirected to
                      in order to link their account
                    example: https://widget.tryterra.co/session/344d475f-296a-489a-a88c-54183671dafd
                  status:
                    type: string
                    enum: [success, error]
                    description: indicates that an error happened (value is success)
                    example: success
                  expires_in:
                    type: number
                    description: a number in seconds depicting how long the url is valid for
                    example: 900
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

  /users/{user_id}:
    patch:
      summary: Modify user
      description: Update a Terra user's reference_id or active status
      tags:
        - User Management
      operationId: ModifyUser
      parameters:
        - name: user_id
          in: path
          description: Terra user ID to update
          required: true
          schema:
            type: string
        - name: dev-id
          in: header
          description: Your developer ID
          required: true
          schema:
            type: string
          example: testingTerra
        - name: x-api-key
          in: header
          description: Your API key
          required: true
          schema:
            type: string
          example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reference_id:
                  type: string
                  description: Identifier on your system to associate with this user
                  example: "updatedUser123"
                active:
                  type: boolean
                  description: Whether the user should remain active
      responses:
        '200':
          description: Returned upon successful user modification
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  status:
                    type: string
                    enum: [success, error]
                    description: Indicates that the request was successful
                    example: success
        '400':
          description: Returned if the parameters are malformed or no user is found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: A detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [success, error]
                    description: Indicates an error happened
  /auth/deauthenticateUser:
    delete:
      summary: Deauthenticates a user and deletes any cached data for them
      description: Deletes all records of the user on Terra's end, revoking Terra's access to their data
      tags:
        - Authentication
      operationId: DeauthenticateUser
      parameters:
      - name: user_id
        in: query
        description: user_id to deauthenticate for
        schema:
          type: string
        required: true
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned when authentication link could be successfully generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    enum: [success, error]
                    description: indicates that an error happened (value is success)
                    type: string

        '404':
          description: Returned when the user_id is not existent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [success, error]
                    description: indicates that an error happened (value is error)
  /auth/generateAuthToken:
    post:
      tags:
        - Authentication
      summary: Generates an authentication token for the Terra mobile SDKs
      description: Creates a token to be used with initConnection() functions in the Terra mobile SDKs in order to create a user record for Apple Health or Samsung Health (or equivalent)
      operationId: generate-authentication-token
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: '200'
          content:
            application/json:
              examples:
                Result:
                  value: |-
                    {
                        "status": "success",
                        "token": "250c68b9c21b78e40e7a3285a2d538d3bc24aabd3b4c76a782fb0a571ca4501d",
                        "expires_in": 180
                    }
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  token:
                    type: string
                    example: 250c68b9c21b78e40e7a3285a2d538d3bc24aabd3b4c76a782fb0a571ca4501d
                  expires_in:
                    type: integer
                    example: 180
                    default: 0
        '404':
          description: '404'
          content:
            application/json:
              examples:
                Result:
                  value: |-
                    {
                        "status": "error",
                        "message": "Invalid dev-id was provided"
                    }
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid dev-id was provided
      deprecated: false
  /activity:
    get:
      summary: Retrieve activity data for a given user ID
      description: Fetches completed workout sessions, with a defined start and end time and activity type (e.g. running, cycling, etc.)
      tags:
        - Data retrieval
      operationId: GetActivity
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: with_samples
        in: query
        description: boolean flag specifying whether to include detailed samples in
          the returned payload
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Activity'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
                - $ref: '#/components/schemas/RequestProcessing'
                - $ref: '#/components/schemas/RateLimitRequestProcessing'
                - $ref: '#/components/schemas/LargeRequestProcessingResponse'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized
        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    post:
      tags:
        - Data writing
      operationId: PostActivity
      description: Used to post activity data to a provider. Available for Wahoo
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: List of user-tracked workouts to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/Activity'
              required:
              - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  log_ids:
                    description: List of identifiers for the objects created, returned
                      in the same order they were posted. I.e. Posting [ObjectA, ObjectB]
                      will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Activity successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /athlete:
    get:
      summary: Retrieve user profile info for a given user ID
      description: Fetches relevant profile info such as first & last name, birth date etc. for a given user ID
      tags:
        - Data retrieval
      operationId: GetAthlete
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/AthleteCollection'
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /body:
    get:
      summary: Retrieve body metrics for a given user ID
      description: Fetches body metrics such as weight, height, body fat percentage etc. for a given user ID
      tags:
        - Data retrieval
      operationId: GetBody
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: with_samples
        in: query
        description: boolean flag specifying whether to include detailed samples in
          the returned payload
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Body'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
                - $ref: '#/components/schemas/RequestProcessing'
                - $ref: '#/components/schemas/RateLimitRequestProcessing'
                - $ref: '#/components/schemas/LargeRequestProcessingResponse'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    post:
      tags:
        - Data writing
      operationId: PostBody
      description: Used to post body data to a provider. Available for Google Fit
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: Body measurement metrics to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/Body'
              required:
              - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  log_ids:
                    description: List of identifiers for the objects created, returned
                      in the same order they were posted. I.e. Posting [ObjectA, ObjectB]
                      will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Body data successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    delete:
      tags:
        - Data writing
      operationId: DeleteBody
      description: Used to delete Body metrics the user has registered on their account
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                log_ids:
                  type: array
                  description: List of identifiers for body metrics entries to be
                    deleted
                  items:
                    type: string
                  required:
                  - data
        required: true
      responses:
        '200':
          description: Returned when all records were deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the body metric entries whose
                            deletion was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting
                            to delete the body metric entries
        '207':
          description: Returned when multiple status codes were obtained from attempting
            to delete the requested records
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the body metric entry whose deletion
                            was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting
                            to delete the body metric entry
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /daily:
    get:
      summary: Retrieve daily activity summaries for a given user ID
      description: Fetches daily summaries of activity metrics such as steps, distance, calories burned etc. for a given user ID
      tags:
        - Data retrieval
      operationId: GetDaily
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: with_samples
        in: query
        description: boolean flag specifying whether to include detailed samples in
          the returned payload
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Daily'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
                - $ref: '#/components/schemas/RequestProcessing'
                - $ref: '#/components/schemas/RateLimitRequestProcessing'
                - $ref: '#/components/schemas/LargeRequestProcessingResponse'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /menstruation:
    get:
      summary: Retrieve menstruation data for a given user ID
      description: Fetches menstruation data such as cycle length, period length, ovulation
        date etc. for a given user ID
      tags:
        - Data retrieval
      operationId: GetMenstruation
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: with_samples
        in: query
        description: boolean flag specifying whether to include detailed samples in
          the returned payload
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Menstruation'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
                - $ref: '#/components/schemas/RequestProcessing'
                - $ref: '#/components/schemas/RateLimitRequestProcessing'
                - $ref: '#/components/schemas/LargeRequestProcessingResponse'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /nutrition:
    get:
      summary: Retrieve nutrition log data for a given user ID
      description: Fetches nutrition log data such as meal type, calories, macronutrients
        etc. for a given user ID
      tags:
        - Data retrieval
      operationId: GetNutrition
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: with_samples
        in: query
        description: boolean flag specifying whether to include detailed samples in
          the returned payload
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Nutrition'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
                - $ref: '#/components/schemas/RequestProcessing'
                - $ref: '#/components/schemas/RateLimitRequestProcessing'
                - $ref: '#/components/schemas/LargeRequestProcessingResponse'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    post:
      tags:
        - Data writing
      operationId: PostNutrition
      description: Used to post nutrition logs to a provider. Available for Fitbit
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: Nutrition entry to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/Nutrition'
              required:
              - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  log_ids:
                    description: List of identifiers for the objects created, returned
                      in the same order they were posted. I.e. Posting [ObjectA, ObjectB]
                      will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Nutrition successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    delete:
      tags:
        - Data writing
      operationId: DeleteNutrition
      description: Used to delete nutrition logs the user has registered on their
        account
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                log_ids:
                  type: array
                  description: List of identifiers for nutrition entries to be deleted
                  items:
                    type: string
                  required:
                  - data
        required: true
      responses:
        '200':
          description: Returned when all records were deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the nutrition log whose deletion
                            was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting
                            to delete the nutrition log
        '207':
          description: Returned when multiple status codes were obtained from attempting
            to delete the requested records
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the nutrition log whose deletion
                            was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting
                            to delete the nutrition log
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    enum: [success, error]
                    type: string
                    description: indicates that an error happened (value is error)
  /sleep:
    get:
      summary: Retrieve sleep sessions for a given user ID
      description: Fetches sleep data such as sleep duration, sleep stages, sleep
        quality etc. for a given user ID, for sleep sessions with a defined start and end time
      tags:
        - Data retrieval
      operationId: GetSleep
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: with_samples
        in: query
        description: boolean flag specifying whether to include detailed samples in
          the returned payload
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Sleep'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
                - $ref: '#/components/schemas/RequestProcessing'
                - $ref: '#/components/schemas/RateLimitRequestProcessing'
                - $ref: '#/components/schemas/LargeRequestProcessingResponse'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /plannedWorkout:
    post:
      tags:
        - Data writing
      operationId: PostPlannedWorkout
      description: Used to post workout plans users can follow on their wearable. This can be stregnth workouts (sets, reps, weight lifted) 
        or cardio workouts (warmup, intervals of different intensities, cooldown etc)
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  description: PlannedWorkout entry to post to data provider
                  type: array
                  items:
                    $ref: '#/components/schemas/PlannedWorkout'
              required:
              - data
        required: true
      responses:
        '201':
          description: Returned when activity was successfully created on the provider
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  log_ids:
                    description: List of identifiers for the objects created, returned
                      in the same order they were posted. I.e. Posting [ObjectA, ObjectB]
                      will return [IdentifierA, IdentifierB]
                    type: array
                    items:
                      type: string
                  message:
                    type: string
                    default: Nutrition successfully logged
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    get:
      summary: Retrieve workout plans for a given user ID
      description: Used to get workout plans the user has registered on their account.
        This can be stregnth workouts (sets, reps, weight lifted) or cardio workouts
        (warmup, intervals of different intensities, cooldown etc)
      tags:
        - Data retrieval
      operationId: GetPlannedWorkout
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: start_date
        in: query
        description: start date of data to query for - either ISO8601 date or unix
          timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: true
      - name: end_date
        in: query
        description: end date of data to query for - either ISO8601 date or unix timestamp
        schema:
          oneOf:
          - type: integer
          - type: string
            format: date
        required: false
      - name: to_webhook
        in: query
        description: boolean flag specifying whether to send the data retrieved to
          the webhook, or in the response
        schema:
          type: boolean
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned upon successful data request
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/PlannedWorkout'
                    type:
                      type: string
                      nullable: true
                - $ref: '#/components/schemas/NoDataReturned'
                - $ref: '#/components/schemas/DataSentToWebhook'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when credentials (dev ID and API key) are invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: An error message
                    type: string
                    example: unauthorized

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
    delete:
      tags:
        - Data writing
      operationId: DeletePlannedWorkout
      description: Used to delete workout plans the user has registered on their account.
        This can be stregnth workouts (sets, reps, weight lifted) or cardio workouts
        (warmup, intervals of different intensities, cooldown etc)
      parameters:
      - name: user_id
        in: query
        description: user ID to query data for
        schema:
          type: string
        required: true
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                log_ids:
                  type: array
                  description: List of identifiers for planned workout entries to
                    be deleted
                  items:
                    type: string
                  required:
                  - data
        required: true
      responses:
        '200':
          description: Returned when all records were deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  processed_data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Identifier of the planned workout whose deletion
                            was attempted
                        response_code:
                          type: integer
                          description: Response code from the provider when attempting
                            to delete the planned workout
        '207':
          description: Returned when multiple status codes were obtained from attempting
            to delete the requested records
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  processed_data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Identifier of the planned workout whose deletion
                          was attempted
                      response_code:
                        type: integer
                        description: Response code from the provider when attempting
                          to delete the planned workout
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
        '401':
          description: Returned when authorization with a data provider has failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    enum: [success, error]
                    type: string
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /subscriptions: {}
  /userInfo:
    get:
      tags:
        - User Info
      operationId: GetUserInfo
      description: Used to query for information on one Terra user ID, or to query
        for all registered Terra User objects under one reference ID
      parameters:
      - name: user_id
        in: query
        description: user ID to query for
        schema:
          type: string
        required: false
      - name: reference_id
        in: query
        description: reference ID to query for
        schema:
          type: string
        required: false
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      responses:
        '200':
          description: Returned when the provided resources are found
          content:
            application/json:
              schema:
                oneOf:
                - description: User information for one connection (single User object)
                  type: object
                  properties:
                    user:
                      $ref: '#/components/schemas/User'
                    status:
                      type: string
                      enum: [success, error]
                      default: success
                    is_authenticated:
                      type: boolean
                      nullable: false
                - description: List of multiple User objects the reference_id is associated
                    to
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /bulkUserInfo:
    post:
      tags:
        - User Info
      operationId: GetBulkInfo
      description: Used to query for information for multiple Terra User IDs
      parameters:
      - name: dev-id
        in: header
        description: your developer ID
        required: true
        schema:
          type: string
        example: testingTerra
      - name: x-api-key
        in: header
        description: your API key
        required: true
        schema:
          type: string
        example: OtHJok60oQmT8zhnUWc4SWBJI7ztPTs88C0gOsJJ
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: List of user IDs to get information for
              items:
                type: string
        required: true
      responses:
        '200':
          description: Returned upon successful request
          content:
            application/json:
              schema:
                description: List of User objects
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Returned when one or more parameters is malformed - an appropriate
            error message will be returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)

        '404':
          description: Returned when a parameter does not exist on Terra's end (e.g.
            user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: a detailed message describing the error
                    type: string
                  status:
                    type: string
                    enum: [error]
                    description: indicates that an error happened (value is error)
  /integrations:
    get:
      summary: Get list of available integrations
      tags:
        - Integrations
      operationId: GetIntegrations
      responses:
        '200':
          description: Returns list of all available integrations on the API
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      type: string
                      example: FITBIT
                  sdk_resource:
                    type: array
                    items:
                      type: string
                      example: APPLE
                  status:
                    enum: [success, error]
                    type: string
                    default: success
      security: []
  /integrations/detailed:
    get:
      tags:
        - Integrations
      summary: Get detailed list of integrations
      description: Retrieve a detailed list of supported integrations, optionally filtered by the developer's enabled integrations and the requirement for SDK usage.
      parameters:
        - in: query
          name: sdk
          required: false
          schema:
            type: boolean
          description: If `true`, allows SDK integrations to be included in the response.
        - in: header
          name: dev-id
          required: false
          schema:
            type: string
          description: Developer ID to filter the integrations list based on the developer's enabled integrations.
      responses:
        '200':
          description: Successful response containing a list of integrations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationsResponse'
      security: []
components:
  schemas:
    WidgetSessionParams:
      type: object
      properties:
        providers:
          type: string
          description: "Comma separated list of providers to display on the device selection page. This overrides your selected sources on your dashboard"
          example: "GARMIN,FITBIT,OURA,WITHINGS,SUUNTO"
        language:
          type: string
          description: "Display language of the widget"
          example: "en"
        reference_id:
          type: string
          description: "Identifier of the end user on your system, such as a user ID or email associated with them"
          example: "user123@email.com"
        auth_success_redirect_url:
          type: string
          description: "URL the user is redirected to upon successful authentication"
          example: "https://myapp.com/success"
        auth_failure_redirect_url:
          type: string
          description: "URL the user is redirected to upon unsuccessful authentication"
          example: "https://myapp.com/failure"
    User:
      type: object
      properties:
        reference_id:
          type: string
          description: Connection identifier on the developer's end, used to tie connection
            back to a user on the developer's platform
          nullable: true
          example: "user123@email.com"
        last_webhook_update:
          type: string
          description: Last time at which a webhook update was sent for the connection
          format: date-time
          example: '2022-12-12T10:00:00.000000+00:00'
          nullable: true
        scopes:
          type: string
          description: (when available) Permissions granted by the user during authentication
            - to be used as debugging metadata
          nullable: true
          example: "activity:read,sleep:read"
        user_id:
          type: string
          description: Terra identifier for the wearable connection
          nullable: true
          example: "123e4567-e89b-12d3-a456-426614174000"
        provider:
          type: string
          description: Connection data source
          nullable: true
          example: "FITBIT"
    NoDataReturned:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          nullable: false
          example: "error"
        message:
          type: string
          nullable: false
          example: "No data available for specified time range"
        type:
          type: string
          nullable: true
          example: "no_data"
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
    TerraDataModel:
      type: object
      properties: {}
    DataReturned:
      type: object
      properties:
        data:
          type: array
          description: List of objects returned by the API, after normalization
          items:
            $ref: '#/components/schemas/TerraDataModel'
        type:
          type: string
          nullable: true
          example: "activity"
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
    RequestProcessing:
      type: object
      properties:
        retry_after_seconds:
          type: number
          description: Recommended time after which the request may be retried
          nullable: true
          example: 30
        message:
          type: string
          nullable: false
          example: "Request is being processed"
        type:
          type: string
          nullable: false
          example: "processing"
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
    RateLimitRequestProcessing:
      type: object
      properties:
        message:
          type: string
          nullable: false
          example: "Rate limit exceeded"
        type:
          type: string
          nullable: false
          example: "rate_limit"
        user:
          $ref: '#/components/schemas/User'
      required:
      - user
    DataSentToWebhook:
      type: object
      properties:
        reference:
          type: string
          description: Payload reference, tying the request to the webhook payload
            which will be received
          nullable: true
          example: "webhook_ref_123"
        message:
          type: string
          nullable: false
          example: "Data will be sent to webhook"
        type:
          type: string
          nullable: false
          example: "webhook"
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
    ActivityLevelSample:
      type: object
      properties:
        activity_level:
          description: Intensity of the user's activity at an instant in time
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - REST
          - INACTIVE
          - LOW_INTENSITY
          - MEDIUM_INTENSITY
          - HIGH_INTENSITY
          example: "MEDIUM_INTENSITY"
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond prexcision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    ActiveDurationsData:
      type: object
      properties:
        activity_levels_samples:
          type: array
          description: Array of detailed samples of the intensity the user was in
            at various points during the workout
          items:
            $ref: '#/components/schemas/ActivityLevelSample'
        num_continuous_inactive_periods:
          type: integer
          description: Maximum number of continuous periods spent in an inactive state
            during the workout
          minimum: 0
          nullable: true
          example: 3
        inactivity_seconds:
          type: number
          description: Total number of seconds spent in an inactive state during the
            workout
          minimum: 0
          nullable: true
          example: 600
        vigorous_intensity_seconds:
          type: number
          description: Total number of seconds spent in a state of vigorous intensity
            during the workout
          minimum: 0
          nullable: true
          example: 300
        activity_seconds:
          type: number
          description: Total number of seconds spent in an active state during the
            workout
          minimum: 0
          nullable: true
          example: 1800
        low_intensity_seconds:
          type: number
          description: Total number of seconds spent in a low intensity state during
            the workout
          minimum: 0
          nullable: true
          example: 900
        rest_seconds:
          type: number
          description: Total number of seconds spent resting during the workout
          minimum: 0
          nullable: true
          example: 120
        moderate_intensity_seconds:
          type: number
          description: Total number of seconds spent in a moderate intensity state
            during the workout
          minimum: 0
          nullable: true
          example: 600
    LapSample:
      type: object
      properties:
        calories:
          type: number
          description: Calories burned during the lap
          nullable: true
          example: 50
        avg_hr_bpm:
          type: number
          description: Average heart rate in bpm, for the Lap sample
          nullable: true
          example: 145
        start_time:
          type: string
          description: The start time of the associated lap, in ISO8601 format with
            microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        avg_speed_meters_per_second:
          type: number
          description: Average speed of the user during the lap
          nullable: true
          example: 3.5
        distance_meters:
          type: number
          description: Distance covered during the lap
          nullable: true
          example: 400
        total_strokes:
          type: number
          description: Total strokes performed during the lap - only relevant for
            swimming activities
          nullable: true
          example: 20
        end_time:
          type: string
          description: The end time of the associated lap, in ISO8601 format with
            microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-10-28T10:00:00.000000+01:00'
          format: date-time
          nullable: true
        stroke_type:
          description: Stroke type - only relevant for swimming activities
          nullable: false
          type: string
          enum:
          - OTHER
          - FREESTYLE
          - BACKSTROKE
          - BREASTSTROKE
          - BUTTERFLY
          - REST
          example: "FREESTYLE"
    LapData:
      type: object
      properties:
        laps:
          type: array
          description: Array of datapoints for each lap performed by the user during
            the workout
          items:
            $ref: '#/components/schemas/LapSample'
    PolylineMapData:
      type: object
      properties:
        summary_polyline:
          type: string
          description: The polyline representation of the user's trajectory throughout
            the workout
          nullable: true
          example: "}_p~iF~ps|U_ulLnnqC_mqNvxq`@"
    StrainData:
      type: object
      properties:
        strain_level:
          type: number
          description: Strain level achieved by the user for the given workout
          nullable: true
          example: 8.5
    PositionSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 300
        coords_lat_lng_deg:
          type: array
          description: Position of the user a given point in time, represented by
            a 2-value array of latitude, longitude, wherein each of the two numbers
            can be nullable
          example:
          - -18.4911
          - 130.9123
          nullable: false
          items:
            type: number
    PositionData:
      type: object
      properties:
        position_samples:
          type: array
          description: Array of datapoints of the position of the user, sampled throughout
            the workout
          items:
            $ref: '#/components/schemas/PositionSample'
        end_pos_lat_lng_deg:
          type: array
          description: Position of the user at the end of the workout, represented
            by a 2-value array of latitude, longitude, wherein each of the two numbers
            can be nullable
          example:
          - -84.4911
          - -150.9123
          nullable: false
          items:
            type: number
        center_pos_lat_lng_deg:
          type: array
          description: Position of the user at the midway point of the workout, represented
            by a 2-value array of latitude, longitude, wherein each of the two numbers
            can be nullable
          example:
          - -18.4911
          - 130.9123
          nullable: false
          items:
            type: number
        start_pos_lat_lng_deg:
          type: array
          description: Position of the user at the start of the workout, represented
            by a 2-value array of latitude, longitude, wherein each of the two numbers
            can be nullable
          example:
          - 80.2394
          - 102.931
          nullable: false
          items:
            type: number
    CadenceSample:
      type: object
      properties:
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 300
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        cadence_rpm:
          type: number
          description: Cadence of the user at a given instant in time - only relevant
            to cycling
          nullable: true
          example: 85
    TorqueSample:
      type: object
      properties:
        torque_newton_meters:
          type: number
          description: Torque generated at a given instant in time
          nullable: true
          example: 45.5
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 300
    SpeedSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 300
        speed_meters_per_second:
          type: number
          description: User's speed at a given instant in time
          nullable: true
          example: 3.5
    MovementData:
      type: object
      properties:
        max_pace_minutes_per_kilometer:
          type: number
          description: Maximum pace of the user during the workout
          minimum: 0
          nullable: true
          example: 6.5
        adjusted_max_speed_meters_per_second:
          type: number
          description: Adjusted max speed of the user during the workout - generated
            using Terra's algorithms to remove potential affecting the user's actual
            max speed measurement
          minimum: 0
          nullable: true
          example: 4.2
        avg_velocity_meters_per_second:
          type: number
          description: Average velocity of the user during the workout - only calculated
            by certain providers, representing a separate quantity from speed
          minimum: 0
          nullable: true
          example: 3.0
        max_velocity_meters_per_second:
          type: number
          description: Maximum velocity of the user during the workout - only calculated
            by certain providers, representing a separate quantity from speed
          minimum: 0
          nullable: true
          example: 4.5
        avg_speed_meters_per_second:
          type: number
          description: Average speed of the user during the workout
          minimum: 0
          nullable: true
          example: 3.2
        avg_torque_newton_meters:
          type: number
          description: Average torque generated by the user during the workout - mainly
            relevant for cycling activities
          minimum: 0
          nullable: true
          example: 40.0
        cadence_samples:
          type: array
          description: Array of cadence values recorded throughout the workout, sampled
            at intervals determined by the fitness data provider
          items:
            $ref: '#/components/schemas/CadenceSample'
        max_speed_meters_per_second:
          type: number
          description: Maximum speed of the user during the workout
          minimum: 0
          nullable: true
          example: 4.5
        avg_pace_minutes_per_kilometer:
          type: number
          description: Average pace of the user during the workout
          minimum: 0
          nullable: true
          example: 6.2
        avg_cadence_rpm:
          type: number
          description: Maximum speed of the user during the workout
          minimum: 0
          nullable: true
          example: 85
        max_torque_newton_meters:
          type: number
          description: Maximum torque generated by the user during the workout - mainly
            relevant for cycling activities
          minimum: 0
          nullable: true
          example: 55.5
        torque_samples:
          type: array
          description: Array of the datapoints for the user's torque sampled throughout
            the workout
          items:
            $ref: '#/components/schemas/TorqueSample'
        normalized_speed_meters_per_second:
          type: number
          description: Average normalized speed of the user during the workout - only
            calculated by certain providers, representing a separate quantity from
            speed
          minimum: 0
          nullable: true
          example: 3.8
        max_cadence_rpm:
          type: number
          description: Maximum cadence of the user during the workout - mainly relevant
            for cycling activities
          minimum: 0
          nullable: true
          example: 110
        speed_samples:
          type: array
          description: Array of the datapoints for the user's speed sampled throughout
            the workout
          items:
            $ref: '#/components/schemas/SpeedSample'
    Vo2MaxSample:
      type: object
      properties:
        vo2max_ml_per_min_per_kg:
          type: number
          description: User's VO2Max - maximum amount of oxygen the user's body can
            utilize during exercise
          nullable: true
          example: 45.5
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    RRIntervalSample:
      type: object
      properties:
        rr_interval_ms:
          type: number
          description: User's RR Interval for a specific heart beat in milliseconds
          nullable: true
          example: 850
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        hr_bpm:
          type: number
          description: The heart beat value at that specific instance
          nullable: true
          example: 72
    OxygenSaturationSample:
      type: object
      properties:
        percentage:
          type: number
          description: User's oxygen saturation percentage - referring to either SpO2
            or SmO2, based on the `type` field
          nullable: true
          example: 98
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        type:
          description: Type of oxygen saturation measurement (i.e. blood vs muscle)
          nullable: false
          oneOf:
            - type: integer
              enum: [0]
              description: Oxygen saturation measurement for blood.
            - type: integer
              enum: [1]
              description: Oxygen saturation measurement for muscle.
    OxygenData:
      type: object
      properties:
        vo2max_ml_per_min_per_kg:
          type: number
          description: VO2Max for the given user
          nullable: true
          example: 42.5
        avg_saturation_percentage:
          type: number
          description: Average Oxygen Saturation percentage of the user during the
            workout (SpO2 or SmO2)
          nullable: true
          example: 97
        vo2_samples:
          type: array
          description: Array of VO2 datapoints sampled throughout the workout
          items:
            $ref: '#/components/schemas/Vo2MaxSample'
        saturation_samples:
          type: array
          description: Array of Oxygen Saturation percentage datapoints sampled throughout
            the workout
          items:
            $ref: '#/components/schemas/OxygenSaturationSample'
    OtherDeviceData:
      type: object
      properties:
        manufacturer:
          type: string
          description: Device manufacturer name
          nullable: true
          example: "Garmin"
        hardware_version:
          type: string
          description: Hardware version of the device
          nullable: true
          example: "v2.1"
        serial_number:
          type: string
          description: Device Serial Number
          nullable: true
          example: "GR123456789"
        name:
          type: string
          description: Device name - note that this can also be the name of the application/package
            which the data comes from, if coming from a data aggregator such as Google
            Fit
          nullable: true
          example: "Forerunner 945"
        software_version:
          type: string
          description: Device Software Version
          nullable: true
          example: "5.2.1"
    DeviceData:
      type: object
      properties:
        manufacturer:
          type: string
          description: Device manufacturer name
          nullable: true
          example: "Garmin"
        hardware_version:
          type: string
          description: Hardware version of the device
          nullable: true
          example: "v2.1"
        other_devices:
          type: array
          description: Data pertaining to other devices which may have contributed
            data for this workout
          items:
            $ref: '#/components/schemas/OtherDeviceData'
        activation_timestamp:
          type: string
          description: Activation timestamp of the device, if applicable
          format: date-time
          example: '2022-12-25T00:00:00.000000+05:00'
          nullable: true
        serial_number:
          type: string
          description: Device Serial Number
          nullable: true
          example: "GR123456789"
        name:
          type: string
          description: Device name - note that this can also be the name of the application/package
            which the data comes from, if coming from a data aggregator such as Google
            Fit
          nullable: true
          example: "Forerunner 945"
        software_version:
          type: string
          description: Device Software Version
          nullable: true
          example: "5.2.1"
    EnergyData:
      type: object
      properties:
        energy_planned_kilojoules:
          type: number
          description: Total number of kiloJoules planned to be expended during the
            workout - represents the user's predefined goal for the workout
          nullable: true
          example: 1200
        energy_kilojoules:
          type: number
          description: Total number of kiloJoules expended during the workout
          nullable: true
          example: 1150
    METSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        level:
          type: number
          description: Metabolic Equivalent of Task of the user's activity level at
            an instant in time
          nullable: true
          example: 4.2
    METData:
      type: object
      properties:
        num_inactive_minutes:
          type: number
          description: Number of minutes spent in state of Inactivity during the workout
            - based off MET scale
          minimum: 0
          nullable: true
          example: 5
        MET_samples:
          type: array
          description: An array of Metabolic Equivalent Time samples, as calculated
            by the user's wearable
          items:
            $ref: '#/components/schemas/METSample'
        num_low_intensity_minutes:
          type: number
          description: Number of minutes spent in Low Intensity during the workout
            - based off MET scale
          minimum: 0
          nullable: true
          example: 15
        num_moderate_intensity_minutes:
          type: number
          description: Number of minutes spent in Moderate Intensity during the workout
            - based off MET scale
          minimum: 0
          nullable: true
          example: 25
        avg_level:
          type: number
          description: The average MET level of the activity
          nullable: true
          example: 3.8
        num_high_intensity_minutes:
          type: number
          description: Number of minutes spent in High Intensity during the workout
            - based off MET scale
          minimum: 0
          nullable: true
          example: 10
    PowerSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 1800
        watts:
          type: number
          description: Power generated at a given instant in time
          nullable: true
          example: 250
    PowerData:
      type: object
      properties:
        avg_watts:
          type: number
          description: Average power output of the user during the workout
          minimum: 0
          nullable: true
          example: 185
        max_watts:
          type: number
          description: Maximum power output of the user during the workout
          minimum: 0
          nullable: true
          example: 350
        power_samples:
          type: array
          description: Array containing datapoints of the power output of the user
            sampled throughout the workout
          items:
            $ref: '#/components/schemas/PowerSample'
    ElevationSummary:
      type: object
      properties:
        gain_planned_meters:
          type: number
          description: Elevation gain of the user throughout the workout - this includes
            all elevation gain, and does _not_ represent net gain
          minimum: 0
          nullable: true
          example: 500
        loss_actual_meters:
          type: number
          description: Elevation loss of the user throughout the workout
          minimum: 0
          nullable: true
          example: 450
        max_meters:
          type: number
          description: Maximum elevation of the user during the workout
          nullable: true
          example: 1200
        min_meters:
          type: number
          description: Minimum elevation of the user during the workout
          nullable: true
          example: 800
        gain_actual_meters:
          type: number
          description: Planned elevation gain for the workout
          minimum: 0
          nullable: true
          example: 550
        avg_meters:
          type: number
          description: Average elevation of the user throughout the workout
          nullable: true
          example: 950
    SwimmingSummary:
      type: object
      properties:
        num_laps:
          type: integer
          description: Total number of swimming laps performed during the workout
          minimum: 0
          nullable: true
          example: 20
        num_strokes:
          type: integer
          description: Total number of swimming strokes performed during the workout
          minimum: 0
          nullable: true
          example: 500
        pool_length_meters:
          type: integer
          description: Pool length for associated with the workout
          minimum: 0
          nullable: true
          example: 25
    DistanceDataSummary:
      type: object
      properties:
        distance_meters:
          type: number
          description: Total distance covered by the user throughout the workout
          nullable: true
          example: 5000
        elevation:
          description: Average elevation of the user throughout the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/ElevationSummary'
        steps:
          type: integer
          description: Total number of steps performed during the workout
          nullable: true
          example: 6500
        floors_climbed:
          type: integer
          description: Total number of elevation gain in floors climbed equivalent
            throughout the workout, as determined by the fitness data provider
          minimum: 0
          nullable: true
          example: 10
        swimming:
          description: Summary information of the user's swimming statistics for the
            workout, if applicable
          type: object
          allOf:
          - $ref: '#/components/schemas/SwimmingSummary'
    ElevationSample:
      type: object
      properties:
        elev_meters:
          type: number
          description: User's altitude at a given point in time
          nullable: true
          example: 925
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 1200
    DistanceSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        distance_meters:
          type: number
          description: Cumulative distance covered up to associated timestamp, since
            the start of the payload
          nullable: true
          example: 2500
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 900
    FloorsClimbedSample:
      type: object
      properties:
        floors_climbed:
          type: number
          description: Cumulative number of elevation gain measured in floors climbed
            up to associated timestamp, since the start of the payload
          nullable: true
          example: 5
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 600
    StepSample:
      type: object
      properties:
        steps:
          type: number
          description: Cumulative steps performed up to associated timestamp, since
            the start of the payload
          nullable: true
          example: 3250
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 900
    DistanceDataDetailed:
      type: object
      properties:
        elevation_samples:
          type: array
          description: Array of detailed samples of elevation throughout the workout
          items:
            $ref: '#/components/schemas/ElevationSample'
        distance_samples:
          type: array
          description: Array of detailed samples of distance covered throughout the
            workout
          items:
            $ref: '#/components/schemas/DistanceSample'
        floors_climbed_samples:
          type: array
          description: Array of detailed samples of floors climbed throughout the
            workout, as determined by the fitness data provider
          items:
            $ref: '#/components/schemas/FloorsClimbedSample'
        step_samples:
          type: array
          description: Array of detailed samples of steps performed throughout the
            workout
          items:
            $ref: '#/components/schemas/StepSample'
    DistanceData:
      type: object
      properties:
        summary:
          description: Object containing summary information related to distance covered
            throughout the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/DistanceDataSummary'
        detailed:
          description: Object containing detailed distance information - this may
            included second-by-second samples
          type: object
          allOf:
          - $ref: '#/components/schemas/DistanceDataDetailed'
    HeartRateZone:
      type: object
      properties:
        zone:
          nullable: false
          type: string
          enum:
          - ZONE_0
          - ZONE_1
          - ZONE_2
          - ZONE_3
          - ZONE_4
          - ZONE_5
          - OTHER
          example: ZONE_2
        start_percentage:
          type: number
          description: Start percentage (based off user's max HR) of the HR zone
          minimum: 0
          maximum: 100
          nullable: true
          example: 60
        end_percentage:
          type: number
          description: End percentage (based off user's max HR) of the HR zone
          minimum: 0
          maximum: 100
          nullable: true
          example: 70
        duration_seconds:
          type: number
          description: Duration spent in the hart rate zone
          nullable: true
          example: 300
        name:
          type: string
          description: Name of the associated heart rate zone
          nullable: true
          example: Aerobic
    HeartRateDataSummary:
      type: object
      properties:
        resting_hr_bpm:
          type: number
          description: Resting HeartRate of the user, as determined by the fitness
            data provider
          minimum: 0
          nullable: true
          example: 65
        avg_hr_bpm:
          type: number
          description: Average HeartRate of the user during the workout
          minimum: 0
          nullable: true
          example: 145
        max_hr_bpm:
          type: number
          description: Maximum HeartRate of the user during the workout
          minimum: 0
          nullable: true
          example: 180
        avg_hrv_sdnn:
          type: number
          description: Average HeartRate Variability of the user during the workout,
            computed using SDNN
          nullable: true
          example: 45.5
        hr_zone_data:
          type: array
          description: Array of time spent in various HR zones throughout the workout
          items:
            $ref: '#/components/schemas/HeartRateZone'
        min_hr_bpm:
          type: number
          description: Minimum HeartRate of the user during the workout
          minimum: 0
          nullable: true
          example: 85
        avg_hrv_rmssd:
          type: number
          description: Average HeartRate Variability of the user during the workout,
            computed using RMSSD
          nullable: true
          example: 35.2
        user_max_hr_bpm:
          type: number
          description: User's maximum HeartRate based on their age, and other factors
            as determined by the fitness data provider
          nullable: true
          example: 190
    HeartRateVariabilityDataSampleRMSSD:
      type: object
      properties:
        hrv_rmssd:
          type: number
          description: User's Heart Rate Variability, computed using RMSSD
          nullable: true
          example: 42.1
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    HeartRateDataSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        bpm:
          type: number
          description: User's heart rate in bpm
          nullable: true
          example: 142
    HeartRateVariabilityDataSampleSDNN:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        hrv_sdnn:
          type: number
          description: User's Heart Rate Variability, computed using SDNN
          nullable: true
          example: 48.3
    HeartRateDataDetailed:
      type: object
      properties:
        hrv_samples_rmssd:
          type: array
          description: Array of HeartRate Variability data samples recorded for the
            user during the workout, computed using RMSSD
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleRMSSD'
        hr_samples:
          type: array
          description: Array of HeartRate data samples recorded for the user during
            the workout
          items:
            $ref: '#/components/schemas/HeartRateDataSample'
        hrv_samples_sdnn:
          type: array
          description: Array of HeartRate Variability data samples recorded for the
            user during the workout, computed using SDNN
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleSDNN'
    HeartRateData:
      type: object
      properties:
        summary:
          description: Object containing summary heart rate information for the associated
            workout
          type: object
          allOf:
          - $ref: '#/components/schemas/HeartRateDataSummary'
        detailed:
          description: Object containing detailed heart rate information for the associated
            workout
          type: object
          allOf:
          - $ref: '#/components/schemas/HeartRateDataDetailed'
    TSSSample:
      type: object
      properties:
        intensity_factor_planned:
          type: number
          description: Planned
          nullable: true
          example: 0.85
        intensity_factor_actual:
          type: number
          description: Ratio of Normalized Power to Functional Threshold Power (FTP).
            IF takes into account differences in fitness within or between individuals
          nullable: true
          example: 0.82
        normalized_power_watts:
          type: number
          description: Adjusted Power calculated using an algorithm that into account
            the variance between a steady workout and a fluctuating workout. It measures
            the true physiological demands of a training session. It considers both
            rapid changes in intensity, as well as critical responses in the body
            associated with those changes.
          nullable: true
          example: 225
        planned:
          type: number
          description: Planned Training Stress Score (TSS)
          nullable: true
          example: 85
        actual:
          type: number
          description: Achieved Training Stress Score (TSS)
          nullable: true
          example: 82
        method:
          type: string
          description: Method of measurement of the Training Stress Score
          example: HeartRate
          nullable: true
    TSSData:
      type: object
      properties:
        TSS_samples:
          type: array
          description: Array of TSS information sampled throughout the workout
          items:
            $ref: '#/components/schemas/TSSSample'
    CalorieSample:
      type: object
      properties:
        calories:
          type: number
          description: Cumulative calories burned up to associated timestamp, since
            the start of the payload
          nullable: true
          example: 450
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        timer_duration_seconds:
          type: number
          description: Time elapsed since the start of the workout, subtracting time
            during which the recording was paused
          nullable: true
          example: 1800
    CaloriesData:
      type: object
      properties:
        BMR_calories:
          type: number
          description: BMR of the user on the specific day, which contributes to the
            total calories burned during the workout
          minimum: 0
          nullable: true
          example: 1800
        net_activity_calories:
          type: number
          description: Net calorie burn coming just from the workout itself, excluding
            BMR
          minimum: 0
          nullable: true
          example: 450
        total_burned_calories:
          type: number
          description: Total number of calories burned during the workout, including
            BMR
          minimum: 0
          nullable: true
          example: 2250
        net_intake_calories:
          type: number
          description: Net intake of calories during the period of the workout
          minimum: 0
          nullable: true
          example: 200
        calorie_samples:
          type: array
          description: Detailed samples of cumulative calories burned at various timestamps
            over the period of the workout
          items:
            $ref: '#/components/schemas/CalorieSample'
    ActivityMetadata:
      type: object
      properties:
        state:
          type: string
          description: The State in which the workout was performed
          nullable: true
          example: California
        timestamp_localization:
          oneOf:
            - type: integer
              enum: [0]
              description: UTC timestamps with +00:00 offset. This avoids "Z" notation to ensure compatibility across parsers.
            - type: integer 
              enum: [1]
              description: LOCAL timestamps that may include or exclude the timezone, following ISO8601.
          description: Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC
          nullable: false
          example: 0
        country:
          type: string
          description: The Country in which the workout was performed
          nullable: true
          example: United States
        start_time:
          type: string
          description: The start time of the associated workout, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        summary_id:
          type: string
          description: A unique identifier for the workout - note that this is unique
            for the given user, and may not be globally unique
          nullable: true
          example: 123e4567-e89b-12d3-a456-426614174000
        city:
          type: string
          description: The City in which the workout was performed
          nullable: true
          example: San Francisco
        type:
          description: The type of activity performed for the associated workout
          nullable: false
          type: string
          enum:
          - IN_VEHICLE
          - BIKING
          - STILL
          - UNKNOWN
          - TILTING
          - WALKING
          - RUNNING
          - AEROBICS
          - BADMINTON
          - BASEBALL
          - BASKETBALL
          - BIATHLON
          - HANDBIKING
          - MOUNTAIN_BIKING
          - ROAD_BIKING
          - SPINNING
          - STATIONARY_BIKING
          - UTILITY_BIKING
          - BOXING
          - CALISTHENICS
          - CIRCUIT_TRAINING
          - CRICKET
          - DANCING
          - ELLIPTICAL
          - FENCING
          - AMERICAN_FOOTBALL
          - AUSTRALIAN_FOOTBALL
          - ENGLISH_FOOTBALL
          - FRISBEE
          - GARDENING
          - GOLF
          - GYMNASTICS
          - HANDBALL
          - HIKING
          - HOCKEY
          - HORSEBACK_RIDING
          - HOUSEWORK
          - JUMPING_ROPE
          - KAYAKING
          - KETTLEBELL_TRAINING
          - KICKBOXING
          - KITESURFING
          - MARTIAL_ARTS
          - MEDITATION
          - MIXED_MARTIAL_ARTS
          - P90X_EXERCISES
          - PARAGLIDING
          - PILATES
          - POLO
          - RACQUETBALL
          - ROCK_CLIMBING
          - ROWING
          - ROWING_MACHINE
          - RUGBY
          - JOGGING
          - RUNNING_ON_SAND
          - TREADMILL_RUNNING
          - SAILING
          - SCUBA_DIVING
          - SKATEBOARDING
          - SKATING
          - CROSS_SKATING
          - INDOOR_ROLLERBLADING
          - SKIING
          - BACK_COUNTRY_SKIING
          - CROSS_COUNTRY_SKIING
          - DOWNHILL_SKIING
          - KITE_SKIING
          - ROLLER_SKIING
          - SLEDDING
          - SNOWBOARDING
          - SNOWMOBILE
          - SNOWSHOEING
          - SQUASH
          - STAIR_CLIMBING
          - STAIR_CLIMBING_MACHINE
          - STAND_UP_PADDLEBOARDING
          - STRENGTH_TRAINING
          - SURFING
          - SWIMMING
          - SWIMMING_SWIMMING_POOL
          - SWIMMING_OPEN_WATER
          - TABLE_TENNIS
          - TEAM_SPORTS
          - TENNIS
          - TREADMILL
          - VOLLEYBALL
          - VOLLEYBALL_BEACH
          - VOLLEYBALL_INDOOR
          - WAKEBOARDING
          - WALKING_FITNESS
          - NORDIC_WALKING
          - WALKING_TREADMILL
          - WATERPOLO
          - WEIGHTLIFTING
          - WHEELCHAIR
          - WINDSURFING
          - YOGA
          - ZUMBA
          - DIVING
          - ERGOMETER
          - ICE_SKATING
          - INDOOR_SKATING
          - CURLING
          - OTHER
          - CROSSFIT
          - HIIT
          - INTERVAL_TRAINING
          - WALKING_STROLLER
          - ELEVATOR
          - ESCALATOR
          - ARCHERY
          - SOFTBALL
          - GUIDED_BREATHING
          - CARDIO_TRAINING
          - LACROSSE
          - STRETCHING
          - TRIATHLON
          - INLINE_SKATING
          - SKY_DIVING
          - PADDLING
          - MOUNTAINEERING
          - FISHING
          - WATER_SKIING
          - INDOOR_RUNNING
          example: RUNNING
        end_time:
          type: string
          description: The end time of the associated workout, in ISO8601 format with
            microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-10-28T10:00:00.000000+01:00'
          format: date-time
          nullable: true
        name:
          type: string
          description: The name - either user-entered or given by the fitness data
            provider - of the associated workout
          nullable: true
          example: Morning Run
        upload_type:
          description: The upload type for the associated workout, providing information
            on whether this was an automatic workout or user-entered
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - AUTOMATIC
          - MANUAL
          - UPDATE
          - DELETE
          - PENDING
    WorkData:
      type: object
      properties:
        work_kilojoules:
          type: number
          description: Total work output of the user for the workout
          nullable: true
          example: 450.5
    Activity:
      type: object
      properties:
        active_durations_data:
          description: Number of minutes spent at various intensities during the workout,
            as reported by the Fitness Data provider
          type: object
          allOf:
          - $ref: '#/components/schemas/ActiveDurationsData'
        lap_data:
          description: Object containing information on data for each lap performed
            by the user - mostly relates to track & field running activities, and
            swimming activities
          type: object
          allOf:
          - $ref: '#/components/schemas/LapData'
        cheat_detection:
          type: number
          description: Cheat detection flag
          nullable: true
          example: 0
        polyline_map_data:
          description: Object containing polyline-representation map data, plotting
            the user's trajectory throughout the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/PolylineMapData'
        strain_data:
          description: Object containing information on the cardiovascular strain
            imposed on the user during the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/StrainData'
        position_data:
          description: Object containing information on the user's position throughout
            the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/PositionData'
        movement_data:
          description: Object containing information on the user's movement throughout
            the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/MovementData'
        oxygen_data:
          description: Object containing information on oxygen-related metrics for
            the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/OxygenData'
        device_data:
          description: Object containing information on the device which recorded
            the specific workout
          type: object
          allOf:
          - $ref: '#/components/schemas/DeviceData'
        energy_data:
          description: Object containing information on the energy expended by the
            user during the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/EnergyData'
        MET_data:
          description: Object containing information on the Metabolic Equivalent of
            Task for the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/METData'
        power_data:
          description: Object containing information on the power generated by the
            user during the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/PowerData'
        distance_data:
          description: Object containing information related to distance covered during
            the associated workout
          type: object
          allOf:
          - $ref: '#/components/schemas/DistanceData'
        heart_rate_data:
          description: Object containing heartrate-related information for the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/HeartRateData'
        TSS_data:
          description: Object containing information on the stress put on the user's
            body from a workout
          type: object
          allOf:
          - $ref: '#/components/schemas/TSSData'
        calories_data:
          description: Object containing calorie-related information for the user
            during the specific workout
          type: object
          allOf:
          - $ref: '#/components/schemas/CaloriesData'
        metadata:
          description: Object containing workout metadata
          type: object
          allOf:
          - $ref: '#/components/schemas/ActivityMetadata'
        work_data:
          description: Object containing information on the work output of the user
            during the workout
          type: object
          allOf:
          - $ref: '#/components/schemas/WorkData'
    ActivitySample:
      type: object
      properties:
        swimming_strokes:
          type: integer
          default: null
          nullable: true
          example: 25
        calories:
          type: number
          default: null
          nullable: true
          example: 150.5
        spo2_percentage:
          type: number
          default: null
          nullable: true
          example: 98.5
        vo2_max_volume_ml_per_min_per_kg:
          type: number
          default: null
          nullable: true
          example: 45.2
        rep_count:
          type: integer
          default: null
          nullable: true
          example: 12
        vo2_volume_ml_per_min_per_kg:
          type: number
          default: null
          nullable: true
          example: 42.8
        speed_in_meters_per_seconds:
          type: number
          default: null
          nullable: true
          example: 3.5
        active_duration_seconds:
          type: integer
          default: null
          nullable: true
          example: 3600
        heartrate_bpm:
          type: number
          default: null
          nullable: true
          example: 145
        swimming_laps:
          type: number
          default: null
          nullable: true
          example: 10
        altitude_in_meters:
          type: number
          default: null
          nullable: true
          example: 250.5
        status:
          type: string
          default: null
          nullable: true
          example: "active"
        distance_in_km:
          type: number
          default: null
          nullable: true
          example: 5.2
        timestamp:
          type: string
          default: null
          nullable: true
          example: "2023-08-15T14:30:00.000000+00:00"
        resting_duration_seconds:
          type: integer
          default: null
          nullable: true
          example: 300
        coordinates_lat_lng:
          type: array
          items:
            type: number
    Athlete:
      type: object
      properties:
        gender:
          type: string
          description: User's gender
          nullable: true
          example: "male"
        state:
          type: string
          description: User's state of residence
          example: California
          nullable: true
        bio:
          type: string
          description: User's bio - a short description they display on their profile
          nullable: true
          example: "Passionate runner and cyclist"
        age:
          type: string
          description: User's age
          nullable: true
          example: "28"
        country:
          type: string
          description: User's country of residence
          nullable: true
          example: "United States"
        sex:
          type: string
          description: User's sex
          nullable: true
          example: "male"
        date_of_birth:
          type: string
          description: User's date of birth, in ISO8601 format
          example: '1999-11-23'
          format: date
          nullable: true
        city:
          type: string
          description: User's city of residence
          nullable: true
          example: "San Francisco"
        account_creation_date:
          type: string
          description: User's account creation date
          nullable: true
          example: "2023-01-15"
        email:
          type: string
          description: User's email
          nullable: true
          example: "user@example.com"
        last_name:
          type: string
          description: User's last name
          nullable: true
          example: "Smith"
        first_name:
          type: string
          description: User's first name
          nullable: true
          example: "John"
    AthleteCollection:
      type: object
      properties:
        athlete:
          description: Object containing the user's information
          type: object
          allOf:
          - $ref: '#/components/schemas/Athlete'
        type:
          type: string
          nullable: true
          example: "athlete"
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
    MeasurementDataSample:
      type: object
      properties:
        weight_kg:
          type: number
          description: User's body weight
          nullable: true
          example: 75.5
        bodyfat_percentage:
          type: number
          description: User's body far percentage
          minimum: 0
          maximum: 100
          nullable: true
          example: 18.5
        BMI:
          type: number
          description: User's Body Mass Index (BMI)
          nullable: true
          example: 22.4
        water_percentage:
          type: number
          description: Total amount of fluid in the user's body
          minimum: 0
          maximum: 100
          nullable: true
          example: 60.5
        measurement_time:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        lean_mass_g:
          type: number
          description: Total lean mass of the user - calculated as the difference
            between total body weight and body fat weight
          nullable: true
          example: 61500
        estimated_fitness_age:
          type: string
          description: Estimate of how fit the user is compared to their actual age,
            as measured by the device
          nullable: true
          example: "25"
        skin_fold_mm:
          type: number
          description: User's skin fold measurement
          nullable: true
          example: 12.5
        height_cm:
          type: number
          description: User's height
          nullable: true
          example: 178
        bone_mass_g:
          type: number
          description: User's total bone mass
          nullable: true
          example: 3200
        insulin_units:
          type: number
          description: Quantity of insulin administered to the user
          nullable: true
          example: 10.5
        muscle_mass_g:
          type: number
          description: User's total muscle mass (i.e. skeletal muscle mass)
          nullable: true
          example: 35000
        BMR:
          type: number
          description: User's Basal Metabolic Rate - minimum amount of calories that
            a person's body needs to perform necessary functions
          nullable: true
          example: 1800
        urine_color:
          type: string
          description: Color of the user's urine
          nullable: true
          example: "pale yellow"
        RMR:
          type: number
          description: User's Resting Metabolic Rate - amount of energy that a person's
            body needs to function while at rest. RMR accounts for additional low-effort
            daily activities on top of basic body functions
          nullable: true
          example: 2000
        insulin_type:
          type: string
          description: Type of insulin administered to the user
          nullable: true
          example: "rapid-acting"
    MeasurementsData:
      type: object
      properties:
        measurements:
          type: array
          description: List of body metrics & measurements taken throughout the associated
            day
          items:
            $ref: '#/components/schemas/MeasurementDataSample'
    KetoneDataSample:
      type: object
      properties:
        ketone_mg_per_dL:
          type: number
          description: Ketone in mg per dL
          nullable: true
          example: 1.5
        sample_type:
          description: Flag indicating the ketone sample type (e.g. blood, breath,
            urine)
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - BLOOD
          - BREATH
          - URINE
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    KetoneData:
      type: object
      properties:
        ketone_samples:
          type: array
          description: List of ketone data sampled through the day.
          items:
            $ref: '#/components/schemas/KetoneDataSample'
    HydrationData:
      type: object
      properties:
        hydration_amount_samples:
          type: number
          description: User's body water content
          nullable: true
          example: 65.5
        day_total_water_consumption_ml:
          type: number
          description: User's total water consumption throughout the day
          nullable: true
          example: 2500
    DailyHeartRateDataSummary:
      type: object
      properties:
        resting_hr_bpm:
          type: number
          description: Resting HeartRate of the user, as determined by the fitness
            data provider
          minimum: 0
          nullable: true
          example: 60
        avg_hr_bpm:
          type: number
          description: Average HeartRate of the user during the day
          minimum: 0
          nullable: true
          example: 75
        max_hr_bpm:
          type: number
          description: Maximum HeartRate of the user during the day
          minimum: 0
          nullable: true
          example: 180
        avg_hrv_sdnn:
          type: number
          description: Average HeartRate Variability of the user during the day, computed
            using SDNN
          nullable: true
          example: 45.5
        hr_zone_data:
          type: array
          description: Array of time spent in various HR zones throughout the day
          items:
            $ref: '#/components/schemas/HeartRateZone'
        min_hr_bpm:
          type: number
          description: Minimum HeartRate of the user during the day
          minimum: 0
          nullable: true
          example: 45
        avg_hrv_rmssd:
          type: number
          description: Average HeartRate Variability of the user during the day, computed
            using RMSSD
          nullable: true
          example: 42.8
        user_max_hr_bpm:
          type: number
          description: User's maximum HeartRate based on their age, and other factors
            as determined by the fitness data provider
          nullable: true
          example: 190
    DailyHeartRateDataDetailed:
      type: object
      properties:
        hrv_samples_rmssd:
          type: array
          description: Array of HeartRate Variability data samples recorded for the
            user during the day, computed using RMSSD
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleRMSSD'
        hr_samples:
          type: array
          description: Array of HeartRate data samples recorded for the user during
            the day
          items:
            $ref: '#/components/schemas/HeartRateDataSample'
        hrv_samples_sdnn:
          type: array
          description: Array of HeartRate Variability data samples recorded for the
            user during the day, computed using SDNN
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleSDNN'
    DailyHeartRateData:
      type: object
      properties:
        summary:
          description: Object containing summary information for the associated day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyHeartRateDataSummary'
        detailed:
          description: Object containing detailed heart rate information for the associated
            day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyHeartRateDataDetailed'
    PulseVelocitySample:
      type: object
      properties:
        pulse_wave_velocity_meters_per_second:
          type: number
          description: User's Pulse Wave Velocity measurement -  velocity at which
            the blood pressure pulse propagates through the circulatory system
          nullable: true
          example: 7.2
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    AFibClassificationSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        afib_classification:
          type: string
          description: Flag indicating the atrial fibrillation classification of the
            individual
          nullable: true
          example: "NORMAL"
    RawECGSample:
      type: object
      properties:
        potential_uV:
          type: number
          description: Potential uV in the RawECG Sample
          nullable: true
          example: 1250.5
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    ECGReading:
      type: object
      properties:
        start_timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        avg_hr_bpm:
          type: number
          description: User's average heart rate throughout the day
          nullable: true
          example: 72.5
        afib_classfication:
          type: integer
          description: User's afib classification throught the day
          nullable: true
          example: 1
        raw_signal:
          type: array
          description: List of raw ECG readings sampled through the day.
          items:
            $ref: '#/components/schemas/RawECGSample'
    BodyHeartData:
      type: object
      properties:
        heart_rate_data:
          description: ''
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyHeartRateData'
        pulse_wave_velocity_samples:
          type: array
          description: List of Pulse Wave Velocity measurements sampled throughout
            the day. This represents a measurement of arterial stiffness that is an
            independent predictor of cardiovascular risk
          items:
            $ref: '#/components/schemas/PulseVelocitySample'
        afib_classification_samples:
          type: array
          description: List of Atrial Fibrillation classification measurements sampled
            through the day.
          items:
            $ref: '#/components/schemas/AFibClassificationSample'
        ecg_signal:
          type: array
          description: List of ECGReadings sampled through the day.
          items:
            $ref: '#/components/schemas/ECGReading'
        rr_interval_samples:
          type: array
          description: List of RR Interval samples throughout the day
          items:
            $ref: '#/components/schemas/RRIntervalSample'
    GlucoseDataSample:
      type: object
      properties:
        glucose_level_flag:
          description: Flag indicating state of user's blood glucose level
          nullable: false
          type: string
          enum:
          - NORMAL
          - HIGH
          - LOW
          example: "NORMAL"
        trend_arrow:
          description: Flag indicating the current trend in the user's blood glucose
            level (e.g. rising, constant, falling)
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - FALLING_QUICKLY
          - FALLING
          - FLAT
          - RISING
          - RISING_QUICKLY
          example: "FLAT"
        blood_glucose_mg_per_dL:
          type: integer
          description: User's blood glucose reading
          nullable: true
          example: 95
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    GlucoseData:
      type: object
      properties:
        detailed_blood_glucose_samples:
          type: array
          description: List of blood glucose readings sampled throughout the day -
            this represents additional data points, potentially at higher frequency
            from the ones in blood_glucose_samples, which may come at a cost of reduced
            accuracy
          items:
            $ref: '#/components/schemas/GlucoseDataSample'
        blood_glucose_samples:
          type: array
          description: List of blood glucose readings sampled throughout the day
          items:
            $ref: '#/components/schemas/GlucoseDataSample'
        day_avg_blood_glucose_mg_per_dL:
          type: number
          description: User's average glucose level throughout the day
          nullable: true
          example: 92.5
    BodyMetadata:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h before end_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        end_time:
          type: string
          description: The end time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h after start_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '2022-10-28T10:00:00.000000+01:00'
          format: date-time
          nullable: true
        timestamp_localization:
          oneOf:
            - type: integer
              enum: [0]
              description: UTC timestamps with +00:00 offset. This avoids "Z" notation to ensure compatibility across parsers.
            - type: integer 
              enum: [1]
              description: LOCAL timestamps that may include or exclude the timezone, following ISO8601.
          description: Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC
          nullable: false
          example: 0
    BloodPressureSample:
      type: object
      properties:
        diastolic_bp:
          type: number
          description: User's diastolic blood pressure, in mmHg
          nullable: true
          example: 80.5
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        systolic_bp:
          type: number
          description: User's systolic blood pressure, in mmHg
          nullable: true
          example: 120.5
    BloodPressureData:
      type: object
      properties:
        blood_pressure_samples:
          type: array
          description: List of Blood Pressure measurements sampled throughout the
            day
          items:
            $ref: '#/components/schemas/BloodPressureSample'
    TemperatureSample:
      type: object
      properties:
        temperature_celsius:
          type: number
          description: ''
          nullable: true
          example: 37.2
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    TemperatureData:
      type: object
      properties:
        body_temperature_samples:
          type: array
          description: List of body temperature measurements sampled throughout the
            day
          items:
            $ref: '#/components/schemas/TemperatureSample'
        skin_temperature_samples:
          type: array
          description: List of skin temperature measurements sampled throughout the
            day
          items:
            $ref: '#/components/schemas/TemperatureSample'
        ambient_temperature_samples:
          type: array
          description: List of ambient temperature measurements sampled throughout
            the day
          items:
            $ref: '#/components/schemas/TemperatureSample'
    Body:
      type: object
      properties:
        measurements_data:
          description: Object containing information on body measurements for the
            day
          type: object
          allOf:
          - $ref: '#/components/schemas/MeasurementsData'
        ketone_data:
          description: Object containing information on user's ketone data for the
            day
          type: object
          allOf:
          - $ref: '#/components/schemas/KetoneData'
        hydration_data:
          description: Object containing information on user's hydration (both internal
            & consumption of water) for the day
          type: object
          allOf:
          - $ref: '#/components/schemas/HydrationData'
        device_data:
          description: Object containing information on the device which recorded
            data for the payload
          type: object
          allOf:
          - $ref: '#/components/schemas/DeviceData'
        heart_data:
          description: Object containing information on user's heart metrics
          type: object
          allOf:
          - $ref: '#/components/schemas/BodyHeartData'
        oxygen_data:
          description: Object containing information on user's oxygen-related data
          type: object
          allOf:
          - $ref: '#/components/schemas/OxygenData'
        glucose_data:
          description: Object containing information on user's blood glucose for the
            day
          type: object
          allOf:
          - $ref: '#/components/schemas/GlucoseData'
        metadata:
          description: Object containing daily summary metadata
          type: object
          allOf:
          - $ref: '#/components/schemas/BodyMetadata'
        blood_pressure_data:
          description: Object containing information on user's Blood Pressure
          type: object
          allOf:
          - $ref: '#/components/schemas/BloodPressureData'
        temperature_data:
          description: Object containing temperature information (core, skin, ambient)
            during the day
          type: object
          allOf:
          - $ref: '#/components/schemas/TemperatureData'
    DailyActiveDurationsData:
      type: object
      properties:
        activity_levels_samples:
          type: array
          description: Array of detailed samples of the intensity the user was in
            at various points during the day
          items:
            $ref: '#/components/schemas/ActivityLevelSample'
        num_continuous_inactive_periods:
          type: integer
          description: Maximum number of continuous periods spent in an inactive state
            during the day
          minimum: 0
          nullable: true
          example: 3
        inactivity_seconds:
          type: number
          description: Total number of seconds spent in an inactive state during the
            day
          minimum: 0
          nullable: true
          example: 28800
        vigorous_intensity_seconds:
          type: number
          description: Total number of seconds spent in a state of vigorous intensity
            during the day
          minimum: 0
          nullable: true
          example: 1800
        activity_seconds:
          type: number
          description: Total number of seconds spent in an active state during the
            day
          minimum: 0
          nullable: true
          example: 14400
        low_intensity_seconds:
          type: number
          description: Total number of seconds spent in a low intensity state during
            the day
          minimum: 0
          nullable: true
          example: 7200
        rest_seconds:
          type: number
          description: Total number of seconds spent resting during the day
          minimum: 0
          nullable: true
          example: 28800
        moderate_intensity_seconds:
          type: number
          description: Total number of seconds spent in a moderate intensity state
            during the day
          minimum: 0
          nullable: true
          example: 5400
    Scores:
      type: object
      properties:
        sleep:
          type: number
          description: Sleep score for the given day, pertaining to the previous night's
            sleep
          minimum: 0
          maximum: 100
          nullable: true
          example: 85
        recovery:
          type: number
          description: Recovery score for the given day
          minimum: 0
          maximum: 100
          nullable: true
          example: 78
        activity:
          type: number
          description: Activity score for the given day
          minimum: 0
          maximum: 100
          nullable: true
          example: 92
    DailyStrainData:
      type: object
      properties:
        strain_level:
          type: number
          description: Object containing information on the cardiovascular strain
            imposed on the user during the day.
          nullable: true
          example: 14.5
    StressData:
      type: object
      properties:
        avg_stress_level:
          type: number
          description: Average stress level for the day
          nullable: true
          example: 45.5
        activity_stress_duration_seconds:
          type: number
          description: Total number of seconds spent in a stressed state while active
            during the day
          minimum: 0
          nullable: true
          example: 3600
        low_stress_duration_seconds:
          type: number
          description: Total number of seconds spent in a state of low stress during
            the day
          minimum: 0
          nullable: true
          example: 28800
        max_stress_level:
          type: number
          description: Maximum stress level recorded during the day
          nullable: true
          example: 85
        medium_stress_duration_seconds:
          type: number
          description: Total number of seconds spent in a state of medium stress during
            the day
          minimum: 0
          nullable: true
          example: 7200
        samples:
          type: array
          description: Array of stress level data points sampled throughout the day
          items:
            $ref: '#/components/schemas/StepSample'
        rest_stress_duration_seconds:
          type: number
          description: Total number of seconds spent in a stressed state while at
            rest during the day
          minimum: 0
          nullable: true
          example: 1800
        high_stress_duration_seconds:
          type: number
          description: Total number of seconds spent in a state of high stress during
            the day
          minimum: 0
          nullable: true
          example: 900
        stress_duration_seconds:
          type: number
          description: Total number of seconds spent in a stressed state while at
            rest during the day
          minimum: 0
          nullable: true
          example: 5400
    TagEntry:
      type: object
      properties:
        notes:
          type: string
          description: User-input notes associated with the given tag
          nullable: true
          example: "Felt refreshed after"
        tag_name:
          type: string
          description: Tag name, representing a certain event associated with the
            user's day
          example: hot_shower
          nullable: true
        timestamp:
          type: string
          description: Time with which the tag is associated, in ISO8601 format with
            microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    TagData:
      type: object
      properties:
        tags:
          type: array
          description: Array of user-entered tags for the day
          items:
            $ref: '#/components/schemas/TagEntry'
    DailyMETData:
      type: object
      properties:
        num_inactive_minutes:
          type: number
          description: Number of minutes spent in state of Inactivity during the day
            - based off MET scale
          minimum: 0
          nullable: true
          example: 480
        MET_samples:
          type: array
          description: An array of Metabolic Equivalent Time samples, as calculated
            by the user's wearable
          items:
            $ref: '#/components/schemas/METSample'
        num_low_intensity_minutes:
          type: number
          description: Number of minutes spent in Low Intensity during the day - based
            off MET scale
          minimum: 0
          nullable: true
          example: 720
        num_moderate_intensity_minutes:
          type: number
          description: Number of minutes spent in Moderate Intensity during the day
            - based off MET scale
          minimum: 0
          nullable: true
          example: 180
        avg_level:
          type: number
          description: The average MET level of the activity
          nullable: true
          example: 1.8
        num_high_intensity_minutes:
          type: number
          description: Number of minutes spent in High Intensity during the day -
            based off MET scale
          minimum: 0
          nullable: true
          example: 60
    DailyDistanceDataDetailed:
      type: object
      properties:
        elevation_samples:
          type: array
          description: Array of detailed samples of elevation throughout the day
          items:
            $ref: '#/components/schemas/ElevationSample'
        distance_samples:
          type: array
          description: Array of detailed samples of distance covered throughout the
            day
          items:
            $ref: '#/components/schemas/DistanceSample'
        floors_climbed_samples:
          type: array
          description: Array of detailed samples of floors climbed throughout the
            day, as determined by the fitness data provider
          items:
            $ref: '#/components/schemas/FloorsClimbedSample'
        step_samples:
          type: array
          description: Array of detailed samples of steps performed throughout the
            day
          items:
            $ref: '#/components/schemas/StepSample'
    DailyElevationSummary:
      type: object
      properties:
        gain_planned_meters:
          type: number
          description: Elevation gain of the user throughout the day - this includes
            all elevation gain, and does _not_ represent net gain
          minimum: 0
          nullable: true
          example: 150
        loss_actual_meters:
          type: number
          description: Elevation loss of the user throughout the day
          minimum: 0
          nullable: true
          example: 120
        max_meters:
          type: number
          description: Maximum elevation of the user during the day
          nullable: true
          example: 450
        min_meters:
          type: number
          description: Minimum elevation of the user during the day
          nullable: true
          example: 300
        gain_actual_meters:
          type: number
          description: Planned elevation gain for the day
          minimum: 0
          nullable: true
          example: 130
        avg_meters:
          type: number
          description: Average elevation of the user throughout the day
          nullable: true
          example: 375
    DailySwimmingSummary:
      type: object
      properties:
        num_laps:
          type: integer
          description: Total number of swimming laps performed during the day
          minimum: 0
          nullable: true
          example: 20
        num_strokes:
          type: integer
          description: Total number of swimming strokes performed during the day
          minimum: 0
          nullable: true
          example: 500
        pool_length_meters:
          type: integer
          description: Pool length for associated with the day
          minimum: 0
          nullable: true
          example: 25
    DailyDistanceData:
      type: object
      properties:
        detailed:
          description: Object containing detailed distance information - this may
            included second-by-second samples
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyDistanceDataDetailed'
        distance_meters:
          type: number
          description: Total distance covered by the user throughout the day
          nullable: true
          example: 8500
        elevation:
          description: Average elevation of the user throughout the day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyElevationSummary'
        steps:
          type: integer
          description: Total number of steps performed during the day
          nullable: true
          example: 12000
        floors_climbed:
          type: integer
          description: Total number of elevation gain in floors climbed equivalent
            throughout the day, as determined by the fitness data provider
          minimum: 0
          nullable: true
          example: 15
        swimming:
          description: Summary information of the user's swimming statistics for the
            day, if applicable
          type: object
          allOf:
          - $ref: '#/components/schemas/DailySwimmingSummary'
    DailyOxygenData:
      type: object
      properties:
        vo2max_ml_per_min_per_kg:
          type: number
          description: VO2Max for the given user
          nullable: true
          example: 45.5
        avg_saturation_percentage:
          type: number
          description: Average Oxygen Saturation percentage of the user during the
            day (SpO2 or SmO2)
          nullable: true
          example: 98
        vo2_samples:
          type: array
          description: Array of VO2 datapoints sampled throughout the day
          items:
            $ref: '#/components/schemas/Vo2MaxSample'
        saturation_samples:
          type: array
          description: Array of Oxygen Saturation percentage datapoints sampled throughout
            the day
          items:
            $ref: '#/components/schemas/OxygenSaturationSample'
    DailyCaloriesData:
      type: object
      properties:
        BMR_calories:
          type: number
          description: BMR of the user on the specific day, which contributes to the
            total calories burned during the day
          minimum: 0
          nullable: true
          example: 1800
        net_activity_calories:
          type: number
          description: Net calorie burn coming just from exercise, excluding BMR
          minimum: 0
          nullable: true
          example: 500
        total_burned_calories:
          type: number
          description: Total number of calories burned during the day, including BMR
          minimum: 0
          nullable: true
          example: 2300
        net_intake_calories:
          type: number
          description: Net intake of calories during the period of the day
          minimum: 0
          nullable: true
          example: 2000
        calorie_samples:
          type: array
          description: Detailed samples of cumulative calories burned at various timestamps
            over the period of the day
          items:
            $ref: '#/components/schemas/CalorieSample'
    DailyMetadata:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h before end_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        upload_type:
          description: The upload type for data in the associated day, providing information
            on whether data was automatically uploaded or user-entered. If any data
            point in a day is altered, the day should be classed as manual
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - AUTOMATIC
          - MANUAL
          - UPDATE
          - DELETE
          - PENDING
        end_time:
          type: string
          description: The end time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h after start_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '2022-10-28T10:00:00.000000+01:00'
          format: date-time
          nullable: true
        timestamp_localization:
          oneOf:
            - type: integer
              enum: [0]
              description: UTC timestamps with +00:00 offset. This avoids "Z" notation to ensure compatibility across parsers.
            - type: integer 
              enum: [1]
              description: LOCAL timestamps that may include or exclude the timezone, following ISO8601.
          description: Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC
          nullable: false
          example: 0
    Daily:
      type: object
      properties:
        active_durations_data:
          description: Object containing information related to the time spent in
            different activity intensities during over the day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyActiveDurationsData'
        scores:
          description: Scores for the user's performance on different metrics for
            the given day, as calculated by the fitness data provider
          type: object
          allOf:
          - $ref: '#/components/schemas/Scores'
        strain_data:
          description: Object containing information on the strain put on the user's
            body over a day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyStrainData'
        stress_data:
          description: Object containing information on the stress put on the user
            over a day
          type: object
          allOf:
          - $ref: '#/components/schemas/StressData'
        device_data:
          description: Object containing information on the device which recorded
            data for the day
          type: object
          allOf:
          - $ref: '#/components/schemas/DeviceData'
        tag_data:
          description: Object containing all user-entered or automatically tagged
            events in the day
          type: object
          allOf:
          - $ref: '#/components/schemas/TagData'
        heart_rate_data:
          description: Object containing heartrate-related information for the day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyHeartRateData'
        MET_data:
          description: Object containing information on the Metabolic Equivalent of
            Task for the day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyMETData'
        distance_data:
          description: Object containing information related to distance covered during
            the associated day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyDistanceData'
        oxygen_data:
          description: Object containing information on oxygen-related metrics for
            the day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyOxygenData'
        calories_data:
          description: Object containing calorie-related information for the user
            during the specific day
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyCaloriesData'
        metadata:
          description: Object containing daily summary metadata
          type: object
          allOf:
          - $ref: '#/components/schemas/DailyMetadata'
    MenstruationMetadata:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h before end_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        end_time:
          type: string
          description: The end time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h after start_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '2022-10-28T10:00:00.000000+01:00'
          format: date-time
          nullable: true
        timestamp_localization:
          oneOf:
            - type: integer
              enum: [0]
              description: UTC timestamps with +00:00 offset. This avoids "Z" notation to ensure compatibility across parsers.
            - type: integer 
              enum: [1]
              description: LOCAL timestamps that may include or exclude the timezone, following ISO8601.
          description: Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC
          nullable: false
          example: 0
    MenstruationFlowSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        flow:
          description: Flag indicating the strength of the user's menstrual flow
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - NONE
          - LIGHT
          - MEDIUM
          - HEAVY
          - HAD
    MenstruationData:
      type: object
      properties:
        length_of_current_phase_days:
          type: integer
          description: Length of current phase
          nullable: true
          example: 5
        period_length_days:
          type: integer
          description: Total length of period (i.e. menstrual bleeding)
          nullable: true
          example: 5
        cycle_length_days:
          type: string
          description: Total cycle length
          nullable: true
          example: "28"
        days_until_next_phase:
          type: integer
          description: Number of days to reach the next phase (predicted)
          nullable: true
          example: 23
        is_predicted_cycle:
          type: string
          description: Flag indicating whether associated object is a prediction or
            user-logged information
          nullable: true
          example: "true"
        last_updated_time:
          type: string
          description: Last time when the user recorded information regarding their
            cycle, in ISO8601 format, with microseconds precision
          format: date-time
          example: '2022-12-12T14:03:05.000000-05:00'
          nullable: true
        current_phase:
          type: integer
          description: Phase in associated cycle, (i.e. menstruation, fertile etc)
          nullable: true
          example: 1
        period_start_date:
          type: string
          description: Start date of menstrual cycle, in ISO8601 format
          format: date
          example: '2022-11-28'
          nullable: true
        predicted_cycle_length_days:
          type: integer
          description: Prediction of the cycle's total length
          nullable: true
          example: 28
        menstruation_flow:
          type: array
          description: List of user logs of information related to the strength of
            user's menstrual flow
          items:
            $ref: '#/components/schemas/MenstruationFlowSample'
        day_in_cycle:
          type: integer
          description: Number of day in cycle this object is associated with
          example: 24
          nullable: true
    Menstruation:
      type: object
      properties:
        metadata:
          description: Object containing daily summary metadata
          type: object
          allOf:
          - $ref: '#/components/schemas/MenstruationMetadata'
        menstruation_data:
          description: Object containing information on user's menstruation for a
            given day
          type: object
          allOf:
          - $ref: '#/components/schemas/MenstruationData'
    Micros:
      type: object
      properties:
        iron_mg:
          type: number
          description: Iron content of the associated food(s)
          nullable: true
          example: 8.5
        magnesium_mg:
          type: number
          description: Magnesium content of the associated food(s)
          nullable: true
          example: 320
        vitamin_A_mg:
          type: number
          description: Vitamin A content of the associated food(s)
          nullable: true
          example: 0.9
        vitamin_B12_mg:
          type: number
          description: Vitamin B12 content of the associated food(s)
          nullable: true
          example: 0.0024
        biotin_mg:
          type: number
          description: Biotin content of the associated food(s)
          nullable: true
          example: 0.03
        cystine_g:
          type: number
          description: Cystine content of the associated food(s)
          nullable: true
          example: 0.3
        phenylalanine_g:
          type: number
          description: Phenylalanine content of the associated food(s)
          nullable: true
          example: 0.9
        chloride_mg:
          type: number
          description: Chloride content of the associated food(s)
          nullable: true
          example: 2300
        vitamin_D3_mg:
          type: number
          description: Vitamin D3 content of the associated food(s)
          nullable: true
          example: 0.015
        isoleucine_g:
          type: number
          description: Isoleucine content of the associated food(s)
          nullable: true
          example: 0.8
        calcium_mg:
          type: number
          description: Calcium content of the associated food(s)
          nullable: true
          example: 1000
        iodine_mg:
          type: number
          description: Iodine content of the associated food(s)
          nullable: true
          example: 0.15
        histidine_g:
          type: number
          description: Histidine content of the associated food(s)
          nullable: true
          example: 0.6
        chromium_mg:
          type: number
          description: Chromium content of the associated food(s)
          nullable: true
          example: 0.035
        vitamin_K_mg:
          type: number
          description: Vitamin K content of the associated food(s)
          nullable: true
          example: 0.12
        manganese_mg:
          type: number
          description: Manganese content of the associated food(s)
          nullable: true
          example: 2.3
        folic_acid_mg:
          type: number
          description: Folic Acid content of the associated food(s)
          nullable: true
          example: 0.4
        leucine_g:
          type: number
          description: Leucine content of the associated food(s)
          nullable: true
          example: 1.2
        caffeine_mg:
          type: number
          description: Caffeine content of the associated food(s)
          nullable: true
          example: 95
        potassium_mg:
          type: number
          description: Potassium content of the associated food(s)
          nullable: true
          example: 3500
        molybdenum_mg:
          type: number
          description: Molybdenum content of the associated food(s)
          nullable: true
          example: 0.045
        lysine_g:
          type: number
          description: Lysine content of the associated food(s)
          nullable: true
          example: 0.9
        tyrosine_g:
          type: number
          description: Tyrosine content of the associated food(s)
          nullable: true
          example: 0.7
        valine_g:
          type: number
          description: Valine content of the associated food(s)
          nullable: true
          example: 0.8
        omega6_g:
          type: number
          description: Omega6 content of the associated food(s)
          nullable: true
          example: 17
        omega3_g:
          type: number
          description: Omega3 content of the associated food(s)
          nullable: true
          example: 1.6
        vitamin_C_mg:
          type: number
          description: Vitamin C content of the associated food(s)
          nullable: true
          example: 90
        zinc_mg:
          type: number
          description: Zinc content of the associated food(s)
          nullable: true
          example: 11
        vitamin_D2_mg:
          type: number
          description: Vitamin D2 content of the associated food(s)
          nullable: true
          example: 0.01
        vitamin_E_mg:
          type: number
          description: Vitamin E content of the associated food(s)
          nullable: true
          example: 15
        pantothenic_acid_mg:
          type: number
          description: Pantothenic content of the associated food(s)
          nullable: true
          example: 5
        riboflavin_mg:
          type: number
          description: Riboflavin content of the associated food(s)
          nullable: true
          example: 1.3
        phosphorus_mg:
          type: number
          description: Phosphorus content of the associated food(s)
          nullable: true
          example: 1000
        vitamin_D_mg:
          type: number
          description: Vitamin D content of the associated food(s)
          nullable: true
          example: 0.02
        tryptophan_g:
          type: number
          description: Tryptophan content of the associated food(s)
          nullable: true
          example: 0.3
        niacin_mg:
          type: number
          description: Niacin content of the associated food(s)
          nullable: true
          example: 16
        copper_mg:
          type: number
          description: Copper content of the associated food(s)
          nullable: true
          example: 0.9
        threonine_g:
          type: number
          description: Threonine content of the associated food(s)
          nullable: true
          example: 0.5
        monounsaturated_fat_g:
          type: number
          description: Monounsaturated fat content of the associated food(s)
          nullable: true
          example: 15
        folate_mg:
          type: number
          description: Folate content of the associated food(s)
          nullable: true
          example: 0.4
        selenium_mg:
          type: number
          description: Selenium content of the associated food(s)
          nullable: true
          example: 0.055
        vitamin_B6_mg:
          type: number
          description: Vitamin B6 content of the associated food(s)
          nullable: true
          example: 1.7
        thiamin_mg:
          type: number
          description: Thiamin content of the associated food(s)
          nullable: true
          example: 1.2
        polyunsaturated_fat_g:
          type: number
          description: Polyunsaturated fat content of the associated food(s)
          nullable: true
          example: 13
        methionine_g:
          type: number
          description: Methionine content of the associated food(s)
          nullable: true
          example: 0.6
        starch_g:
          type: number
          description: Starch content of the associated food(s)
          nullable: true
          example: 25
    Macros:
      type: object
      properties:
        fiber_g:
          type: number
          description: Fiber content of the associated food(s)
          nullable: true
          example: 25
        calories:
          type: number
          description: Calorie content of the associated food(s)
          nullable: true
          example: 2000
        fat_g:
          type: number
          description: Fat content of the associated food(s)
          nullable: true
          example: 65
        sodium_mg:
          type: number
          description: Sodium content of the associated food(s)
          nullable: true
          example: 2300
        alcohol_g:
          type: number
          description: Alcohol content of the associated food(s)
          nullable: true
          example: 14
        trans_fat_g:
          type: number
          description: Trans fat content of the associated food(s)
          nullable: true
          example: 2
        carbohydrates_g:
          type: number
          description: Carbohydrates content of the associated food(s)
          nullable: true
          example: 300
        protein_g:
          type: number
          description: Protein content of the associated food(s)
          nullable: true
          example: 50
        saturated_fat_g:
          type: number
          description: Saturated fat content of the associated food(s)
          nullable: true
          example: 20
        sugar_g:
          type: number
          description: Sugar content of the associated food(s)
          nullable: true
          example: 25
        cholesterol_mg:
          type: number
          description: Cholesterol content of the associated food(s)
          nullable: true
          example: 300
        net_carbohydrates_g:
          type: number
          description: Net carbs content of the associated food(s)
          nullable: true
          example: 275
    NutritionSummary:
      type: object
      properties:
        micros:
          description: Summary of micronutrient information for a given day
          type: object
          allOf:
          - $ref: '#/components/schemas/Micros'
        macros:
          description: Summary of macronutrient information for a given day
          type: object
          allOf:
          - $ref: '#/components/schemas/Macros'
        water_ml:
          type: number
          description: Water consumption of the user for a given day
          nullable: true
          example: 2000
    DrinkSample:
      type: object
      properties:
        drink_unit:
          type: string
          description: Unit of measurement for the drink
          nullable: true
          example: "ml"
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        drink_name:
          type: string
          description: Name of drink consumed
          nullable: true
          example: "Water"
        drink_volume:
          type: string
          description: Volume of drink consumed
          nullable: true
          example: "250"
    NutritionMetadata:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h before end_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '1999-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        end_time:
          type: string
          description: The end time of the associated day, in ISO8601 format with
            microsecond precision. Will always fall on midnight of any given day,
            and will always be equal to 24h after start_time. TimeZone info will be
            provided whenever possible. If absent, the time corresponds to the user's
            local time
          example: '2022-10-28T10:00:00.000000+01:00'
          format: date-time
          nullable: true
        timestamp_localization:
          oneOf:
            - type: integer
              enum: [0]
              description: UTC timestamps with +00:00 offset. This avoids "Z" notation to ensure compatibility across parsers.
            - type: integer 
              enum: [1]
              description: LOCAL timestamps that may include or exclude the timezone, following ISO8601.
          description: Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC
          nullable: false
          example: 0
    Quantity:
      type: object
      properties:
        unit:
          type: string
          description: Name of the unit of measurement
          example: grams
          nullable: true
        amount:
          type: number
          description: Amount of food, measured in unit defined in this object
          example: 100.0
          minimum: 0
          nullable: true
    Meal:
      type: object
      properties:
        micros:
          description: Micronutrient information for associated food
          type: object
          allOf:
          - $ref: '#/components/schemas/Micros'
        type:
          description: Enum representing the category the consumed food/meal falls
            under (i.e. Breakfast/Lunch/Dinner etc
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - BREAKFAST
          - MORNING_SNACK
          - LUNCH
          - AFTERNOON_SNACK
          - DINNER
          - SNACK
          example: "BREAKFAST"
        id:
          type: string
          description: Identifier for food logged by the user
          nullable: true
          example: "food_123"
        timestamp:
          type: string
          description: Timestamp the food is associated with, in ISO8601 format, with
            microsecond precision
          format: date-time
          example: '2022-12-12T08:53:00.000000+02:00'
          nullable: true
        quantity:
          description: Quantity of the food that was consumed, containing information
            on amount & units in which this was recorded
          type: object
          allOf:
          - $ref: '#/components/schemas/Quantity'
        name:
          type: string
          description: Name of food logged by the user
          nullable: true
          example: "Oatmeal"
        macros:
          description: Macronutrient information for associated food
          type: object
          allOf:
          - $ref: '#/components/schemas/Macros'
    Nutrition:
      type: object
      properties:
        summary:
          description: Summative nutritional information for a given day
          type: object
          allOf:
          - $ref: '#/components/schemas/NutritionSummary'
        drink_samples:
          type: array
          description: Information on drinks the user consumed throughout the day
          items:
            $ref: '#/components/schemas/DrinkSample'
        metadata:
          description: Object containing daily summary metadata
          type: object
          allOf:
          - $ref: '#/components/schemas/NutritionMetadata'
        meals:
          type: array
          description: Information on individual foods consumed throughout a given
            day
          items:
            $ref: '#/components/schemas/Meal'
    SnoringSample:
      type: object
      properties:
        duration_seconds:
          type: number
          description: Duration of snoring episode
          nullable: true
          example: 120
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    SnoringData:
      type: object
      properties:
        start_time:
          type: string
          description: The start time of the recording of snoring data, in ISO8601
            format with microsecond precision. Will always fall on midnight of any
            given day, and will always be equal to 24h before end_time. TimeZone info
            will be provided whenever possible. If absent, the time corresponds to
            the user's local time
          example: '1999-11-23T22:00:00.000000+02:00'
          format: date-time
          nullable: true
        total_snoring_duration_seconds:
          type: number
          description: Total duration for which the user was snoring
          nullable: true
          example: 3600
        samples:
          type: array
          description: List of snoring information data points sampled throughout
            the sleep session
          items:
            $ref: '#/components/schemas/SnoringSample'
        end_time:
          type: string
          description: The end time of the recording of snoring data, in ISO8601 format
            with microsecond precisionTimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-24T08:00:00.000000+01:00'
          format: date-time
          nullable: true
        num_snoring_events:
          type: integer
          description: Number of times over the sleep period when the user started
            snoring, as determined by the device
          nullable: true
          example: 12
    BreathSample:
      type: object
      properties:
        breaths_per_min:
          type: number
          description: User's respiration rate
          nullable: true
          example: 16
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
    BreathsData:
      type: object
      properties:
        avg_breaths_per_min:
          type: number
          description: Average breathing rate of the user during the sleep session
          nullable: true
          example: 14
        max_breaths_per_min:
          type: number
          description: Maximum breathing rate of the user during the sleep session
          nullable: true
          example: 18
        start_time:
          type: string
          description: The start time of the recording of breathing rate data, in
            ISO8601 format with microsecond precision. Will always fall on midnight
            of any given day, and will always be equal to 24h before end_time. TimeZone
            info will be provided whenever possible. If absent, the time corresponds
            to the user's local time
          example: '1999-11-23T22:00:00.000000+02:00'
          format: date-time
          nullable: true
        min_breaths_per_min:
          type: number
          description: Minimum breathing rate of the user during the sleep session
          nullable: true
          example: 10
        samples:
          type: array
          description: List of breathing rate information sampled throughout the sleep
            session
          items:
            $ref: '#/components/schemas/BreathSample'
        on_demand_reading:
          type: boolean
          description: Flag indicating if the reading was performed on demand, or
            if it was automatically captured by the device
          nullable: true
          example: false
        end_time:
          type: string
          description: The end time of the recording of breathing rate data, in ISO8601
            format with microsecond precisionTimeZone info will be provided whenever
            possible. If absent, the time corresponds to the user's local time
          example: '2022-11-24T08:00:00.000000+01:00'
          format: date-time
          nullable: true
    OxygenSaturationData:
      type: object
      properties:
        samples:
          type: array
          description: Array of Oxygen Saturation percentage datapoints sampled throughout
            the sleep session
          items:
            $ref: '#/components/schemas/OxygenSaturationSample'
        start_time:
          type: string
          description: The start time of the recording of oxygen saturation, in ISO8601
            format with microsecond precision. Will always fall on midnight of any
            given day, and will always be equal to 24h before end_time. TimeZone info
            will be provided whenever possible. If absent, the time corresponds to
            the user's local time
          example: '1999-11-23T22:00:00.000000+02:00'
          format: date-time
          nullable: true
        avg_saturation_percentage:
          type: number
          description: Average Oxygen Saturation percentage of the user during the
            sleep session
          nullable: true
          example: 97
        end_time:
          type: string
          description: The end time of the recording of oxygen saturation, in ISO8601
            format with microsecond precisionTimeZone info will be provided whenever
            possible. If absent, the time corresponds to the user's local time
          example: '2022-11-24T08:00:00.000000+01:00'
          format: date-time
          nullable: true
    RespirationData:
      type: object
      properties:
        snoring_data:
          description: Object containing information on snoring metrics for the sleep
            session
          type: object
          allOf:
          - $ref: '#/components/schemas/SnoringData'
        breaths_data:
          description: Object containing information on breathing rate for the sleep
            session
          type: object
          allOf:
          - $ref: '#/components/schemas/BreathsData'
        oxygen_saturation_data:
          description: Object containing information on saturation metrics for the
            sleep session
          type: object
          allOf:
          - $ref: '#/components/schemas/OxygenSaturationData'
    SleepDurationsAwakeData:
      type: object
      properties:
        duration_short_interruption_seconds:
          type: number
          description: Total duration for which the user was awake during the sleep
            session, when the interruption of their sleep was less than 90 seconds
          nullable: true
          example: 180
        duration_awake_state_seconds:
          type: number
          description: Total duration for which the user was awake during the sleep
            session
          nullable: true
          example: 1200
        wake_up_latency_seconds:
          type: number
          description: Wake up latency, defined as time between the moment the user
            wakes up and the moment they get out of bed
          nullable: true
          example: 300
        num_wakeup_events:
          type: integer
          description: Number of times the user woke up during the sleep session
          nullable: true
          example: 3
        duration_long_interruption_seconds:
          type: number
          description: Total duration for which the user was awake during the sleep
            session, when the interruption of their sleep was greater than 90 seconds.
          nullable: true
          example: 600
        sleep_latency_seconds:
          type: number
          description: Sleep latency, defined as time between the moment the user
            lays in bed with the intention to sleep and the moment they actually fall
            asleep
          nullable: true
          example: 900
        num_out_of_bed_events:
          type: integer
          description: Number of times the user got out of bed during the sleep session
          nullable: true
          example: 1
    SleepDurationsAsleepData:
      type: object
      properties:
        num_REM_events:
          type: integer
          description: Number of periods of REM sleep captured during the sleep session
          nullable: true
          example: 4
        duration_asleep_state_seconds:
          type: number
          description: Total duration for which the user was asleep, in any state
          nullable: true
          example: 25200
        duration_REM_sleep_state_seconds:
          type: number
          description: Total duration for which the user was in a state of REM sleep
          nullable: true
          example: 5400
        duration_light_sleep_state_seconds:
          type: number
          description: Total duration for which the user was in a state of light sleep
          nullable: true
          example: 14400
        duration_deep_sleep_state_seconds:
          type: number
          description: Total duration for which the user was in a state of deep sleep
          nullable: true
          example: 5400
    SleepHypnogramSample:
      type: object
      properties:
        timestamp:
          type: string
          description: Time with which the record is associated, in ISO8601 format
            with microsecond precision. TimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        level:
          description: Sleep stage the user is in at a moment in time (e.g. deep sleep,
            light sleep etc)
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - AWAKE
          - SLEEPING
          - OUT_OF_BED
          - LIGHT
          - DEEP
          - REM
    SleepDurationsOtherData:
      type: object
      properties:
        duration_unmeasurable_sleep_seconds:
          type: number
          description: Total duration during which the user's state (awake, asleep,
            REM, etc) was unmeasurable during the sleep session
          nullable: true
          example: 300
        duration_in_bed_seconds:
          type: number
          description: Total duration of time spent in bed
          nullable: true
          example: 28800
    SleepDurationsData:
      type: object
      properties:
        sleep_efficiency:
          type: number
          description: Sleep efficiency of the user given as a percentage, measured
            as time spent asleep divided by time spent in bed
          minimum: 0
          maximum: 100
          nullable: true
          example: 87.5
        awake:
          description: Object containing information on the duration the user spent
            awake during the sleep recording session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepDurationsAwakeData'
        asleep:
          description: Object containing information on the duration the user spent
            asleep during the sleep recording session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepDurationsAsleepData'
        hypnogram_samples:
          type: array
          description: List of sleep stage (Hypnogram) samples recorded during the
            user's sleep session
          items:
            $ref: '#/components/schemas/SleepHypnogramSample'
        other:
          description: Object containing information on the miscellaneous duration
            data for the sleep recording session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepDurationsOtherData'
    SleepHeartRateDataSummary:
      type: object
      properties:
        resting_hr_bpm:
          type: number
          description: Resting HeartRate of the user, as determined by the fitness
            data provider
          minimum: 0
          nullable: true
          example: 55
        avg_hr_bpm:
          type: number
          description: Average HeartRate of the user during the sleep session
          minimum: 0
          nullable: true
          example: 60
        max_hr_bpm:
          type: number
          description: Maximum HeartRate of the user during the sleep session
          minimum: 0
          nullable: true
          example: 75
        avg_hrv_sdnn:
          type: number
          description: Average HeartRate Variability of the user during the sleep
            session, computed using SDNN
          nullable: true
          example: 45
        min_hr_bpm:
          type: number
          description: Minimum HeartRate of the user during the sleep session
          minimum: 0
          nullable: true
          example: 48
        avg_hrv_rmssd:
          type: number
          description: Average HeartRate Variability of the user during the sleep
            session, computed using RMSSD
          nullable: true
          example: 35
        user_max_hr_bpm:
          type: number
          description: User's maximum HeartRate based on their age, and other factors
            as determined by the fitness data provider
          nullable: true
          example: 185
    SleepHeartRateDataDetailed:
      type: object
      properties:
        hrv_samples_rmssd:
          type: array
          description: Array of HeartRate Variability data samples recorded for the
            user during the sleep session, computed using RMSSD
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleRMSSD'
        hr_samples:
          type: array
          description: Array of HeartRate data samples recorded for the user during
            the sleep session
          items:
            $ref: '#/components/schemas/HeartRateDataSample'
        hrv_samples_sdnn:
          type: array
          description: Array of HeartRate Variability data samples recorded for the
            user during the sleep session, computed using SDNN
          items:
            $ref: '#/components/schemas/HeartRateVariabilityDataSampleSDNN'
    SleepHeartRateData:
      type: object
      properties:
        summary:
          description: Object containing summary information for the associated sleep
            session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepHeartRateDataSummary'
        detailed:
          description: Object containing detailed heart rate information for the associated
            sleep session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepHeartRateDataDetailed'
    SleepMetadata:
      type: object
      properties:
        is_nap:
          type: boolean
          description: Flag indicating whether the sleep session was a nap, or the
            user's main sleep session for the day
          nullable: true
          example: false
        start_time:
          type: string
          description: The start time of the associated sleep session, in ISO8601
            format with microsecond precision. Will always fall on midnight of any
            given day, and will always be equal to 24h before end_time. TimeZone info
            will be provided whenever possible. If absent, the time corresponds to
            the user's local time
          example: '1999-11-23T22:00:00.000000+02:00'
          format: date-time
          nullable: true
        upload_type:
          type: integer
          description: The upload type for the associated sleep session, providing
            information on whether this was an automatic sleep or user-entered
          nullable: false
          example: 1
        end_time:
          type: string
          description: The end time of the associated sleep session, in ISO8601 format
            with microsecond precisionTimeZone info will be provided whenever possible.
            If absent, the time corresponds to the user's local time
          example: '2022-11-24T08:00:00.000000+01:00'
          format: date-time
          nullable: true
        timestamp_localization:
          oneOf:
            - type: integer
              enum: [0]
              description: UTC timestamps with +00:00 offset. This avoids "Z" notation to ensure compatibility across parsers.
            - type: integer 
              enum: [1]
              description: LOCAL timestamps that may include or exclude the timezone, following ISO8601.
          description: Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC
          nullable: false
          example: 0
    ReadinessData:
      type: object
      properties:
        readiness:
          type: number
          description: User's readiness score for a given day, resulting from the
            sleep session
          minimum: 0
          maximum: 100
          nullable: true
          example: 85
        recovery_level:
          type: integer
          description: User's recovery score for a given day, resulting from the sleep
            session - takes Enum value
          minimum: 0
          maximum: 6
          nullable: false
          example: 4
    SleepTemperatureData:
      type: object
      properties:
        delta:
          type: number
          description: Variation in user's skin temperature from their baseline
          nullable: true
          example: 0.5
    Sleep:
      type: object
      properties:
        respiration_data:
          description: Object containing information on the user's respiration throughout
            the sleep session
          type: object
          allOf:
          - $ref: '#/components/schemas/RespirationData'
        sleep_durations_data:
          description: Object containing information on the user's duration spent
            in various sleep stages
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepDurationsData'
        device_data:
          description: Object containing information on the device which recorded
            data for the payload
          type: object
          allOf:
          - $ref: '#/components/schemas/DeviceData'
        heart_rate_data:
          description: Object containing information on the user's heart rate during
            the sleep session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepHeartRateData'
        metadata:
          description: Object containing daily summary metadata
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepMetadata'
        readiness_data:
          description: Object containing information on the user's readiness for the
            day, based off the quality and duration of their sleep
          type: object
          allOf:
          - $ref: '#/components/schemas/ReadinessData'
        temperature_data:
          description: Object containing body temperature information of the user
            during the sleep recording session
          type: object
          allOf:
          - $ref: '#/components/schemas/SleepTemperatureData'
    PlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "HEART_RATE"
    CadencePlannedWorkoutStepTarget:
      type: object
      properties:
        cadence:
          type: integer
          description: Ideal cadence value to be maintained for the workout step
          nullable: true
          example: 90
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "CADENCE"
        cadence_low:
          type: integer
          description: Minimum cadence threshold for the workout step - i.e. the user
            is to stay above this value during the workout
          nullable: true
          example: 85
        cadence_high:
          type: integer
          description: Maximum cadence threshold for the workout step - i.e. the user
            is to stay under this value during the workout step
          nullable: true
          example: 95
    HRPlannedWorkoutStepTarget:
      type: object
      properties:
        hr_percentage_low:
          type: number
          description: Maximum max heart rate percentage threshold for the workout
            step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 65.5
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "HEART_RATE"
        hr_percentage_high:
          type: number
          description: Minimum heart rate percentage threshold for the workout step
            - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 85.5
        hr_percentage:
          type: number
          description: Ideal percentage of user's maximum HR to be maintained workout
            step
          nullable: true
          example: 75.5
        hr_bpm_high:
          type: integer
          description: Maximum heart rate threshold for the workout step - i.e. the
            user is to stay under this value during the workout step
          nullable: true
          example: 175
        hr_bpm_low:
          type: integer
          description: Minimum heart rate threshold for the workout step - i.e. the
            user is to stay above this value during the workout
          nullable: true
          example: 130
    PowerPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "POWER"
        power_percentage_low:
          type: number
          description: Maximum percentage of Functional Threshold Power for the workout
            step - i.e. the user is to stay under this value during the workout step
          nullable: true
          example: 65.5
        power_percentage_high:
          type: number
          description: Minimum percentage of Functional Threshold Power for the workout
            step - i.e. the user is to stay above this value during the workout
          nullable: true
          example: 85.5
        power_watt_high:
          type: integer
          description: Maximum power threshold for the workout step - i.e. the user
            is to stay under this value during the workout step
          nullable: true
          example: 300
        power_watt_low:
          type: integer
          description: Minimum power threshold for the workout step - i.e. the user
            is to stay above this value during the workout
          nullable: true
          example: 200
        power_watt:
          type: integer
          default: null
          nullable: true
          example: 250
        power_percentage:
          type: number
          description: Ideal percentage of user's Functional Threshold Power to be
            maintained workout step
          nullable: true
          example: 75.5
    SpeedPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "SPEED"
        speed_percentage_high:
          type: number
          description: Maximum speed threshold for the workout step - i.e. the user
            is to stay under this value during the workout step
          nullable: true
          example: 85.5
        speed_percentage_low:
          type: number
          description: Minimum speed threshold for the workout step - i.e. the user
            is to stay above this value during the workout step
          nullable: true
          example: 65.5
        speed_percentage:
          type: number
          description: Ideal percentage of user's Threshold Speed, based off their
            Threshold Pace, to be maintained workout step. Usually, the Threshold
            Pace is defined as the pace one could race at for 50 to 60 minutes
          nullable: true
          example: 75.5
        speed_meters_per_second:
          type: number
          description: Ideal speed value to be maintained for the workout step
          nullable: true
          example: 4.2
    PacePlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "PACE"
        pace_minutes_per_kilometer:
          type: number
          description: Ideal pace value to be maintained for the workout step
          nullable: true
          example: 5.5
    TSSPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "TSS"
        tss:
          type: number
          description: Planned Training Stress Score to be achieved for the workout
            step
          nullable: true
          example: 100.5
    IFPlannedWorkoutStepTarget:
      type: object
      properties:
        if_high:
          type: number
          description: Maximum Intensity Factor to be achieved for the workout step
          nullable: true
          example: 1.2
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "IF"
        if_low:
          type: number
          description: Minimum Intensity Factor to be achieved for the workout step
          nullable: true
          example: 0.8
    RepetitionPlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "REPETITION"
        repetitions:
          type: number
          description: Number of repetitions of the workout step to be performed
          nullable: true
          example: 10
    SwimStrokePlannedWorkoutStepTarget:
      type: object
      properties:
        target_type:
          description: Type of target for the workout - i.e. metric type for which
            a criterion must be met for the workout to be completed
          nullable: false
          type: string
          enum:
          - SPEED
          - HEART_RATE
          - OPEN
          - CADENCE
          - POWER
          - GRADE
          - RESISTANCE
          - POWER_LAP
          - SWIM_STROKE
          - SPEED_LAP
          - HEART_RATE_LAP
          - PACE
          - HEART_RATE_THRESHOLD_PERCENTAGE
          - HEART_RATE_MAX_PERCENTAGE
          - SPEED_PERCENTAGE
          - POWER_PERCENTAGE
          - REPETITION
          - TSS
          - IF
          example: "SWIM_STROKE"
        swim_strokes:
          type: integer
          description: Number of swim strokes to be performed during the workout step
          nullable: true
          example: 50
    PlannedWorkoutStepTargets:
      type: object
      properties: {}
      oneOf:
      - $ref: '#/components/schemas/PlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/CadencePlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/HRPlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/PowerPlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/SpeedPlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/PacePlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/TSSPlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/IFPlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/RepetitionPlannedWorkoutStepTarget'
      - $ref: '#/components/schemas/SwimStrokePlannedWorkoutStepTarget'
      discriminator:
        propertyName: type
        mapping:
          PlannedWorkoutStepTarget: '#/components/schemas/PlannedWorkoutStepTarget'
          CadencePlannedWorkoutStepTarget: '#/components/schemas/CadencePlannedWorkoutStepTarget'
          HRPlannedWorkoutStepTarget: '#/components/schemas/HRPlannedWorkoutStepTarget'
          PowerPlannedWorkoutStepTarget: '#/components/schemas/PowerPlannedWorkoutStepTarget'
          SpeedPlannedWorkoutStepTarget: '#/components/schemas/SpeedPlannedWorkoutStepTarget'
          PacePlannedWorkoutStepTarget: '#/components/schemas/PacePlannedWorkoutStepTarget'
          TSSPlannedWorkoutStepTarget: '#/components/schemas/TSSPlannedWorkoutStepTarget'
          IFPlannedWorkoutStepTarget: '#/components/schemas/IFPlannedWorkoutStepTarget'
          RepetitionPlannedWorkoutStepTarget: '#/components/schemas/RepetitionPlannedWorkoutStepTarget'
          SwimStrokePlannedWorkoutStepTarget: '#/components/schemas/SwimStrokePlannedWorkoutStepTarget'
    PlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    TimePlannedWorkoutStepDuration:
      type: object
      properties:
        seconds:
          type: integer
          description: Time duration to be elapsed for the workout step
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    PowerAbovePlannedWorkoutStepDuration:
      type: object
      properties:
        power_above_watts:
          type: integer
          description: Threshold power goal to complete the workout step - once the
            user reaches above this power level, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    PowerBelowPlannedWorkoutStepDuration:
      type: object
      properties:
        power_below_watts:
          type: integer
          description: Threshold power goal to complete the workout step - once the
            user reaches below this power level, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    FixedRestPlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
        rest_seconds:
          type: integer
          description: Time duration to be elapsed for the rest period
          nullable: true
    CaloriesPlannedWorkoutStepDuration:
      type: object
      properties:
        calories:
          type: integer
          description: Calorie burn target for the workout step - once the user reaches
            the target, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    HRAbovePlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
        hr_above_bpm:
          type: integer
          description: Threshold heart rate goal to complete the workout step - once
            the user's heart rate reaches above below this value, the step will be
            completed
          nullable: true
    HRBelowPlannedWorkoutStepDuration:
      type: object
      properties:
        hr_below_bpm:
          type: integer
          description: Threshold heart rate goal to complete the workout step - once
            the user's heart rate reaches below this value, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    RepsPlannedWorkoutStepDuration:
      type: object
      properties:
        reps:
          type: integer
          description: Target number of reps for the workout step - once the user
            completes this rep target, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    DistancePlannedWorkoutStepDuration:
      type: object
      properties:
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
        distance_meters:
          type: integer
          description: Target distance for the workout step - once the user covers
            this distance, the step will be completed
          nullable: true
    StepsPlannedWorkoutStepDuration:
      type: object
      properties:
        steps:
          type: integer
          description: Target number of steps for the workout step - once the user
            performs this number of steps, the step will be completed
          nullable: true
        duration_type:
          description: Type of condition that must be fulfilled to consider the workout
            step complete
          nullable: false
          type: string
          enum:
          - TIME
          - DISTANCE_METERS
          - HR_LESS_THAN
          - HR_GREATER_THAN
          - CALORIES
          - OPEN
          - POWER_LESS_THAN
          - POWER_GREATER_THAN
          - REPETITION_TIME
          - REPS
          - FIXED_REST
          - TIME_AT_VALID_CDA
          - STEPS
    PlannedWorkoutStepDurations:
      type: object
      properties: {}
      oneOf:
      - $ref: '#/components/schemas/PlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/TimePlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/PowerAbovePlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/PowerBelowPlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/FixedRestPlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/CaloriesPlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/HRAbovePlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/HRBelowPlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/RepsPlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/DistancePlannedWorkoutStepDuration'
      - $ref: '#/components/schemas/StepsPlannedWorkoutStepDuration'
      discriminator:
        propertyName: type
        mapping:
          PlannedWorkoutStepDuration: '#/components/schemas/PlannedWorkoutStepDuration'
          TimePlannedWorkoutStepDuration: '#/components/schemas/TimePlannedWorkoutStepDuration'
          PowerAbovePlannedWorkoutStepDuration: '#/components/schemas/PowerAbovePlannedWorkoutStepDuration'
          PowerBelowPlannedWorkoutStepDuration: '#/components/schemas/PowerBelowPlannedWorkoutStepDuration'
          FixedRestPlannedWorkoutStepDuration: '#/components/schemas/FixedRestPlannedWorkoutStepDuration'
          CaloriesPlannedWorkoutStepDuration: '#/components/schemas/CaloriesPlannedWorkoutStepDuration'
          HRAbovePlannedWorkoutStepDuration: '#/components/schemas/HRAbovePlannedWorkoutStepDuration'
          HRBelowPlannedWorkoutStepDuration: '#/components/schemas/HRBelowPlannedWorkoutStepDuration'
          RepsPlannedWorkoutStepDuration: '#/components/schemas/RepsPlannedWorkoutStepDuration'
          DistancePlannedWorkoutStepDuration: '#/components/schemas/DistancePlannedWorkoutStepDuration'
          StepsPlannedWorkoutStepDuration: '#/components/schemas/StepsPlannedWorkoutStepDuration'
    PlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTargets'
        type:
          description: Type of workout step - either repeat or one-off
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          description: Planned intensity for the workout step
          type: string
          enum:
          - REST
          - WARMUP
          - COOLDOWN
          - RECOVERY
          - INTERVAL
          - ACTIVE
        order:
          type: integer
          description: Position of the workout step in the overall workout
        description:
          type: string
          description: Description of workout step
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDurations'
        name:
          type: string
          description: Name of workout step
    PlannedWorkoutRepeatStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        steps:
          type: array
          description: List of steps to be repeated for this workout step - e.g. if
            a user wants to schedule 5 repetitions of 100m sprints plus 20s rest in
            between
          items:
            $ref: '#/components/schemas/PlannedWorkoutStep'
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    SwimmingPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        equipement_type:
          description: Workout equipment to be used during the workout step
          nullable: false
          type: string
          enum:
          - NONE
          - SWIM_FINS
          - SWIM_KICKBOARD
          - SWIM_PADDLES
          - SWIM_PULL_BUOY
          - SWIM_SNORKEL
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
        stroke_type:
          description: Stroke type used for the workout step (e.g. breaststroke)
          nullable: false
          type: string
          enum:
          - OTHER
          - FREESTYLE
          - BACKSTROKE
          - BREASTSTROKE
          - BUTTERFLY
          - REST
    CardioPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        exercice_name:
          type: string
          description: Name of exercise to be performed for the workout step
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        exercice_category:
          description: Type of exercise to be performed for the workout step
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - BENCH_PRESS
          - CALF_RAISE
          - CARDIO
          - CARRY
          - CHOP
          - CORE
          - CRUNCH
          - CURL
          - DEADLIFT
          - FLYE
          - HIP_RAISE
          - HIP_STABILITY
          - HIP_SWING
          - HYPEREXTENSION
          - LATERAL_RAISE
          - LEG_CURL
          - LEG_RAISE
          - LUNGE
          - OLYMPIC_LIFT
          - PLANK
          - PLYO
          - PULL_UP
          - PUSH_UP
          - ROW
          - SHOULDER_PRESS
          - SHOULDER_STABILITY
          - SHRUG
          - SIT_UP
          - SQUAT
          - TOTAL_BODY
          - TRICEPS_EXTENSION
          - WARM_UP
          - RUN
          - BIKE
          - CARDIO_SENSORS
        name:
          type: string
          description: Name of workout step
          nullable: true
    StrengthPlannedWorkoutStep:
      type: object
      properties:
        weight_kg:
          type: number
          description: Weight to be lifted for the exercise
          nullable: true
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        exercice_name:
          type: string
          description: Name of strength exercise to be performed for the workout step
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        exercice_category:
          description: Type of strength exercise to be performed for the workout step
          nullable: false
          type: string
          enum:
          - UNKNOWN
          - BENCH_PRESS
          - CALF_RAISE
          - CARDIO
          - CARRY
          - CHOP
          - CORE
          - CRUNCH
          - CURL
          - DEADLIFT
          - FLYE
          - HIP_RAISE
          - HIP_STABILITY
          - HIP_SWING
          - HYPEREXTENSION
          - LATERAL_RAISE
          - LEG_CURL
          - LEG_RAISE
          - LUNGE
          - OLYMPIC_LIFT
          - PLANK
          - PLYO
          - PULL_UP
          - PUSH_UP
          - ROW
          - SHOULDER_PRESS
          - SHOULDER_STABILITY
          - SHRUG
          - SIT_UP
          - SQUAT
          - TOTAL_BODY
          - TRICEPS_EXTENSION
          - WARM_UP
          - RUN
          - BIKE
          - CARDIO_SENSORS
        name:
          type: string
          description: Name of workout step
          nullable: true
    YogaPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    PilatesPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    RunningPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    CyclingPlannedWorkoutStep:
      type: object
      properties:
        targets:
          type: array
          description: List of targets for the workout
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepTarget'
        type:
          description: Type of workout step - either repeat or one-off
          nullable: false
          type: string
          enum:
          - STEP
          - REPEAT_STEP
        intensity:
          type: integer
          description: Planned intensity for the workout step
          nullable: true
        order:
          type: integer
          description: Position of the workout step in the overall workout
          nullable: true
        description:
          type: string
          description: Description of workout step
          nullable: true
        durations:
          type: array
          description: List of conditions to be fulfilled for the workout step to
            be completed - all of the conditions must be completed
          items:
            $ref: '#/components/schemas/PlannedWorkoutStepDuration'
        name:
          type: string
          description: Name of workout step
          nullable: true
    PlannedWorkoutSteps:
      type: object
      properties: {}
      oneOf:
      - $ref: '#/components/schemas/PlannedWorkoutStep'
      - $ref: '#/components/schemas/PlannedWorkoutRepeatStep'
      - $ref: '#/components/schemas/SwimmingPlannedWorkoutStep'
      - $ref: '#/components/schemas/CardioPlannedWorkoutStep'
      - $ref: '#/components/schemas/StrengthPlannedWorkoutStep'
      - $ref: '#/components/schemas/YogaPlannedWorkoutStep'
      - $ref: '#/components/schemas/PilatesPlannedWorkoutStep'
      - $ref: '#/components/schemas/RunningPlannedWorkoutStep'
      - $ref: '#/components/schemas/CyclingPlannedWorkoutStep'
      discriminator:
        propertyName: type
        mapping:
          PlannedWorkoutStep: '#/components/schemas/PlannedWorkoutStep'
          PlannedWorkoutRepeatStep: '#/components/schemas/PlannedWorkoutRepeatStep'
          SwimmingPlannedWorkoutStep: '#/components/schemas/SwimmingPlannedWorkoutStep'
          CardioPlannedWorkoutStep: '#/components/schemas/CardioPlannedWorkoutStep'
          StrengthPlannedWorkoutStep: '#/components/schemas/StrengthPlannedWorkoutStep'
          YogaPlannedWorkoutStep: '#/components/schemas/YogaPlannedWorkoutStep'
          PilatesPlannedWorkoutStep: '#/components/schemas/PilatesPlannedWorkoutStep'
          RunningPlannedWorkoutStep: '#/components/schemas/RunningPlannedWorkoutStep'
          CyclingPlannedWorkoutStep: '#/components/schemas/CyclingPlannedWorkoutStep'
    PlannedWorkoutMetadata:
      type: object
      properties:
        estimated_energy_kj:
          type: number
          description: Estimated energy expenditure for the workout
          nullable: true
        estimated_speed_meters_per_second:
          type: number
          description: Estimated speed for the workout
          nullable: true
        estimated_elevation_gain_meters:
          type: number
          description: Estimated elevation gain for the workout
          nullable: true
        estimated_tss:
          type: number
          description: Estimated Training Stress Score for the workout
          nullable: true
        estimated_calories:
          type: integer
          description: Estimated calorie burn for the workout
          nullable: true
        created_date:
          type: string
          description: The creation datetime of the associated workout, in ISO8601
            format with microsecond precision. TimeZone info will be provided whenever
            possible. If absent, the time corresponds to the user's local time
          example: '2022-11-23T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        planned_date:
          type: string
          description: The planned start datetime, in ISO8601 format with microsecond
            precision. TimeZone info will be provided whenever possible. If absent,
            the time corresponds to the user's local time
          example: '2022-11-24T09:00:00.000000+02:00'
          format: date-time
          nullable: true
        type:
          description: The name - either user-entered or given by the fitness data
            provider - of the associated workout plan
          nullable: false
          type: string
          enum:
          - IN_VEHICLE
          - BIKING
          - STILL
          - UNKNOWN
          - TILTING
          - WALKING
          - RUNNING
          - AEROBICS
          - BADMINTON
          - BASEBALL
          - BASKETBALL
          - BIATHLON
          - HANDBIKING
          - MOUNTAIN_BIKING
          - ROAD_BIKING
          - SPINNING
          - STATIONARY_BIKING
          - UTILITY_BIKING
          - BOXING
          - CALISTHENICS
          - CIRCUIT_TRAINING
          - CRICKET
          - DANCING
          - ELLIPTICAL
          - FENCING
          - AMERICAN_FOOTBALL
          - AUSTRALIAN_FOOTBALL
          - ENGLISH_FOOTBALL
          - FRISBEE
          - GARDENING
          - GOLF
          - GYMNASTICS
          - HANDBALL
          - HIKING
          - HOCKEY
          - HORSEBACK_RIDING
          - HOUSEWORK
          - JUMPING_ROPE
          - KAYAKING
          - KETTLEBELL_TRAINING
          - KICKBOXING
          - KITESURFING
          - MARTIAL_ARTS
          - MEDITATION
          - MIXED_MARTIAL_ARTS
          - P90X_EXERCISES
          - PARAGLIDING
          - PILATES
          - POLO
          - RACQUETBALL
          - ROCK_CLIMBING
          - ROWING
          - ROWING_MACHINE
          - RUGBY
          - JOGGING
          - RUNNING_ON_SAND
          - TREADMILL_RUNNING
          - SAILING
          - SCUBA_DIVING
          - SKATEBOARDING
          - SKATING
          - CROSS_SKATING
          - INDOOR_ROLLERBLADING
          - SKIING
          - BACK_COUNTRY_SKIING
          - CROSS_COUNTRY_SKIING
          - DOWNHILL_SKIING
          - KITE_SKIING
          - ROLLER_SKIING
          - SLEDDING
          - SNOWBOARDING
          - SNOWMOBILE
          - SNOWSHOEING
          - SQUASH
          - STAIR_CLIMBING
          - STAIR_CLIMBING_MACHINE
          - STAND_UP_PADDLEBOARDING
          - STRENGTH_TRAINING
          - SURFING
          - SWIMMING
          - SWIMMING_SWIMMING_POOL
          - SWIMMING_OPEN_WATER
          - TABLE_TENNIS
          - TEAM_SPORTS
          - TENNIS
          - TREADMILL
          - VOLLEYBALL
          - VOLLEYBALL_BEACH
          - VOLLEYBALL_INDOOR
          - WAKEBOARDING
          - WALKING_FITNESS
          - NORDIC_WALKING
          - WALKING_TREADMILL
          - WATERPOLO
          - WEIGHTLIFTING
          - WHEELCHAIR
          - WINDSURFING
          - YOGA
          - ZUMBA
          - DIVING
          - ERGOMETER
          - ICE_SKATING
          - INDOOR_SKATING
          - CURLING
          - OTHER
          - CROSSFIT
          - HIIT
          - INTERVAL_TRAINING
          - WALKING_STROLLER
          - ELEVATOR
          - ESCALATOR
          - ARCHERY
          - SOFTBALL
          - GUIDED_BREATHING
          - CARDIO_TRAINING
          - LACROSSE
          - STRETCHING
          - TRIATHLON
          - INLINE_SKATING
          - SKY_DIVING
          - PADDLING
          - MOUNTAINEERING
          - FISHING
          - WATER_SKIING
          - INDOOR_RUNNING
        id:
          type: string
          default: null
          nullable: true
        estimated_duration_seconds:
          type: integer
          description: Estimated workout duration
          nullable: true
        estimated_pace_minutes_per_kilometer:
          type: number
          description: Estimated pace for the workout
          nullable: true
        provider:
          type: string
          description: Name of the original source of the workout plan
          nullable: false
        estimated_tscore:
          type: number
          description: ''
          nullable: true
        description:
          type: string
          description: Description of the workout
          nullable: true
        name:
          type: string
          description: Name of the workout plan
          nullable: true
        estimated_distance_meters:
          type: integer
          description: Estimated distance for the workout
          nullable: true
        estimated_if:
          type: number
          description: Estimated Intensity Factor for the workout
          nullable: true
        pool_length_meters:
          type: integer
          description: Pool length of the pool used for the workout - only relevant
            for swimming activity types
          nullable: true
    PlannedWorkout:
      type: object
      properties:
        steps:
          type: object
          description: List of exercises/steps/intervals for the workout plan
          items:
            $ref: '#/components/schemas/PlannedWorkoutSteps'
        metadata:
          description: Metadata for the workout plan
          type: object
          allOf:
          - $ref: '#/components/schemas/PlannedWorkoutMetadata'
    UserAuthWebhook:
      type: object
      properties:
        user:
          type: object
          description: The user for which this authentication webhook is for
          items:
            $ref: '#/components/schemas/User'
        widget_session_id:
          description: The widget session from which the user authenticated from
          type: string
          nullable: true
        reference_id:
          type: string
          description: Connection identifier on the developer's end, used to tie connection
            back to a user on the developer's platform
          nullable: true
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'auth'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    PermissionChangeWebhook:
      type: object
      properties:
        type:
          type: string
          description: The type of webhook event received. For this webhook, this would be 'permission_change'.
        user:
          type: object
          description: The user for which this permission change webhook is for
          items:
            $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [success]
          description: Status of the webhook event.
        message:
          type: string
          description: A message describing the webhook event.
        version:
          type: string
          description: The version of the webhook.
          nullable: false
        scopes_added:
          type: string
          description: A comma-separated list of scopes that were added during the permission change.
        scopes_removed:
          type: string
          description: A comma-separated list of scopes that were removed during the permission change.
    UserReauthWebhook:
      type: object
      properties:
        old_user:
          type: object
          description: The old user that was authenticated
          items:
            $ref: '#/components/schemas/User'
        new_user:
          type: object
          description: The new user that was authenticated
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'user_reauth'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    UserDeauthWebhook:
      type: object
      properties:
        user:
          type: object
          description: The user that was deauthenticated
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'deauth'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    AccessRevokedWebhook:
      type: object
      properties:
        user:
          type: object
          description: The user for which has revoked access to Terra or your application
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'access_revoked'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    GoogleNoDataSourceWebhook:
      type: object
      properties:
        user:
          type: object
          description: The user for which no google data sources can be found for.
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'google_no_datasource'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    ConnectionErrorWebhook:
      type: object
      properties:
        user:
          type: object
          description: A connection error has happened for this user. Generally this means, you should deauthenticate them.
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'connection_error'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    DataProcessingWebhook:
      type: object
      properties:
        user:
          type: object
          description: The user for which data is processing for
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'processing'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    LargeRequestSendingWebhook:
      type: object
      properties:
        user:
          type: object
          description: The user for which large request is sending for
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        expected_payloads:
          type: number
          description: The number of payloads you should be expecting from the large request
        reference:
          type: string
          description: The reference for which all payloads will have in their 'terra-reference' headers
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'large_request_sending'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This is either 'success' or 'error'
        version:
          type: string
          nullable: false
    LargeRequestProcessingResponse:
      type: object
      properties:
        user:
          type: object
          description: The user for which large request is sending for
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          description: A message giving a small context on what the payload is about
        reference:
          type: string
          description: The reference for which all payloads will have in their 'terra-reference' headers
        type:
          type: string
          description: The type of webhook event received. For this, webhook, this would be 'large_request_prcessing'
        status:
          type: string
          enum: [success, error]
          description: Status of the webhook. This will be 'processing'
        version:
          type: string
          nullable: false
    AuthenticationFailedWebhook:
      type: object
      properties:
        reference_id:
          type: string
          nullable: true
        type:
          type: string
          nullable: false
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
        reason:
          type: string
          nullable: false
        status:
          type: string
          enum: [success, error]
          nullable: false
        message:
          type: string
          nullable: false
        widget_session_id:
          type: string
          nullable: true
        version:
          type: string
          nullable: false
    ConnectionDegradedWebhook:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          nullable: false
        message:
          type: string
          nullable: false
        type:
          type: string
          nullable: false
        user:
          description: Terra User object
          type: object
          allOf:
          - $ref: '#/components/schemas/User'
        version:
          type: string
          nullable: false
    IntegrationsResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the API response
          example: "success"
        providers:
          type: array
          description: List of integration providers with their details
          items:
            $ref: '#/components/schemas/IntegrationProvider'
    IntegrationProvider:
      type: object
      properties:
        provider:
          type: string
          description: Identifier for the provider
          example: "MAPMYFITNESS"
        name:
          type: string
          description: Display name of the integration
          example: "MapMyFitness"
        icon:
          type: string
          description: URL for the provider's icon image
          example: "https://api.tryterra.co/v2/static/assets/img/app_icons/mapmyfitness.webp"
        setup:
          type: string
          description: Indicates how the integration is set up
          example: "API_KEYS_MANAGED"
        enabled:
          type: boolean
          description: Whether the integration is enabled
          example: true
        types:
          type: object
          description: Indicates the types of data available through the provider
          properties:
            activity:
              type: boolean
              example: true
            body:
              type: boolean
              example: false
            nutrition:
              type: boolean
              example: false
            daily:
              type: boolean
              example: false
            sleep:
              type: boolean
              example: false
            menstruation:
              type: boolean
              example: false
    WebhookEvents:
      type: object
      properties: {}
      oneOf:
      - $ref: '#/components/schemas/UserAuthWebhook'
      - $ref: '#/components/schemas/UserReauthWebhook'
      - $ref: '#/components/schemas/UserDeauthWebhook'
      - $ref: '#/components/schemas/AccessRevokedWebhook'
      - $ref: '#/components/schemas/GoogleNoDataSourceWebhook'
      - $ref: '#/components/schemas/ConnectionErrorWebhook'
      - $ref: '#/components/schemas/DataProcessingWebhook'
      - $ref: '#/components/schemas/LargeRequestSendingWebhook'
      - $ref: '#/components/schemas/AuthenticationFailedWebhook'
      - $ref: '#/components/schemas/ConnectionDegradedWebhook'
      
      discriminator:
        propertyName: type
        mapping:
          UserAuthWebhook: '#/components/schemas/UserAuthWebhook'
          UserReauthWebhook: '#/components/schemas/UserReauthWebhook'
          UserDeauthWebhook: '#/components/schemas/UserDeauthWebhook'
          AccessRevokedWebhook: '#/components/schemas/AccessRevokedWebhook'
          GoogleNoDataSourceWebhook: '#/components/schemas/GoogleNoDataSourceWebhook'
          ConnectionErrorWebhook: '#/components/schemas/ConnectionErrorWebhook'
          DataProcessingWebhook: '#/components/schemas/DataProcessingWebhook'
          LargeRequestSendingWebhook: '#/components/schemas/LargeRequestSendingWebhook'
      
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    devIdAuth:
      type: apiKey
      in: header
      name: dev-id