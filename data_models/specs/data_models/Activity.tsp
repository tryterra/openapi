import "./Samples.tsp";
import "./DataDevice.tsp";
import "./common.tsp";
namespace Terra.Models;

// Activity Model
model Activity {
    @doc("Number of minutes spent at various intensities during the workout, as reported by the Fitness Data provider.")
    active_durations_data?: ActiveDurationsData;

    @doc("Object containing calorie-related information for the user during the specific workout.")
    calories_data?: CaloriesData;

    @doc("Cheat detection flag.")
    @example(0)
    cheat_detection?: integer;

    @doc("Object containing Terra Scores.")
    data_enrichment?: DataEnrichment;

    @doc("Object containing information on the device which recorded the specific workout.")
    device_data?: DeviceData;

    @doc("Object containing information related to distance covered during the associated workout.")
    distance_data?: DistanceData;

    @doc("Object containing information on the energy expended by the user during the workout.")
    energy_data?: EnergyData;

    @doc("Object containing heartrate-related information for the workout.")
    heart_rate_data?: HeartRateData;

    @doc("Object containing information on data for each lap performed by the user - mostly relates to track & field running activities, and swimming activities.")
    lap_data?: LapData;

    @doc("Object containing information on the Metabolic Equivalent of Task for the workout.")
    MET_data?: METData;

    @doc("Object containing workout metadata.")
    metadata: ActivityMetadata;

    @doc("Object containing information on the user's movement throughout the workout.")
    movement_data?: MovementData;

    @doc("Object containing information on oxygen-related metrics for the workout.")
    oxygen_data?: OxygenData;

    @doc("Object containing polyline-representation map data, plotting the user's trajectory throughout the workout.")
    polyline_map_data?: PolylineMapData;

    @doc("Object containing information on the user's position throughout the workout.")
    position_data?: PositionData;

    @doc("Object containing information on the power generated by the user during the workout.")
    power_data?: PowerData;

    @doc("Object containing information on the cardiovascular strain imposed on the user during the workout.")
    strain_data?: StrainData;

    @doc("Object containing information on the stress put on the user's body from a workout.")
    TSS_data?: TSSData;

    @doc("Object containing information on the work output of the user during the workout.")
    work_data?: WorkData;
}

model DataEnrichment {
    @doc("User's stress score.")
    stress_score?: integer;
}

model DistanceData {
    @doc("Object containing detailed distance information - this may included second-by-second samples.")
    detailed?: DistanceDataDetailed;

    @doc("Object containing summary information related to distance covered throughout the workout.")
    summary?: DistanceDataSummary;
}

model DistanceDataSummary {
    @doc("Total distance covered by the user throughout the workout.")
    distance_meters?: integer;

    @doc("Average elevation of the user throughout the workout.")
    elevation?: ElevationData;

    @doc("Total number of elevation gain in floors climbed equivalent throughout the workout, as determined by the fitness data provider.")
    floors_climbed?: integer;

    @doc("Total number of steps performed during the workout.")
    steps?: integer;

    @doc("Summary information of the user's swimming statistics for the workout, if applicable.")
    swimming?: SwimmingData;
}

model EnergyData {
    energy_kilojoules?: integer;
    energy_planned_kilojoules?: integer;
}

model LapData {
    laps?: LapSample[];
}

model ActivityMetadata {
    @doc("The City in which the workout was performed.")
    @example("San Francisco")
    city?: string;

    @doc("The Country in which the workout was performed.")
    @example("United States")
    country?: string;

    @doc("The end time of the associated workout, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time.")
    @example("2022-10-28T10:00:00.000000+01:00")
    end_time: string;

    @doc("The name - either user-entered or given by the fitness data provider - of the associated workout.")
    @example("Morning Run")
    name?: string;

    @doc("The start time of the associated workout, in ISO8601 format with microsecond precision. TimeZone info will be provided whenever possible. If absent, the time corresponds to the user's local time.")
    @example("1999-11-23T09:00:00.000000+02:00")
    start_time: string;

    @doc("The State in which the workout was performed.")
    @example("California")
    state?: string;

    @doc("A unique identifier for the workout - note that this is unique for the given user, and may not be globally unique.")
    @example("123e4567-e89b-12d3-a456-426614174000")
    summary_id: string;

    @doc("Indicates whether the timestamps in this payload are localized (LOCAL) or in UTC. 0 = UTC timestamps with +00:00 offset (avoids 'Z' notation for compatibility); 1 = LOCAL timestamps that may include or exclude the timezone, following ISO8601.")
    @example(0)
    timestamp_localization?: integer;

    @doc("The type of activity performed for the associated workout.")
    @example(Terra.Enums.ActivityType.RUNNING)
    type: Terra.Enums.ActivityType;

    @doc("The upload type for the associated workout, providing information on whether this was an automatic workout or user-entered.")
    upload_type: Terra.Enums.UploadType;
}

model MovementData {
    @doc("Adjusted max speed of the user during the workout - generated using Terra's algorithms to remove potential affecting the user's actual max speed measurement.")
    @example(4.2)
    adjusted_max_speed_meters_per_second?: float;

    @doc("Average cadence of the user during the workout, in RPM.")
    @example(85.0)
    avg_cadence_rpm?: float;

    @doc("Average pace of the user during the workout.")
    @example(6.2)
    avg_pace_minutes_per_kilometer?: float;

    @doc("Average speed of the user during the workout.")
    @example(3.2)
    avg_speed_meters_per_second?: float;

    @doc("Average torque generated by the user during the workout - mainly relevant for cycling activities.")
    @example(40.0)
    avg_torque_newton_meters?: float;

    @doc("Average velocity of the user during the workout - only calculated by certain providers, representing a separate quantity from speed.")
    @example(3.0)
    avg_velocity_meters_per_second?: float;

    @doc("Array of cadence values recorded throughout the workout, sampled at intervals determined by the fitness data provider.")
    cadence_samples?: CadenceSample[];

    @doc("Maximum cadence of the user during the workout - mainly relevant for cycling activities.")
    @example(110)
    max_cadence_rpm?: float;

    @doc("Maximum pace of the user during the workout.")
    @example(6.5)
    max_pace_minutes_per_kilometer?: float;

    @doc("Maximum speed of the user during the workout.")
    @example(4.5)
    max_speed_meters_per_second?: float;

    @doc("Maximum torque generated by the user during the workout - mainly relevant for cycling activities.")
    @example(55.5)
    max_torque_newton_meters?: float;

    @doc("Maximum velocity of the user during the workout - only calculated by certain providers, representing a separate quantity from speed.")
    @example(4.5)
    max_velocity_meters_per_second?: float;

    @doc("Average normalized speed of the user during the workout - only calculated by certain providers, representing a separate quantity from speed.")
    @example(3.8)
    normalized_speed_meters_per_second?: float;

    @doc("Array of the datapoints for the user's speed sampled throughout the workout.")
    speed_samples?: SpeedSample[];

    @doc("Array of the datapoints for the user's torque sampled throughout the workout.")
    torque_samples?: TorqueSample[];
}

model PolylineMapData {
    summary_polyline?: string;
}

model PositionData {
    @doc("Position of the user at the midway point of the workout, represented by a 2-value array of latitude, longitude, wherein each of the two numbers can be nullable.")
    @example(#[-18.4911, 130.9123])
    center_pos_lat_lng_deg?: float[];

    @doc("Position of the user at the end of the workout, represented by a 2-value array of latitude, longitude, wherein each of the two numbers can be nullable.")
    @example(#[-84.4911, -150.9123])
    end_pos_lat_lng_deg?: float[];

    @doc("Array of datapoints of the position of the user, sampled throughout the workout.")
    position_samples?: PositionSample[];

    @doc("Position of the user at the start of the workout, represented by a 2-value array of latitude, longitude, wherein each of the two numbers can be nullable.")
    @example(#[80.2394, 102.931])
    start_pos_lat_lng_deg?: float[];
}

model PowerData {
    avg_watts?: float;
    max_watts?: float;
    power_samples?: PowerSample[];
}

model TSSData {
    TSS_samples?: TSSSample[];
}

model WorkData {
    work_kilojoules?: float;
}
// End of Activity Model
